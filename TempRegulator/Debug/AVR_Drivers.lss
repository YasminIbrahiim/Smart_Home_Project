
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  00007356  000073ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008001fc  008001fc  00007586  2**0
                  ALLOC
  3 .stab         00008b68  00000000  00000000  00007588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f5f  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001404f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001420f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00014423  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00016a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00017f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00019210  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000193f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000196f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_1>
       8:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_2>
       c:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__vector_3>
      10:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_4>
      14:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_10>
      2c:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_11>
      30:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f3 e7       	ldi	r31, 0x73	; 115
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 38 	call	0x7176	; 0x7176 <main>
      8a:	0c 94 a9 39 	jmp	0x7352	; 0x7352 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 39 	jmp	0x731c	; 0x731c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 39 	jmp	0x731c	; 0x731c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 96 39 	jmp	0x732c	; 0x732c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7b 39 	jmp	0x72f6	; 0x72f6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 97 39 	jmp	0x732e	; 0x732e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 82 39 	jmp	0x7304	; 0x7304 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9e 39 	jmp	0x733c	; 0x733c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 96 39 	jmp	0x732c	; 0x732c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <SVAR_voidInit>:
#include "SVAR_cfg.h"
#include "SVAR_priv.h"

uint8 SVAR_u8ActiveVarient ;
void SVAR_voidInit(void )
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	 DIO_enuReadPin(SVAR_PIN_CONNECTION,&SVAR_u8ActiveVarient);
     ef2:	2a e1       	ldi	r18, 0x1A	; 26
     ef4:	32 e0       	ldi	r19, 0x02	; 2
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	b9 01       	movw	r22, r18
     efa:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <SVAR_u8GetActiveVariant>:
uint8 SVAR_u8GetActiveVariant(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	return SVAR_u8ActiveVarient ;
     f0c:	80 91 1a 02 	lds	r24, 0x021A
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <ICUM_voidInit>:
uint8 ICUM_u8FirstReading = 0 ;
uint8 ICUM_u8ActiveVariant ;


void ICUM_voidInit(void) 
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	ICUM_u8ActiveVariant = SVAR_u8GetActiveVariant();
     f1e:	0e 94 82 07 	call	0xf04	; 0xf04 <SVAR_u8GetActiveVariant>
     f22:	80 93 1b 02 	sts	0x021B, r24
	ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfcallback(ICUM_voidExtIntISR);
     f26:	80 91 1b 02 	lds	r24, 0x021B
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9c 01       	movw	r18, r24
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	c9 01       	movw	r24, r18
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 1b       	sub	r24, r18
     f44:	93 0b       	sbc	r25, r19
     f46:	fc 01       	movw	r30, r24
     f48:	e7 59       	subi	r30, 0x97	; 151
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	01 90       	ld	r0, Z+
     f4e:	f0 81       	ld	r31, Z
     f50:	e0 2d       	mov	r30, r0
     f52:	86 e2       	ldi	r24, 0x26	; 38
     f54:	98 e0       	ldi	r25, 0x08	; 8
     f56:	09 95       	icall
    ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfOvfCallback(ICUM_voidOvfIsr);
     f58:	80 91 1b 02 	lds	r24, 0x021B
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 1b       	sub	r24, r18
     f70:	93 0b       	sbc	r25, r19
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	fc 01       	movw	r30, r24
     f7a:	e7 59       	subi	r30, 0x97	; 151
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	83 ea       	ldi	r24, 0xA3	; 163
     f86:	99 e0       	ldi	r25, 0x09	; 9
     f88:	09 95       	icall
    
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <ICUM_voidGetFreqDuty>:

void ICUM_voidGetFreqDuty(float32 * pf32FreqCpy , float32 *f32DutyCpy)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <ICUM_voidGetFreqDuty+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ICUM_voidGetFreqDuty+0x8>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	7c 83       	std	Y+4, r23	; 0x04
     fa2:	6b 83       	std	Y+3, r22	; 0x03
    *pf32FreqCpy	=
     fa4:	80 91 1b 02 	lds	r24, 0x021B
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	c9 01       	movw	r24, r18
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	fc 01       	movw	r30, r24
     fc6:	ed 58       	subi	r30, 0x8D	; 141
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	a2 81       	ldd	r26, Z+2	; 0x02
     fd0:	b3 81       	ldd	r27, Z+3	; 0x03
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	20 91 06 02 	lds	r18, 0x0206
     fe2:	30 91 07 02 	lds	r19, 0x0207
     fe6:	40 91 08 02 	lds	r20, 0x0208
     fea:	50 91 09 02 	lds	r21, 0x0209
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
    		((float32)ICUM_apfConfigSet[ICUM_u8ActiveVariant].u32TimerFreq)
			/ (Ttotal);
    
	*f32DutyCpy  =  Tonu / Ttotal ;
    1006:	80 91 02 02 	lds	r24, 0x0202
    100a:	90 91 03 02 	lds	r25, 0x0203
    100e:	a0 91 04 02 	lds	r26, 0x0204
    1012:	b0 91 05 02 	lds	r27, 0x0205
    1016:	20 91 06 02 	lds	r18, 0x0206
    101a:	30 91 07 02 	lds	r19, 0x0207
    101e:	40 91 08 02 	lds	r20, 0x0208
    1022:	50 91 09 02 	lds	r21, 0x0209
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	eb 81       	ldd	r30, Y+3	; 0x03
    1034:	fc 81       	ldd	r31, Y+4	; 0x04
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03

}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <ICUM_voidExtIntISR>:

void ICUM_voidExtIntISR(void)
{
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	static uint8 ICUM_u8CntrReading = 1;
	
	if (ICUM_u8CntrReading == 1)
    105c:	80 91 68 01 	lds	r24, 0x0168
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	c9 f5       	brne	.+114    	; 0x10d6 <ICUM_voidExtIntISR+0x8a>
	{
		ICUM_u8FirstReading =
    1064:	80 91 1b 02 	lds	r24, 0x021B
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9c 01       	movw	r18, r24
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	c9 01       	movw	r24, r18
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	82 1b       	sub	r24, r18
    1082:	93 0b       	sbc	r25, r19
    1084:	fc 01       	movw	r30, r24
    1086:	e3 59       	subi	r30, 0x93	; 147
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	01 90       	ld	r0, Z+
    108c:	f0 81       	ld	r31, Z
    108e:	e0 2d       	mov	r30, r0
    1090:	09 95       	icall
    1092:	80 93 0a 02 	sts	0x020A, r24
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue();
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(FALLING_EDGE);
    1096:	80 91 1b 02 	lds	r24, 0x021B
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9c 01       	movw	r18, r24
    10a0:	22 0f       	add	r18, r18
    10a2:	33 1f       	adc	r19, r19
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	fc 01       	movw	r30, r24
    10b8:	e1 59       	subi	r30, 0x91	; 145
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	01 90       	ld	r0, Z+
    10be:	f0 81       	ld	r31, Z
    10c0:	e0 2d       	mov	r30, r0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	09 95       	icall
		ovf = 0 ;
    10c6:	10 92 fd 01 	sts	0x01FD, r1
    10ca:	10 92 fc 01 	sts	0x01FC, r1
		ICUM_u8CntrReading  = 2 ;
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 93 68 01 	sts	0x0168, r24
    10d4:	31 c1       	rjmp	.+610    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	}
	else if (ICUM_u8CntrReading == 2)
    10d6:	80 91 68 01 	lds	r24, 0x0168
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <ICUM_voidExtIntISR+0x94>
    10de:	71 c0       	rjmp	.+226    	; 0x11c2 <ICUM_voidExtIntISR+0x176>
	{
		Ton = 
    10e0:	80 91 1b 02 	lds	r24, 0x021B
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9c 01       	movw	r18, r24
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	82 1b       	sub	r24, r18
    10fe:	93 0b       	sbc	r25, r19
    1100:	fc 01       	movw	r30, r24
    1102:	e3 59       	subi	r30, 0x93	; 147
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	01 90       	ld	r0, Z+
    1108:	f0 81       	ld	r31, Z
    110a:	e0 2d       	mov	r30, r0
    110c:	09 95       	icall
    110e:	ac 01       	movw	r20, r24
    1110:	80 91 1b 02 	lds	r24, 0x021B
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9c 01       	movw	r18, r24
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	82 1b       	sub	r24, r18
    112e:	93 0b       	sbc	r25, r19
    1130:	fc 01       	movw	r30, r24
    1132:	ef 58       	subi	r30, 0x8F	; 143
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	20 81       	ld	r18, Z
    1138:	31 81       	ldd	r19, Z+1	; 0x01
    113a:	80 91 fc 01 	lds	r24, 0x01FC
    113e:	90 91 fd 01 	lds	r25, 0x01FD
    1142:	bc 01       	movw	r22, r24
    1144:	26 9f       	mul	r18, r22
    1146:	c0 01       	movw	r24, r0
    1148:	27 9f       	mul	r18, r23
    114a:	90 0d       	add	r25, r0
    114c:	36 9f       	mul	r19, r22
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	9a 01       	movw	r18, r20
    1154:	28 0f       	add	r18, r24
    1156:	39 1f       	adc	r19, r25
    1158:	80 91 0a 02 	lds	r24, 0x020A
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	48 1b       	sub	r20, r24
    1164:	59 0b       	sbc	r21, r25
    1166:	ca 01       	movw	r24, r20
    1168:	cc 01       	movw	r24, r24
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	80 93 fe 01 	sts	0x01FE, r24
    117e:	90 93 ff 01 	sts	0x01FF, r25
    1182:	a0 93 00 02 	sts	0x0200, r26
    1186:	b0 93 01 02 	sts	0x0201, r27
		(float32)((ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue()
		+(ovf*ICUM_apfConfigSet[ICUM_u8ActiveVariant].u16OvfCount))
		- ICUM_u8FirstReading );
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(RISING_EDGE);
    118a:	80 91 1b 02 	lds	r24, 0x021B
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 01       	movw	r18, r24
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	c9 01       	movw	r24, r18
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	82 1b       	sub	r24, r18
    11a8:	93 0b       	sbc	r25, r19
    11aa:	fc 01       	movw	r30, r24
    11ac:	e1 59       	subi	r30, 0x91	; 145
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	09 95       	icall
		
		ICUM_u8CntrReading  = 3 ;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	80 93 68 01 	sts	0x0168, r24
    11c0:	bb c0       	rjmp	.+374    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	}
	else if (ICUM_u8CntrReading == 3)
    11c2:	80 91 68 01 	lds	r24, 0x0168
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	09 f0       	breq	.+2      	; 0x11cc <ICUM_voidExtIntISR+0x180>
    11ca:	b6 c0       	rjmp	.+364    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	{
		Ttotal =(float32)(ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue())
    11cc:	80 91 1b 02 	lds	r24, 0x021B
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	e3 59       	subi	r30, 0x93	; 147
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	01 90       	ld	r0, Z+
    11f4:	f0 81       	ld	r31, Z
    11f6:	e0 2d       	mov	r30, r0
    11f8:	09 95       	icall
    11fa:	cc 01       	movw	r24, r24
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1208:	7b 01       	movw	r14, r22
    120a:	8c 01       	movw	r16, r24
    120c:	80 91 1b 02 	lds	r24, 0x021B
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 01       	movw	r18, r24
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	c9 01       	movw	r24, r18
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 1b       	sub	r24, r18
    122a:	93 0b       	sbc	r25, r19
    122c:	fc 01       	movw	r30, r24
    122e:	ef 58       	subi	r30, 0x8F	; 143
    1230:	fe 4f       	sbci	r31, 0xFE	; 254
    1232:	20 81       	ld	r18, Z
    1234:	31 81       	ldd	r19, Z+1	; 0x01
    1236:	80 91 fc 01 	lds	r24, 0x01FC
    123a:	90 91 fd 01 	lds	r25, 0x01FD
    123e:	bc 01       	movw	r22, r24
    1240:	26 9f       	mul	r18, r22
    1242:	c0 01       	movw	r24, r0
    1244:	27 9f       	mul	r18, r23
    1246:	90 0d       	add	r25, r0
    1248:	36 9f       	mul	r19, r22
    124a:	90 0d       	add	r25, r0
    124c:	11 24       	eor	r1, r1
    124e:	cc 01       	movw	r24, r24
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	c8 01       	movw	r24, r16
    1262:	b7 01       	movw	r22, r14
    1264:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	7c 01       	movw	r14, r24
    126e:	8d 01       	movw	r16, r26
    1270:	80 91 0a 02 	lds	r24, 0x020A
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa 27       	eor	r26, r26
    127a:	97 fd       	sbrc	r25, 7
    127c:	a0 95       	com	r26
    127e:	ba 2f       	mov	r27, r26
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c8 01       	movw	r24, r16
    128e:	b7 01       	movw	r22, r14
    1290:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	80 93 06 02 	sts	0x0206, r24
    129c:	90 93 07 02 	sts	0x0207, r25
    12a0:	a0 93 08 02 	sts	0x0208, r26
    12a4:	b0 93 09 02 	sts	0x0209, r27
		+ (ovf*(ICUM_apfConfigSet[ICUM_u8ActiveVariant].u16OvfCount))
		- ICUM_u8FirstReading ;
		Tonu = Ton ;
    12a8:	80 91 fe 01 	lds	r24, 0x01FE
    12ac:	90 91 ff 01 	lds	r25, 0x01FF
    12b0:	a0 91 00 02 	lds	r26, 0x0200
    12b4:	b0 91 01 02 	lds	r27, 0x0201
    12b8:	80 93 02 02 	sts	0x0202, r24
    12bc:	90 93 03 02 	sts	0x0203, r25
    12c0:	a0 93 04 02 	sts	0x0204, r26
    12c4:	b0 93 05 02 	sts	0x0205, r27
		ovf = 0 ;
    12c8:	10 92 fd 01 	sts	0x01FD, r1
    12cc:	10 92 fc 01 	sts	0x01FC, r1
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(FALLING_EDGE);
    12d0:	80 91 1b 02 	lds	r24, 0x021B
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	c9 01       	movw	r24, r18
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	82 1b       	sub	r24, r18
    12ee:	93 0b       	sbc	r25, r19
    12f0:	fc 01       	movw	r30, r24
    12f2:	e1 59       	subi	r30, 0x91	; 145
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	09 95       	icall
		ICUM_u8FirstReading =
    1300:	80 91 1b 02 	lds	r24, 0x021B
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 01       	movw	r18, r24
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	c9 01       	movw	r24, r18
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	82 1b       	sub	r24, r18
    131e:	93 0b       	sbc	r25, r19
    1320:	fc 01       	movw	r30, r24
    1322:	e3 59       	subi	r30, 0x93	; 147
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	01 90       	ld	r0, Z+
    1328:	f0 81       	ld	r31, Z
    132a:	e0 2d       	mov	r30, r0
    132c:	09 95       	icall
    132e:	80 93 0a 02 	sts	0x020A, r24
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue();
		
		ICUM_u8CntrReading =2 ;
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	80 93 68 01 	sts	0x0168, r24
	
	
	
	
	
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <ICUM_voidOvfIsr>:

void ICUM_voidOvfIsr(void)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	static uint8 ovfCnt = 0;
	ovfCnt++;
    134e:	80 91 0b 02 	lds	r24, 0x020B
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 0b 02 	sts	0x020B, r24
	ovf++;
    1358:	80 91 fc 01 	lds	r24, 0x01FC
    135c:	90 91 fd 01 	lds	r25, 0x01FD
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 fd 01 	sts	0x01FD, r25
    1366:	80 93 fc 01 	sts	0x01FC, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <UART_voidInit>:
#include "UART_cfg.h"
#include "UART_priv.h"


void UART_voidInit(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	 	 /*Set URSEL to access UCSRC Reg*/
	 	 SET_BIT(UCSRC,7);
    1378:	a0 e4       	ldi	r26, 0x40	; 64
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e0 e4       	ldi	r30, 0x40	; 64
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8c 93       	st	X, r24

	 	 /*Receive enable config*/
#if UART_RIECEVE_ENABLE == UART_ENABLED
		 SET_BIT(UCSRB,4);
    1386:	aa e2       	ldi	r26, 0x2A	; 42
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ea e2       	ldi	r30, 0x2A	; 42
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 61       	ori	r24, 0x10	; 16
    1392:	8c 93       	st	X, r24
#endif


		 /*Send enable config*/
#if UART_SEND_ENABLE == UART_ENABLED
		 SET_BIT(UCSRB,3);
    1394:	aa e2       	ldi	r26, 0x2A	; 42
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e2       	ldi	r30, 0x2A	; 42
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,3);
#endif

		 /*Receive interrupt enable config*/
#if UART_RX_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,7);
    13a2:	aa e2       	ldi	r26, 0x2A	; 42
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e2       	ldi	r30, 0x2A	; 42
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,7);
#endif

		 /*Send interrupt enable config*/
#if UART_TX_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,6);
    13b0:	aa e2       	ldi	r26, 0x2A	; 42
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e2       	ldi	r30, 0x2A	; 42
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 64       	ori	r24, 0x40	; 64
    13bc:	8c 93       	st	X, r24
#endif

		 /*UDR empty interrupt enable config*/

#if UART_UDR_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,5);
    13be:	aa e2       	ldi	r26, 0x2A	; 42
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ea e2       	ldi	r30, 0x2A	; 42
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 62       	ori	r24, 0x20	; 32
    13ca:	8c 93       	st	X, r24
#elif
		 CLR_BIT(UCSRB,5);
#endif


		 SET_BIT(UCSRB,5);
    13cc:	aa e2       	ldi	r26, 0x2A	; 42
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ea e2       	ldi	r30, 0x2A	; 42
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 62       	ori	r24, 0x20	; 32
    13d8:	8c 93       	st	X, r24

		 /*Mode config (Asynchronous-Synchronous)*/
#if UART_MODE_SELECT == UART_ASYNCHRONOUS
		 SET_BIT(UCSRC,6);
    13da:	a0 e4       	ldi	r26, 0x40	; 64
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e0 e4       	ldi	r30, 0x40	; 64
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	8c 93       	st	X, r24
#elif
		 CLR_BIT(UCSRC,6);
#endif

		 /*Parity Mode config*/
		 UCSRC|=(UART_PARITY_MODE<<4);
    13e8:	a0 e4       	ldi	r26, 0x40	; 64
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e0 e4       	ldi	r30, 0x40	; 64
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8c 93       	st	X, r24
#if UART_CLOCK_POLARITY == UART_SAMPLE_FALLING_EDGE
		 SET_BIT(UCSRC,0);
    13f4:	a0 e4       	ldi	r26, 0x40	; 64
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e4       	ldi	r30, 0x40	; 64
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	8c 93       	st	X, r24
		 CLR_BIT(UCSRC,0);
#endif

		 /*Stop Bits config*/
#if UART_STOP_BIT_NO == UART_1_STOP_BIT
		 SET_BIT(UCSRC,3);
    1402:	a0 e4       	ldi	r26, 0x40	; 64
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e0 e4       	ldi	r30, 0x40	; 64
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 60       	ori	r24, 0x08	; 8
    140e:	8c 93       	st	X, r24
#elif UART_CHAR_SIZE == UART_7_BITS
		 CLR_BIT(UCSRC,1);
		 SET_BIT(UCSRC,2);
		 CLR_BIT(UCSRB,2);
#elif UART_CHAR_SIZE == UART_8_BITS
		 SET_BIT(UCSRC,1);
    1410:	a0 e4       	ldi	r26, 0x40	; 64
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e0 e4       	ldi	r30, 0x40	; 64
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	82 60       	ori	r24, 0x02	; 2
    141c:	8c 93       	st	X, r24
		 SET_BIT(UCSRC,2);
    141e:	a0 e4       	ldi	r26, 0x40	; 64
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e0 e4       	ldi	r30, 0x40	; 64
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	84 60       	ori	r24, 0x04	; 4
    142a:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,2);
    142c:	aa e2       	ldi	r26, 0x2A	; 42
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ea e2       	ldi	r30, 0x2A	; 42
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8b 7f       	andi	r24, 0xFB	; 251
    1438:	8c 93       	st	X, r24
		 SET_BIT(UCSRB,2);
#endif


		 /*Baud Rate Value Config*/
		 UBRRH = 0;
    143a:	e0 e4       	ldi	r30, 0x40	; 64
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	10 82       	st	Z, r1
		 UBRRL = UART_BAUD_RATE;
    1440:	e9 e2       	ldi	r30, 0x29	; 41
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	83 e3       	ldi	r24, 0x33	; 51
    1446:	80 83       	st	Z, r24

}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <UART_voidSendByte>:

void UART_voidSendByte(uint8 Copy_u8Byte)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
	/*wait while previous sending is complete*/
	while((GET_BIT(UCSRA,5))==0 );
    145a:	eb e2       	ldi	r30, 0x2B	; 43
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 95       	swap	r24
    1462:	86 95       	lsr	r24
    1464:	87 70       	andi	r24, 0x07	; 7
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	90 70       	andi	r25, 0x00	; 0
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	a1 f3       	breq	.-24     	; 0x145a <UART_voidSendByte+0xc>
	/*send byte*/
	UDR = Copy_u8Byte;
    1472:	ec e2       	ldi	r30, 0x2C	; 44
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	80 83       	st	Z, r24
}
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <UART_voidRecieveByte>:

uint8 UART_voidRecieveByte(uint16 Copy_u16Timeout)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <UART_voidRecieveByte+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
	/*wait for incoming byte for Timeout period*/
	do
	{
		/*if a byte received return received byte*/
		if ( (GET_BIT(UCSRA,7)) == 1)
    1492:	eb e2       	ldi	r30, 0x2B	; 43
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 1f       	adc	r24, r24
    149a:	88 27       	eor	r24, r24
    149c:	88 1f       	adc	r24, r24
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	29 f4       	brne	.+10     	; 0x14ac <UART_voidRecieveByte+0x2a>
		{
			return UDR;
    14a2:	ec e2       	ldi	r30, 0x2C	; 44
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8b 83       	std	Y+3, r24	; 0x03
    14aa:	0a c0       	rjmp	.+20     	; 0x14c0 <UART_voidRecieveByte+0x3e>

		}

	}while(--Copy_u16Timeout);
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	51 f7       	brne	.-44     	; 0x1492 <UART_voidRecieveByte+0x10>

	 /*if no data received return 0*/
	return 0;
    14be:	1b 82       	std	Y+3, r1	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <TIM2_voidInit>:

pf TIM2_pfCtcCallback ;
pf TIM2_pfOvfCallback ;

void TIM2_voidInit(void)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	#if   TIM2_MODE == TIM2_NORMAL_MODE 
		CLR_BIT(TCCR2 , 6);
    14d6:	a5 e4       	ldi	r26, 0x45	; 69
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e4       	ldi	r30, 0x45	; 69
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7b       	andi	r24, 0xBF	; 191
    14e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR2 , 3);
    14e4:	a5 e4       	ldi	r26, 0x45	; 69
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e4       	ldi	r30, 0x45	; 69
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , 6);
		SET_BIT(TCCR2 , 3);
   #endif
   
   
	TCCR2 &= (0xF8);/* clear reg 0b1111 1000 */
    14f2:	a5 e4       	ldi	r26, 0x45	; 69
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e4       	ldi	r30, 0x45	; 69
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	8c 93       	st	X, r24
	TCCR2 |=((0x03) & TIM2_PRESCALLER) ; /* write in reg */
    1500:	a5 e4       	ldi	r26, 0x45	; 69
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e4       	ldi	r30, 0x45	; 69
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	8c 93       	st	X, r24
  
	TCNT2 = 0;
    150e:	e4 e4       	ldi	r30, 0x44	; 68
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	10 82       	st	Z, r1
	OCR2  = 0;
    1514:	e3 e4       	ldi	r30, 0x43	; 67
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1
	/* Disable Interrupt  OVF CM */
	CLR_BIT(TIMSK , 6) ;
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 7b       	andi	r24, 0xBF	; 191
    1526:	8c 93       	st	X, r24
	CLR_BIT(TIMSK , 7) ;
    1528:	a9 e5       	ldi	r26, 0x59	; 89
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e9 e5       	ldi	r30, 0x59	; 89
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 77       	andi	r24, 0x7F	; 127
    1534:	8c 93       	st	X, r24
	/* Clear IF flags OVF CM */
	SET_BIT(TIFR  , 6) ;
    1536:	a8 e5       	ldi	r26, 0x58	; 88
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e8 e5       	ldi	r30, 0x58	; 88
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	8c 93       	st	X, r24
	SET_BIT(TIFR  , 7) ;
    1544:	a8 e5       	ldi	r26, 0x58	; 88
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e5       	ldi	r30, 0x58	; 88
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <TIM2_voidSetPreloadValue>:
void TIM2_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = u8PreloadValueCpy;
    1564:	e4 e4       	ldi	r30, 0x44	; 68
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	80 83       	st	Z, r24
}
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <TIM2_voidSetOutputCompareValue>:
void TIM2_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8LoadValueCpy;
    1580:	e3 e4       	ldi	r30, 0x43	; 67
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	80 83       	st	Z, r24
}
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <TIM2_voidEnableOVFIntterrupt>:
void TIM2_voidEnableOVFIntterrupt(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 6) ;
    1598:	a9 e5       	ldi	r26, 0x59	; 89
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e9 e5       	ldi	r30, 0x59	; 89
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	8c 93       	st	X, r24
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <TIM2_voidDisableOVFIntterrupt>:
void TIM2_voidDisableOVFIntterrupt(void)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 6) ;
    15b4:	a9 e5       	ldi	r26, 0x59	; 89
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e9 e5       	ldi	r30, 0x59	; 89
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 7b       	andi	r24, 0xBF	; 191
    15c0:	8c 93       	st	X, r24
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <TIM2_voidEnableCTCIntterrupt>:
void TIM2_voidEnableCTCIntterrupt(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 7) ;
    15d0:	a9 e5       	ldi	r26, 0x59	; 89
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e9 e5       	ldi	r30, 0x59	; 89
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	8c 93       	st	X, r24
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <TIM2_voidDisableCTCIntterrupt>:
void TIM2_voidDisableCTCIntterrupt(void)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 7) ;
    15ec:	a9 e5       	ldi	r26, 0x59	; 89
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e9 e5       	ldi	r30, 0x59	; 89
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	8c 93       	st	X, r24
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <TIM2_voidSetOvfCallback>:
void TIM2_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <TIM2_voidSetOvfCallback+0x6>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
	pfOvfCallbackCpy = TIM2_pfOvfCallback;
    160e:	80 91 1c 02 	lds	r24, 0x021C
    1612:	90 91 1d 02 	lds	r25, 0x021D
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <TIM2_voidSetCtcCallback>:
void TIM2_voidSetCtcCallback(pf pfCtcCallbackCpy)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <TIM2_voidSetCtcCallback+0x6>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
	pfCtcCallbackCpy = TIM2_pfCtcCallback;
    1632:	80 91 1e 02 	lds	r24, 0x021E
    1636:	90 91 1f 02 	lds	r25, 0x021F
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <TIM2_u16GetCntrValue>:

uint16 TIM2_u16GetCntrValue(void)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT2;
    1650:	e4 e4       	ldi	r30, 0x44	; 68
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <__vector_5>:

/*OVF ISR*/
void __vector_5 (void) __attribute__((signal ,used));
void __vector_5 (void)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfOvfCallback();
    168a:	e0 91 1c 02 	lds	r30, 0x021C
    168e:	f0 91 1d 02 	lds	r31, 0x021D
    1692:	09 95       	icall
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_4>:
/*CM ISR*/
void __vector_4 (void) __attribute__((signal ,used));
void __vector_4 (void)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
   TIM2_pfCtcCallback();
    16e4:	e0 91 1e 02 	lds	r30, 0x021E
    16e8:	f0 91 1f 02 	lds	r31, 0x021F
    16ec:	09 95       	icall
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti

00001714 <TIM2_voidDelayMs>:

void TIM2_voidDelayMs(uint16 u16DalayTimeCpy)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <TIM2_voidDelayMs+0x6>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
	
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <TIM0_voidInit>:
pf TIM0_pfCtcCallback ;
pf TIM0_pfOvfCallback ;
uint8 delay =0;
uint32 msec =0;
void TIM0_voidInit(void)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	#if   TIM0_MODE == TIM0_NORMAL_MODE 
		CLR_BIT(TCCR0 , 6);
		CLR_BIT(TCCR0 , 3);
	#elif TIM0_MODE == TIM0_PWM_PHASE_CORRECT_MODE
		SET_BIT(TCCR0 , 6);
    1734:	a3 e5       	ldi	r26, 0x53	; 83
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e3 e5       	ldi	r30, 0x53	; 83
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 64       	ori	r24, 0x40	; 64
    1740:	8c 93       	st	X, r24
		CLR_BIT(TCCR0 , 3);
    1742:	a3 e5       	ldi	r26, 0x53	; 83
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e3 e5       	ldi	r30, 0x53	; 83
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	87 7f       	andi	r24, 0xF7	; 247
    174e:	8c 93       	st	X, r24
   #else
		SET_BIT(TCCR0 , 6);
		SET_BIT(TCCR0 , 3);
   #endif
  
  TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    1750:	a3 e5       	ldi	r26, 0x53	; 83
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e3 e5       	ldi	r30, 0x53	; 83
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 7f       	andi	r24, 0xF8	; 248
    175c:	8c 93       	st	X, r24
  TCCR0 |=((0x03)& TIM0_PRESCALLER) ; /* write in reg */
    175e:	a3 e5       	ldi	r26, 0x53	; 83
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e3 e5       	ldi	r30, 0x53	; 83
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	81 60       	ori	r24, 0x01	; 1
    176a:	8c 93       	st	X, r24

 TCNT0 = 0;
    176c:	e2 e5       	ldi	r30, 0x52	; 82
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	10 82       	st	Z, r1
 OCR0  = 0;
    1772:	ec e5       	ldi	r30, 0x5C	; 92
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
 /* Disable Interrupt  OVF CM */
 CLR_BIT(TIMSK , 0) ;
    1778:	a9 e5       	ldi	r26, 0x59	; 89
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e9 e5       	ldi	r30, 0x59	; 89
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	8c 93       	st	X, r24
 CLR_BIT(TIMSK , 1) ;
    1786:	a9 e5       	ldi	r26, 0x59	; 89
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 e5       	ldi	r30, 0x59	; 89
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8d 7f       	andi	r24, 0xFD	; 253
    1792:	8c 93       	st	X, r24
 /* Clear IF flags OVF CM */
 SET_BIT(TIFR  , 0) ;
    1794:	a8 e5       	ldi	r26, 0x58	; 88
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e5       	ldi	r30, 0x58	; 88
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8c 93       	st	X, r24
 SET_BIT(TIFR  , 1) ;
    17a2:	a8 e5       	ldi	r26, 0x58	; 88
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e5       	ldi	r30, 0x58	; 88
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	8c 93       	st	X, r24

}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <TIM0_voidSetPreloadValue>:
void TIM0_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8PreloadValueCpy;
    17c2:	e2 e5       	ldi	r30, 0x52	; 82
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	80 83       	st	Z, r24
}
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <TIM0_voidSetOutputCompareValue>:
void TIM0_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8LoadValueCpy; 
    17de:	ec e5       	ldi	r30, 0x5C	; 92
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	80 83       	st	Z, r24
}
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <TIM0_voidEnableOVFIntterrupt>:
void TIM0_voidEnableOVFIntterrupt(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 0) ;
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <TIM0_voidDisableOVFIntterrupt>:
void TIM0_voidDisableOVFIntterrupt(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 0) ;
    1812:	a9 e5       	ldi	r26, 0x59	; 89
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e9 e5       	ldi	r30, 0x59	; 89
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	8c 93       	st	X, r24
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TIM0_voidEnableCTCIntterrupt>:
void TIM0_voidEnableCTCIntterrupt(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK , 1) ;
    182e:	a9 e5       	ldi	r26, 0x59	; 89
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e9 e5       	ldi	r30, 0x59	; 89
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	82 60       	ori	r24, 0x02	; 2
    183a:	8c 93       	st	X, r24
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <TIM0_voidDisableCTCIntterrupt>:
void TIM0_voidDisableCTCIntterrupt(void)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK , 1) ;
    184a:	a9 e5       	ldi	r26, 0x59	; 89
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e9 e5       	ldi	r30, 0x59	; 89
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8d 7f       	andi	r24, 0xFD	; 253
    1856:	8c 93       	st	X, r24
}
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <TIM0_voidSetOvfCallback>:
void TIM0_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <TIM0_voidSetOvfCallback+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOvfCallback = pfOvfCallbackCpy ;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	90 93 23 02 	sts	0x0223, r25
    1874:	80 93 22 02 	sts	0x0222, r24
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <TIM0_voidSetCtcCallback>:
void TIM0_voidSetCtcCallback(pf pfCtcCallbackCpy)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <TIM0_voidSetCtcCallback+0x6>
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCtcCallback = pfCtcCallbackCpy;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	90 93 21 02 	sts	0x0221, r25
    1898:	80 93 20 02 	sts	0x0220, r24
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <__vector_11>:
/*OVF ISR*/
void __vector_11 (void) __attribute__((signal ,used));
void __vector_11 (void)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter = 0;
	counter++;
    18d0:	80 91 11 02 	lds	r24, 0x0211
    18d4:	90 91 12 02 	lds	r25, 0x0212
    18d8:	a0 91 13 02 	lds	r26, 0x0213
    18dc:	b0 91 14 02 	lds	r27, 0x0214
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	b1 1d       	adc	r27, r1
    18e6:	80 93 11 02 	sts	0x0211, r24
    18ea:	90 93 12 02 	sts	0x0212, r25
    18ee:	a0 93 13 02 	sts	0x0213, r26
    18f2:	b0 93 14 02 	sts	0x0214, r27

	TIM0_pfOvfCallback();
    18f6:	e0 91 22 02 	lds	r30, 0x0222
    18fa:	f0 91 23 02 	lds	r31, 0x0223
    18fe:	09 95       	icall
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <__vector_10>:
/*CM ISR*/
void __vector_10 (void) __attribute__((signal ,used));
void __vector_10 (void)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter = 0;
	counter++;
    1950:	80 91 15 02 	lds	r24, 0x0215
    1954:	90 91 16 02 	lds	r25, 0x0216
    1958:	a0 91 17 02 	lds	r26, 0x0217
    195c:	b0 91 18 02 	lds	r27, 0x0218
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	a1 1d       	adc	r26, r1
    1964:	b1 1d       	adc	r27, r1
    1966:	80 93 15 02 	sts	0x0215, r24
    196a:	90 93 16 02 	sts	0x0216, r25
    196e:	a0 93 17 02 	sts	0x0217, r26
    1972:	b0 93 18 02 	sts	0x0218, r27

	if( counter == msec && delay == 1){
    1976:	20 91 15 02 	lds	r18, 0x0215
    197a:	30 91 16 02 	lds	r19, 0x0216
    197e:	40 91 17 02 	lds	r20, 0x0217
    1982:	50 91 18 02 	lds	r21, 0x0218
    1986:	80 91 0d 02 	lds	r24, 0x020D
    198a:	90 91 0e 02 	lds	r25, 0x020E
    198e:	a0 91 0f 02 	lds	r26, 0x020F
    1992:	b0 91 10 02 	lds	r27, 0x0210
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	4a 07       	cpc	r20, r26
    199c:	5b 07       	cpc	r21, r27
    199e:	91 f4       	brne	.+36     	; 0x19c4 <__vector_10+0x9e>
    19a0:	80 91 0c 02 	lds	r24, 0x020C
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	71 f4       	brne	.+28     	; 0x19c4 <__vector_10+0x9e>
			counter=0;
    19a8:	10 92 15 02 	sts	0x0215, r1
    19ac:	10 92 16 02 	sts	0x0216, r1
    19b0:	10 92 17 02 	sts	0x0217, r1
    19b4:	10 92 18 02 	sts	0x0218, r1
			TIM0_pfCtcCallback();
    19b8:	e0 91 20 02 	lds	r30, 0x0220
    19bc:	f0 91 21 02 	lds	r31, 0x0221
    19c0:	09 95       	icall
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <__vector_10+0xb0>

	}
	else if(delay == 0)
    19c4:	80 91 0c 02 	lds	r24, 0x020C
    19c8:	88 23       	and	r24, r24
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <__vector_10+0xb0>
	{
		TIM0_pfCtcCallback();
    19cc:	e0 91 20 02 	lds	r30, 0x0220
    19d0:	f0 91 21 02 	lds	r31, 0x0221
    19d4:	09 95       	icall
	}

}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <TIM0_voidDelayMs>:
void TIM0_voidDelayMs(uint16 u16DalayTimeCpy)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <TIM0_voidDelayMs+0x6>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	TIM0_voidSetOutputCompareValue(250);
    1a0a:	8a ef       	ldi	r24, 0xFA	; 250
    1a0c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <TIM0_voidSetOutputCompareValue>
	delay =1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 0c 02 	sts	0x020C, r24
	msec = 4 *u16DalayTimeCpy;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	cc 01       	movw	r24, r24
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	80 93 0d 02 	sts	0x020D, r24
    1a2c:	90 93 0e 02 	sts	0x020E, r25
    1a30:	a0 93 0f 02 	sts	0x020F, r26
    1a34:	b0 93 10 02 	sts	0x0210, r27

}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <TIM0_u16GetCntrValue>:

uint16 TIM0_u16GetCntrValue(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT0;
    1a4a:	e2 e5       	ldi	r30, 0x52	; 82
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <TIM0_voidFPWMInit>:

void TIM0_voidFPWMInit(void){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif TIM0_PWM_MODE == TIM0_PHC_PWM_CLR_UPCNT

#define TIM0_MODE    TIM0_PWM_PHASE_CORRECT_MODE
	TIM0_voidInit();
    1a62:	0e 94 96 0b 	call	0x172c	; 0x172c <TIM0_voidInit>

	CLR_BIT(TCCR0,4);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 7e       	andi	r24, 0xEF	; 239
    1a72:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 62       	ori	r24, 0x20	; 32
    1a80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#endif


}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <SPI_voidInit>:


uint8 SPI_u8RxBuffer ; 
uint8 SPI_u8TxState  ;
void SPI_voidInit(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	/*Enable SPI */
#if  SPI_MODE == SPI_MASTER_MODE
	SPCR = (1<<6)|(1<<4)|(1<<0);
    1a90:	ed e2       	ldi	r30, 0x2D	; 45
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	81 e5       	ldi	r24, 0x51	; 81
    1a96:	80 83       	st	Z, r24
#else
	SPCR = (1<<6);

#endif

}
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <SPI_u8DataTransfer_Sync>:


void SPI_u8DataTransfer_Sync(uint8 u8DataCpy)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	SPDR  =  u8DataCpy ;
    1aaa:	ef e2       	ldi	r30, 0x2F	; 47
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	80 83       	st	Z, r24

	while(!(SPSR & (1<<7)));
    1ab2:	ee e2       	ldi	r30, 0x2E	; 46
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	dc f7       	brge	.-10     	; 0x1ab2 <SPI_u8DataTransfer_Sync+0x14>

}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <SPI_voidDataTransfer_Async>:

void SPI_voidDataTransfer_Async(uint8 u8DataCpy)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
	SPDR =  u8DataCpy ;
    1ad0:	ef e2       	ldi	r30, 0x2F	; 47
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	80 83       	st	Z, r24
	SPI_u8TxState = 2;
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	80 93 25 02 	sts	0x0225, r24
}
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <SPI_enuWriteStatus_Async>:

tenuWriteState SPI_enuWriteStatus_Async(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	tenuWriteState enuReturnStateLoc ;
	if (SPI_u8TxState == 1)
    1af0:	80 91 25 02 	lds	r24, 0x0225
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	21 f4       	brne	.+8      	; 0x1b00 <SPI_enuWriteStatus_Async+0x1a>
	{
		enuReturnStateLoc = WRITE_DONE ;
    1af8:	19 82       	std	Y+1, r1	; 0x01
		SPI_u8TxState = 0 ;
    1afa:	10 92 25 02 	sts	0x0225, r1
    1afe:	12 c0       	rjmp	.+36     	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else if (SPI_u8TxState == 2 )
    1b00:	80 91 25 02 	lds	r24, 0x0225
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <SPI_enuWriteStatus_Async+0x28>
	{
		enuReturnStateLoc = WRITE_PENDING ;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	0b c0       	rjmp	.+22     	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else if (SPI_u8TxState == 3 )
    1b0e:	80 91 25 02 	lds	r24, 0x0225
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	29 f4       	brne	.+10     	; 0x1b20 <SPI_enuWriteStatus_Async+0x3a>
	{
		enuReturnStateLoc = WRITE_NOT_DONE ;
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	89 83       	std	Y+1, r24	; 0x01
		SPI_u8TxState = 0 ;
    1b1a:	10 92 25 02 	sts	0x0225, r1
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else
	{
		enuReturnStateLoc = IDLE ;
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <SPI_u8DataRecieve_Async>:

uint8 SPI_u8DataRecieve_Async(void)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	return SPI_u8RxBuffer ;
    1b36:	80 91 24 02 	lds	r24, 0x0224
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <SPI_u8DataRecieve_Sync>:
uint8 SPI_u8DataRecieve_Sync(void)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(SPSR , 7) == 0);
    1b48:	ee e2       	ldi	r30, 0x2E	; 46
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	dc f7       	brge	.-10     	; 0x1b48 <SPI_u8DataRecieve_Sync+0x8>
	/* write collision check*/
	return SPDR ;
    1b52:	ef e2       	ldi	r30, 0x2F	; 47
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <SPI_voidSetInterruptState>:

void SPI_voidSetInterruptState(uint8 u8IntStateCpy)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
	if (u8IntStateCpy == SPI_INT_ENABLE )
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	41 f4       	brne	.+16     	; 0x1b80 <SPI_voidSetInterruptState+0x22>
	{
		SET_BIT (SPCR , 7 ) ;
    1b70:	ad e2       	ldi	r26, 0x2D	; 45
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ed e2       	ldi	r30, 0x2D	; 45
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 68       	ori	r24, 0x80	; 128
    1b7c:	8c 93       	st	X, r24
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <SPI_voidSetInterruptState+0x30>
	}
	else
	{
		CLR_BIT (SPCR , 7 ) ;
    1b80:	ad e2       	ldi	r26, 0x2D	; 45
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ed e2       	ldi	r30, 0x2D	; 45
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 77       	andi	r24, 0x7F	; 127
    1b8c:	8c 93       	st	X, r24
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <__vector_12>:

void __vector_12 (void) __attribute__ ((signal , used)) ;
void __vector_12 (void)
{   
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if ( GET_BIT(SPSR , 6))
    1bb0:	ee e2       	ldi	r30, 0x2E	; 46
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 95       	swap	r24
    1bb8:	86 95       	lsr	r24
    1bba:	86 95       	lsr	r24
    1bbc:	83 70       	andi	r24, 0x03	; 3
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	88 23       	and	r24, r24
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <__vector_12+0x3c>
	{
		SPI_u8TxState  = 3 ;
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	80 93 25 02 	sts	0x0225, r24
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <__vector_12+0x42>
	}
	else 
	{
		SPI_u8TxState  = 1 ;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 25 02 	sts	0x0225, r24
	}
	SPI_u8RxBuffer = SPDR ;
    1bd8:	ef e2       	ldi	r30, 0x2F	; 47
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 93 24 02 	sts	0x0224, r24
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <I2C_voidInit>:
#include "../I2C/I2C_cfg.h"
#include "../I2C/I2C_priv.h"


void I2C_voidInit(void)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	TWCR = 0x00;
    1c00:	e6 e5       	ldi	r30, 0x56	; 86
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	10 82       	st	Z, r1
	TWAR = 0x00;
    1c06:	e2 e2       	ldi	r30, 0x22	; 34
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	10 82       	st	Z, r1
	TWBR = 0x00;
    1c0c:	e0 e2       	ldi	r30, 0x20	; 32
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	10 82       	st	Z, r1
	TWSR = 0x00;
    1c12:	e1 e2       	ldi	r30, 0x21	; 33
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	10 82       	st	Z, r1
	/*Activating Pull Up Registers For SCL , SDA Pins*/
	TWAR = SLAVE_MODE_ADDRESS;
    1c18:	e2 e2       	ldi	r30, 0x22	; 34
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	80 83       	st	Z, r24

		/* Set prescaler value */
		switch(PRESCALER_VALUE)
		{
		case SET_PRESCALER_1:
			CLR_BIT(TWSR, 0);
    1c20:	a1 e2       	ldi	r26, 0x21	; 33
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e1 e2       	ldi	r30, 0x21	; 33
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	8c 93       	st	X, r24
			CLR_BIT(TWSR, 1);
    1c2e:	a1 e2       	ldi	r26, 0x21	; 33
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e1 e2       	ldi	r30, 0x21	; 33
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8d 7f       	andi	r24, 0xFD	; 253
    1c3a:	8c 93       	st	X, r24
	         TWBR = (uint8)(((float)F_CPU / (2.0 * 100000)) - 8);
    1c3c:	e0 e2       	ldi	r30, 0x20	; 32
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	80 83       	st	Z, r24
		break;
	case ENABLE_SLAVE_MODE:
		break;
	}

	DIO_enuPullWrite(DIO_u8PIN_16 , DIO_u8ACTIVATE);
    1c44:	80 e1       	ldi	r24, 0x10	; 16
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
	DIO_enuPullWrite(DIO_u8PIN_17 , DIO_u8ACTIVATE);
    1c4c:	81 e1       	ldi	r24, 0x11	; 17
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
	{
	case INTERRUPT_ENABLED:
		SET_BIT(TWCR,0);
		break;
	case INTERRUPT_DISABLED:
		CLR_BIT(TWCR,0);
    1c54:	a6 e5       	ldi	r26, 0x56	; 86
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e5       	ldi	r30, 0x56	; 86
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	8c 93       	st	X, r24
		break;

	}
	SET_BIT(TWCR,2); // Enable Bit
    1c62:	a6 e5       	ldi	r26, 0x56	; 86
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e5       	ldi	r30, 0x56	; 86
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	84 60       	ori	r24, 0x04	; 4
    1c6e:	8c 93       	st	X, r24
	SET_BIT(TWCR,6); // TWI Enable ACK (To ACK if SLA + R/W Received)
    1c70:	a6 e5       	ldi	r26, 0x56	; 86
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 e5       	ldi	r30, 0x56	; 86
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8c 93       	st	X, r24


}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <I2C_voidMasterTransmit>:

void I2C_voidMasterTransmit(uint8 u8SlaveAddressCpy, uint8 * pu8DataCpy, uint8 u8DataSizeCpy)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <I2C_voidMasterTransmit+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <I2C_voidMasterTransmit+0x8>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <I2C_voidMasterTransmit+0xa>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	7d 83       	std	Y+5, r23	; 0x05
    1c96:	6c 83       	std	Y+4, r22	; 0x04
    1c98:	4e 83       	std	Y+6, r20	; 0x06
	uint8 u8CntrLoc;
	uint8 u8CurrentStatus = 0;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
	TWI_voidStart();
    1c9c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TWI_voidStart>
	u8CurrentStatus = TWI_u8Get_Status();
    1ca0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	{
		if(u8CurrentStatus == MASTER_START_CONDITION_TRANSMITTED)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	88 30       	cpi	r24, 0x08	; 8
    1caa:	59 f5       	brne	.+86     	; 0x1d02 <I2C_voidMasterTransmit+0x7e>
		{
			u8SlaveAddressCpy &= 0xFE; // Masking SLA + W , so CLR Last Bit
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	8e 7f       	andi	r24, 0xFE	; 254
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
			TWI_voidWrite(u8SlaveAddressCpy);
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
		else
		{
			return ;
		}
	}
	u8CurrentStatus = TWI_u8Get_Status();
    1cb8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	{
		if(u8CurrentStatus == MASTER_SLA_W_TRASMITTED_ACK_RECEIVED)
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	88 31       	cpi	r24, 0x18	; 24
    1cc2:	f9 f4       	brne	.+62     	; 0x1d02 <I2C_voidMasterTransmit+0x7e>
		{
			for(u8CntrLoc = 0 ; u8CntrLoc < u8DataSizeCpy; u8CntrLoc++)
    1cc4:	1a 82       	std	Y+2, r1	; 0x02
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <I2C_voidMasterTransmit+0x72>
			{
				TWI_voidWrite(pu8DataCpy[u8CntrLoc]);
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	80 81       	ld	r24, Z
    1cda:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
				u8CurrentStatus = TWI_u8Get_Status();
    1cde:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    1ce2:	89 83       	std	Y+1, r24	; 0x01
				if(u8CurrentStatus ==MASTER_DATA_TRANSMITTED_ACK_RECEIVED)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	88 32       	cpi	r24, 0x28	; 40
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <I2C_voidMasterTransmit+0x6c>
				{
					continue;
				}
				else if(u8CurrentStatus == MASTER_DATA_TRANSMITTED_NO_ACK_RECEIVED)
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	80 33       	cpi	r24, 0x30	; 48
    1cee:	49 f4       	brne	.+18     	; 0x1d02 <I2C_voidMasterTransmit+0x7e>
	}
	u8CurrentStatus = TWI_u8Get_Status();
	{
		if(u8CurrentStatus == MASTER_SLA_W_TRASMITTED_ACK_RECEIVED)
		{
			for(u8CntrLoc = 0 ; u8CntrLoc < u8DataSizeCpy; u8CntrLoc++)
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	98 17       	cp	r25, r24
    1cfc:	28 f3       	brcs	.-54     	; 0x1cc8 <I2C_voidMasterTransmit+0x44>
		{
			return;
		}
	}

	TWI_voidStop();
    1cfe:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TWI_voidStop>

}
    1d02:	26 96       	adiw	r28, 0x06	; 6
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <I2C_voidSlaveReceive>:


void I2C_voidSlaveReceive(uint8 *pu8DataCpy, uint8 u8ArraySizeCpy)
{
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <I2C_voidSlaveReceive+0xa>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <I2C_voidSlaveReceive+0xc>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	9b 83       	std	Y+3, r25	; 0x03
    1d26:	8a 83       	std	Y+2, r24	; 0x02
    1d28:	6c 83       	std	Y+4, r22	; 0x04
		uint8 u8CtrLOC;
		CLR_BIT(TWCR,4);
    1d2a:	a6 e5       	ldi	r26, 0x56	; 86
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e6 e5       	ldi	r30, 0x56	; 86
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7e       	andi	r24, 0xEF	; 239
    1d36:	8c 93       	st	X, r24
		CLR_BIT(TWCR,5);
    1d38:	a6 e5       	ldi	r26, 0x56	; 86
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e6 e5       	ldi	r30, 0x56	; 86
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 7d       	andi	r24, 0xDF	; 223
    1d44:	8c 93       	st	X, r24
		SET_BIT(TWCR,6); //enable ack
    1d46:	a6 e5       	ldi	r26, 0x56	; 86
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e6 e5       	ldi	r30, 0x56	; 86
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	8c 93       	st	X, r24
		SET_BIT(TWCR,7); //clear interrupt flag
    1d54:	a6 e5       	ldi	r26, 0x56	; 86
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e6 e5       	ldi	r30, 0x56	; 86
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 68       	ori	r24, 0x80	; 128
    1d60:	8c 93       	st	X, r24

		while(!GET_BIT(TWCR,7));
    1d62:	e6 e5       	ldi	r30, 0x56	; 86
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	dc f7       	brge	.-10     	; 0x1d62 <I2C_voidSlaveReceive+0x4e>
		for(u8CtrLOC = 0 ; u8CtrLOC < u8ArraySizeCpy ; u8CtrLOC++)
    1d6c:	19 82       	std	Y+1, r1	; 0x01
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <I2C_voidSlaveReceive+0x7a>
		{
			pu8DataCpy[u8CtrLOC] = TWI_u8Read_ACK();
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	8c 01       	movw	r16, r24
    1d7c:	02 0f       	add	r16, r18
    1d7e:	13 1f       	adc	r17, r19
    1d80:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <TWI_u8Read_ACK>
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
		CLR_BIT(TWCR,5);
		SET_BIT(TWCR,6); //enable ack
		SET_BIT(TWCR,7); //clear interrupt flag

		while(!GET_BIT(TWCR,7));
		for(u8CtrLOC = 0 ; u8CtrLOC < u8ArraySizeCpy ; u8CtrLOC++)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	99 81       	ldd	r25, Y+1	; 0x01
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	98 17       	cp	r25, r24
    1d94:	68 f3       	brcs	.-38     	; 0x1d70 <I2C_voidSlaveReceive+0x5c>
		{
			pu8DataCpy[u8CtrLOC] = TWI_u8Read_ACK();
		}

		SET_BIT(TWCR,7);
    1d96:	a6 e5       	ldi	r26, 0x56	; 86
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e5       	ldi	r30, 0x56	; 86
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 68       	ori	r24, 0x80	; 128
    1da2:	8c 93       	st	X, r24

}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <TWI_voidStart>:


void TWI_voidStart(void)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(TWCR,2); // TWI Enable Pin
	CLR_BIT(TWCR,4); // TWI Disable Stop Condition
    1dbe:	a6 e5       	ldi	r26, 0x56	; 86
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e6 e5       	ldi	r30, 0x56	; 86
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 7e       	andi	r24, 0xEF	; 239
    1dca:	8c 93       	st	X, r24
	SET_BIT(TWCR,5); // TWI Enable Start Condition
    1dcc:	a6 e5       	ldi	r26, 0x56	; 86
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e6 e5       	ldi	r30, 0x56	; 86
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	8c 93       	st	X, r24
	SET_BIT(TWCR,7); // Clear TWINT Flag
    1dda:	a6 e5       	ldi	r26, 0x56	; 86
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e6 e5       	ldi	r30, 0x56	; 86
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	80 68       	ori	r24, 0x80	; 128
    1de6:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,7) == 0); // Wait for TWINT Flag to be Set (Start/Repeated Start Condition Sent Successfully)
    1de8:	e6 e5       	ldi	r30, 0x56	; 86
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	88 23       	and	r24, r24
    1df0:	dc f7       	brge	.-10     	; 0x1de8 <TWI_voidStart+0x32>
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <TWI_voidStop>:


void TWI_voidStop(void)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,2); //TWI Enable Pin
    1e00:	a6 e5       	ldi	r26, 0x56	; 86
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e5       	ldi	r30, 0x56	; 86
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	84 60       	ori	r24, 0x04	; 4
    1e0c:	8c 93       	st	X, r24
	SET_BIT(TWCR,4); // TWI Enable Stop Condition
    1e0e:	a6 e5       	ldi	r26, 0x56	; 86
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e6 e5       	ldi	r30, 0x56	; 86
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 61       	ori	r24, 0x10	; 16
    1e1a:	8c 93       	st	X, r24
	CLR_BIT(TWCR,5); // TWI Disable Start Condition
    1e1c:	a6 e5       	ldi	r26, 0x56	; 86
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e6 e5       	ldi	r30, 0x56	; 86
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7d       	andi	r24, 0xDF	; 223
    1e28:	8c 93       	st	X, r24
	SET_BIT(TWCR,7); // Clear TWINT Flag
    1e2a:	a6 e5       	ldi	r26, 0x56	; 86
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e6 e5       	ldi	r30, 0x56	; 86
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	8c 93       	st	X, r24
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <TWI_voidWrite>:

void TWI_voidWrite(uint8 u8DataCpy)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	0f 92       	push	r0
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	89 83       	std	Y+1, r24	; 0x01
	/* TWI_Start Must Be Called*/
	TWDR = u8DataCpy;
    1e4a:	e3 e2       	ldi	r30, 0x23	; 35
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	80 83       	st	Z, r24

	SET_BIT(TWCR,2); // TWI Enable Pin
    1e52:	a6 e5       	ldi	r26, 0x56	; 86
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e6 e5       	ldi	r30, 0x56	; 86
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	84 60       	ori	r24, 0x04	; 4
    1e5e:	8c 93       	st	X, r24
	SET_BIT(TWCR,7); // Clear TWINT Flag
    1e60:	a6 e5       	ldi	r26, 0x56	; 86
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e5       	ldi	r30, 0x56	; 86
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 68       	ori	r24, 0x80	; 128
    1e6c:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,7) == 0); // Wait for TWINT Flag to be Set (Data Sent Successfully)
    1e6e:	e6 e5       	ldi	r30, 0x56	; 86
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	88 23       	and	r24, r24
    1e76:	dc f7       	brge	.-10     	; 0x1e6e <TWI_voidWrite+0x30>
}
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <TWI_u8Read_ACK>:

uint8 TWI_u8Read_ACK(void)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	uint8 u8ReturnLoc = 0;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TWCR,2); // TWI Enable Pin
    1e8c:	a6 e5       	ldi	r26, 0x56	; 86
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e5       	ldi	r30, 0x56	; 86
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	84 60       	ori	r24, 0x04	; 4
    1e98:	8c 93       	st	X, r24
	SET_BIT(TWCR,6); // TWI Enable ACK
    1e9a:	a6 e5       	ldi	r26, 0x56	; 86
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 64       	ori	r24, 0x40	; 64
    1ea6:	8c 93       	st	X, r24
	SET_BIT(TWCR,7); // Clear TWINT Flag
    1ea8:	a6 e5       	ldi	r26, 0x56	; 86
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e6 e5       	ldi	r30, 0x56	; 86
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 68       	ori	r24, 0x80	; 128
    1eb4:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,7) == 0); // Wait for TWINT Flag to be Set (Data Received Successfully)
    1eb6:	e6 e5       	ldi	r30, 0x56	; 86
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	88 23       	and	r24, r24
    1ebe:	dc f7       	brge	.-10     	; 0x1eb6 <TWI_u8Read_ACK+0x36>
	u8ReturnLoc = TWDR;
    1ec0:	e3 e2       	ldi	r30, 0x23	; 35
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	return u8ReturnLoc;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <TWI_u8Read_NACK>:

uint8 TWI_u8Read_NACK(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	uint8 u8ReturnLoc = 0;
    1edc:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TWCR,2); // TWI Enable Pin
    1ede:	a6 e5       	ldi	r26, 0x56	; 86
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e6 e5       	ldi	r30, 0x56	; 86
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	84 60       	ori	r24, 0x04	; 4
    1eea:	8c 93       	st	X, r24
	CLR_BIT(TWCR,6); // TWI Disable ACK
    1eec:	a6 e5       	ldi	r26, 0x56	; 86
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e6 e5       	ldi	r30, 0x56	; 86
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 7b       	andi	r24, 0xBF	; 191
    1ef8:	8c 93       	st	X, r24
	SET_BIT(TWCR,7); // Clear TWINT Flag
    1efa:	a6 e5       	ldi	r26, 0x56	; 86
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e6 e5       	ldi	r30, 0x56	; 86
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	80 68       	ori	r24, 0x80	; 128
    1f06:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,7) == 0); // Wait for TWINT Flag to be Set (Data Received Successfully)
    1f08:	e6 e5       	ldi	r30, 0x56	; 86
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 23       	and	r24, r24
    1f10:	dc f7       	brge	.-10     	; 0x1f08 <TWI_u8Read_NACK+0x36>
	u8ReturnLoc = TWDR;
    1f12:	e3 e2       	ldi	r30, 0x23	; 35
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	89 83       	std	Y+1, r24	; 0x01
	return u8ReturnLoc;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <TWI_u8Get_Status>:

uint8 TWI_u8Get_Status(void)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	0f 92       	push	r0
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8ReturnStatusLoc = 0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
	u8ReturnStatusLoc = (TWSR & 0xF8);
    1f30:	e1 e2       	ldi	r30, 0x21	; 33
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	88 7f       	andi	r24, 0xF8	; 248
    1f38:	89 83       	std	Y+1, r24	; 0x01
	return u8ReturnStatusLoc;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <GIE_voidEnable>:
#include "GIE.h"
#include "GIE_cfg.h"
#include "GIE_priv.h"

void GIE_voidEnable(void)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1f4c:	af e5       	ldi	r26, 0x5F	; 95
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ef e5       	ldi	r30, 0x5F	; 95
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 68       	ori	r24, 0x80	; 128
    1f58:	8c 93       	st	X, r24
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1f68:	af e5       	ldi	r26, 0x5F	; 95
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ef e5       	ldi	r30, 0x5F	; 95
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8f 77       	andi	r24, 0x7F	; 127
    1f74:	8c 93       	st	X, r24
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <EXTINT2_voidInit>:


pf EXTINT2_pfCallback ;

void EXTINT2_voidInit(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62

#if EXTINT2_SENSE_MODE == Falling_Edge
	CLR_BIT(MCUCSR , 6) ;

#else
	SET_BIT(MCUCSR , 6) ;
    1f84:	a4 e5       	ldi	r26, 0x54	; 84
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e4 e5       	ldi	r30, 0x54	; 84
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 64       	ori	r24, 0x40	; 64
    1f90:	8c 93       	st	X, r24
#endif

	CLR_BIT(GICR,5); // Disable External interrupt 0
    1f92:	ab e5       	ldi	r26, 0x5B	; 91
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	eb e5       	ldi	r30, 0x5B	; 91
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8f 7d       	andi	r24, 0xDF	; 223
    1f9e:	8c 93       	st	X, r24
	SET_BIT(GIFR,5); //Clear External interrupt 0 Flag
    1fa0:	aa e5       	ldi	r26, 0x5A	; 90
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ea e5       	ldi	r30, 0x5A	; 90
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 62       	ori	r24, 0x20	; 32
    1fac:	8c 93       	st	X, r24

}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <EXTINT2_voidEnable>:

void EXTINT2_voidEnable(void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,5);
    1fbc:	ab e5       	ldi	r26, 0x5B	; 91
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	eb e5       	ldi	r30, 0x5B	; 91
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 62       	ori	r24, 0x20	; 32
    1fc8:	8c 93       	st	X, r24
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <EXTINT2_voidDisable>:

void EXTINT2_voidDisable(void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    1fd8:	ab e5       	ldi	r26, 0x5B	; 91
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	eb e5       	ldi	r30, 0x5B	; 91
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8f 7d       	andi	r24, 0xDF	; 223
    1fe4:	8c 93       	st	X, r24
}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <EXTINT2_voidSetCallBack>:

void EXTINT2_voidSetCallBack(pf pfCallbackCpy)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <EXTINT2_voidSetCallBack+0x6>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	EXTINT2_pfCallback = pfCallbackCpy ;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	90 93 27 02 	sts	0x0227, r25
    2002:	80 93 26 02 	sts	0x0226, r24
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	EXTINT2_pfCallback();
    203a:	e0 91 26 02 	lds	r30, 0x0226
    203e:	f0 91 27 02 	lds	r31, 0x0227
    2042:	09 95       	icall
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	ff 91       	pop	r31
    204a:	ef 91       	pop	r30
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	9f 91       	pop	r25
    2052:	8f 91       	pop	r24
    2054:	7f 91       	pop	r23
    2056:	6f 91       	pop	r22
    2058:	5f 91       	pop	r21
    205a:	4f 91       	pop	r20
    205c:	3f 91       	pop	r19
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <EXTINT1_voidInit>:


pf EXTINT1_pfCallback ;

void EXTINT1_voidInit(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62

#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 2) ;
    2072:	a5 e5       	ldi	r26, 0x55	; 85
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e5 e5       	ldi	r30, 0x55	; 85
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8b 7f       	andi	r24, 0xFB	; 251
    207e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 3) ;
    2080:	a5 e5       	ldi	r26, 0x55	; 85
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e5       	ldi	r30, 0x55	; 85
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	87 7f       	andi	r24, 0xF7	; 247
    208c:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 2) ;
	SET_BIT(MCUCR , 3) ;
#endif

	CLR_BIT(GICR,7); // Disable External interrupt 0
    208e:	ab e5       	ldi	r26, 0x5B	; 91
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	eb e5       	ldi	r30, 0x5B	; 91
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 77       	andi	r24, 0x7F	; 127
    209a:	8c 93       	st	X, r24
	SET_BIT(GIFR,7); //Clear External interrupt 0 Flag
    209c:	aa e5       	ldi	r26, 0x5A	; 90
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ea e5       	ldi	r30, 0x5A	; 90
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24

}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <EXTINT1_voidEnable>:

void EXTINT1_voidEnable(void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);
    20b8:	ab e5       	ldi	r26, 0x5B	; 91
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e5       	ldi	r30, 0x5B	; 91
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 68       	ori	r24, 0x80	; 128
    20c4:	8c 93       	st	X, r24
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <EXTINT1_voidDisable>:

void EXTINT1_voidDisable(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    20d4:	ab e5       	ldi	r26, 0x5B	; 91
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	eb e5       	ldi	r30, 0x5B	; 91
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8f 77       	andi	r24, 0x7F	; 127
    20e0:	8c 93       	st	X, r24
}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <EXTINT1_voidSetCallBack>:

void EXTINT1_voidSetCallBack(pf pfCallbackCpy)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <EXTINT1_voidSetCallBack+0x6>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01
	EXTINT1_pfCallback = pfCallbackCpy ;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	90 93 29 02 	sts	0x0229, r25
    20fe:	80 93 28 02 	sts	0x0228, r24
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <EXTINT1_voidSetSenseValue>:

void EXTINT1_voidSetSenseValue(uint8 u8SenseValueCpy)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <EXTINT1_voidSetSenseValue+0x6>
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseValueCpy)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3b 83       	std	Y+3, r19	; 0x03
    2122:	2a 83       	std	Y+2, r18	; 0x02
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	8a 30       	cpi	r24, 0x0A	; 10
    212a:	91 05       	cpc	r25, r1
    212c:	31 f0       	breq	.+12     	; 0x213a <EXTINT1_voidSetSenseValue+0x2e>
    212e:	2a 81       	ldd	r18, Y+2	; 0x02
    2130:	3b 81       	ldd	r19, Y+3	; 0x03
    2132:	2f 30       	cpi	r18, 0x0F	; 15
    2134:	31 05       	cpc	r19, r1
    2136:	81 f0       	breq	.+32     	; 0x2158 <EXTINT1_voidSetSenseValue+0x4c>
    2138:	1d c0       	rjmp	.+58     	; 0x2174 <EXTINT1_voidSetSenseValue+0x68>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,2) ;
    213a:	a5 e5       	ldi	r26, 0x55	; 85
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e5 e5       	ldi	r30, 0x55	; 85
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8b 7f       	andi	r24, 0xFB	; 251
    2146:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3) ;
    2148:	a5 e5       	ldi	r26, 0x55	; 85
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e5       	ldi	r30, 0x55	; 85
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 60       	ori	r24, 0x08	; 8
    2154:	8c 93       	st	X, r24
    2156:	0e c0       	rjmp	.+28     	; 0x2174 <EXTINT1_voidSetSenseValue+0x68>
		break;
		case RISING_EDGE:
			SET_BIT(MCUCR,2) ;
    2158:	a5 e5       	ldi	r26, 0x55	; 85
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e5       	ldi	r30, 0x55	; 85
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	84 60       	ori	r24, 0x04	; 4
    2164:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3) ;
    2166:	a5 e5       	ldi	r26, 0x55	; 85
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e5       	ldi	r30, 0x55	; 85
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 60       	ori	r24, 0x08	; 8
    2172:	8c 93       	st	X, r24
		break;

	}
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	EXTINT1_pfCallback();
    21aa:	e0 91 28 02 	lds	r30, 0x0228
    21ae:	f0 91 29 02 	lds	r31, 0x0229
    21b2:	09 95       	icall
}
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	0f 90       	pop	r0
    21d6:	1f 90       	pop	r1
    21d8:	18 95       	reti

000021da <EXTINT0_voidInit>:


pf EXTINT0_pfCallback ;

void EXTINT0_voidInit(void)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62

#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 0) ;
    21e2:	a5 e5       	ldi	r26, 0x55	; 85
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e5       	ldi	r30, 0x55	; 85
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8e 7f       	andi	r24, 0xFE	; 254
    21ee:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 1) ;
    21f0:	a5 e5       	ldi	r26, 0x55	; 85
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e5       	ldi	r30, 0x55	; 85
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8d 7f       	andi	r24, 0xFD	; 253
    21fc:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 0) ;
	SET_BIT(MCUCR , 1) ;
#endif 

	CLR_BIT(GICR,6); // Disable External interrupt 0
    21fe:	ab e5       	ldi	r26, 0x5B	; 91
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	eb e5       	ldi	r30, 0x5B	; 91
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8f 7b       	andi	r24, 0xBF	; 191
    220a:	8c 93       	st	X, r24
	SET_BIT(GIFR,6); //Clear External interrupt 0 Flag 
    220c:	aa e5       	ldi	r26, 0x5A	; 90
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ea e5       	ldi	r30, 0x5A	; 90
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	8c 93       	st	X, r24

}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <EXTINT0_voidEnable>:

void EXTINT0_voidEnable(void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    2228:	ab e5       	ldi	r26, 0x5B	; 91
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	eb e5       	ldi	r30, 0x5B	; 91
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 64       	ori	r24, 0x40	; 64
    2234:	8c 93       	st	X, r24
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <EXTINT0_voidDisable>:

void EXTINT0_voidDisable(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    2244:	ab e5       	ldi	r26, 0x5B	; 91
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	eb e5       	ldi	r30, 0x5B	; 91
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 7b       	andi	r24, 0xBF	; 191
    2250:	8c 93       	st	X, r24
}
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallbackCpy)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <EXTINT0_voidSetCallBack+0x6>
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCallback = pfCallbackCpy ;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	90 93 2b 02 	sts	0x022B, r25
    226e:	80 93 2a 02 	sts	0x022A, r24
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <EXTINT0_voidSetSenseValue>:

void EXTINT0_voidSetSenseValue(uint8 u8SenseValueCpy)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <EXTINT0_voidSetSenseValue+0x6>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseValueCpy)
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	3b 83       	std	Y+3, r19	; 0x03
    2292:	2a 83       	std	Y+2, r18	; 0x02
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	8a 30       	cpi	r24, 0x0A	; 10
    229a:	91 05       	cpc	r25, r1
    229c:	31 f0       	breq	.+12     	; 0x22aa <EXTINT0_voidSetSenseValue+0x2e>
    229e:	2a 81       	ldd	r18, Y+2	; 0x02
    22a0:	3b 81       	ldd	r19, Y+3	; 0x03
    22a2:	2f 30       	cpi	r18, 0x0F	; 15
    22a4:	31 05       	cpc	r19, r1
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <EXTINT0_voidSetSenseValue+0x4c>
    22a8:	1d c0       	rjmp	.+58     	; 0x22e4 <EXTINT0_voidSetSenseValue+0x68>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,0) ;
    22aa:	a5 e5       	ldi	r26, 0x55	; 85
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e5 e5       	ldi	r30, 0x55	; 85
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	8e 7f       	andi	r24, 0xFE	; 254
    22b6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1) ;
    22b8:	a5 e5       	ldi	r26, 0x55	; 85
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e5       	ldi	r30, 0x55	; 85
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	82 60       	ori	r24, 0x02	; 2
    22c4:	8c 93       	st	X, r24
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <EXTINT0_voidSetSenseValue+0x68>
		break;
		case RISING_EDGE:
			SET_BIT(MCUCR,0) ;
    22c8:	a5 e5       	ldi	r26, 0x55	; 85
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e5 e5       	ldi	r30, 0x55	; 85
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	81 60       	ori	r24, 0x01	; 1
    22d4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1) ;
    22d6:	a5 e5       	ldi	r26, 0x55	; 85
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e5       	ldi	r30, 0x55	; 85
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	82 60       	ori	r24, 0x02	; 2
    22e2:	8c 93       	st	X, r24
		break;

	}
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCallback();
    231a:	e0 91 2a 02 	lds	r30, 0x022A
    231e:	f0 91 2b 02 	lds	r31, 0x022B
    2322:	09 95       	icall
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	ff 91       	pop	r31
    232a:	ef 91       	pop	r30
    232c:	bf 91       	pop	r27
    232e:	af 91       	pop	r26
    2330:	9f 91       	pop	r25
    2332:	8f 91       	pop	r24
    2334:	7f 91       	pop	r23
    2336:	6f 91       	pop	r22
    2338:	5f 91       	pop	r21
    233a:	4f 91       	pop	r20
    233c:	3f 91       	pop	r19
    233e:	2f 91       	pop	r18
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <DIO_voidInit>:
#include  "DIO_priv.h"



void DIO_voidInit(void)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
    2352:	ea e3       	ldi	r30, 0x3A	; 58
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	8e ef       	ldi	r24, 0xFE	; 254
    2358:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
    235a:	e7 e3       	ldi	r30, 0x37	; 55
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	87 eb       	ldi	r24, 0xB7	; 183
    2360:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
    2362:	e4 e3       	ldi	r30, 0x34	; 52
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	8f eb       	ldi	r24, 0xBF	; 191
    2368:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
    236a:	e1 e3       	ldi	r30, 0x31	; 49
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	81 ef       	ldi	r24, 0xF1	; 241
    2370:	80 83       	st	Z, r24


}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31 */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <DIO_enuWritePin+0x6>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <DIO_enuWritePin+0x8>
    2380:	0f 92       	push	r0
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    238a:	19 82       	std	Y+1, r1	; 0x01

	switch (u8PinValueCpy)
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	3d 83       	std	Y+5, r19	; 0x05
    2394:	2c 83       	std	Y+4, r18	; 0x04
    2396:	8c 81       	ldd	r24, Y+4	; 0x04
    2398:	9d 81       	ldd	r25, Y+5	; 0x05
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	09 f4       	brne	.+2      	; 0x23a0 <DIO_enuWritePin+0x28>
    239e:	77 c0       	rjmp	.+238    	; 0x248e <DIO_enuWritePin+0x116>
    23a0:	2c 81       	ldd	r18, Y+4	; 0x04
    23a2:	3d 81       	ldd	r19, Y+5	; 0x05
    23a4:	21 30       	cpi	r18, 0x01	; 1
    23a6:	31 05       	cpc	r19, r1
    23a8:	09 f0       	breq	.+2      	; 0x23ac <DIO_enuWritePin+0x34>
    23aa:	e6 c0       	rjmp	.+460    	; 0x2578 <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	88 30       	cpi	r24, 0x08	; 8
    23b0:	a0 f4       	brcc	.+40     	; 0x23da <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;
    23b2:	ab e3       	ldi	r26, 0x3B	; 59
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e3       	ldi	r30, 0x3B	; 59
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <DIO_enuWritePin+0x58>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <DIO_enuWritePin+0x54>
    23d4:	84 2b       	or	r24, r20
    23d6:	8c 93       	st	X, r24
    23d8:	d1 c0       	rjmp	.+418    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	88 30       	cpi	r24, 0x08	; 8
    23de:	d0 f0       	brcs	.+52     	; 0x2414 <DIO_enuWritePin+0x9c>
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	80 31       	cpi	r24, 0x10	; 16
    23e4:	b8 f4       	brcc	.+46     	; 0x2414 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    23e6:	a8 e3       	ldi	r26, 0x38	; 56
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e8 e3       	ldi	r30, 0x38	; 56
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	48 2f       	mov	r20, r24
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 01       	movw	r18, r24
    23fa:	27 70       	andi	r18, 0x07	; 7
    23fc:	30 70       	andi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 2e       	mov	r0, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <DIO_enuWritePin+0x92>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <DIO_enuWritePin+0x8e>
    240e:	84 2b       	or	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	b4 c0       	rjmp	.+360    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	80 31       	cpi	r24, 0x10	; 16
    2418:	d0 f0       	brcs	.+52     	; 0x244e <DIO_enuWritePin+0xd6>
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	88 31       	cpi	r24, 0x18	; 24
    241e:	b8 f4       	brcc	.+46     	; 0x244e <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2420:	a5 e3       	ldi	r26, 0x35	; 53
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e5 e3       	ldi	r30, 0x35	; 53
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	48 2f       	mov	r20, r24
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 01       	movw	r18, r24
    2434:	27 70       	andi	r18, 0x07	; 7
    2436:	30 70       	andi	r19, 0x00	; 0
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_enuWritePin+0xcc>
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <DIO_enuWritePin+0xc8>
    2448:	84 2b       	or	r24, r20
    244a:	8c 93       	st	X, r24
    244c:	97 c0       	rjmp	.+302    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 31       	cpi	r24, 0x18	; 24
    2452:	d0 f0       	brcs	.+52     	; 0x2488 <DIO_enuWritePin+0x110>
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	80 32       	cpi	r24, 0x20	; 32
    2458:	b8 f4       	brcc	.+46     	; 0x2488 <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    245a:	a2 e3       	ldi	r26, 0x32	; 50
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e2 e3       	ldi	r30, 0x32	; 50
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 01       	movw	r18, r24
    246e:	27 70       	andi	r18, 0x07	; 7
    2470:	30 70       	andi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_enuWritePin+0x106>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_enuWritePin+0x102>
    2482:	84 2b       	or	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	7a c0       	rjmp	.+244    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	77 c0       	rjmp	.+238    	; 0x257c <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	88 30       	cpi	r24, 0x08	; 8
    2492:	a8 f4       	brcc	.+42     	; 0x24be <DIO_enuWritePin+0x146>
				{
					CLR_BIT(ODRA , u8PinNumCpy ) ;
    2494:	ab e3       	ldi	r26, 0x3B	; 59
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	eb e3       	ldi	r30, 0x3B	; 59
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 2e       	mov	r0, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_enuWritePin+0x13a>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	0a 94       	dec	r0
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_enuWritePin+0x136>
    24b6:	80 95       	com	r24
    24b8:	84 23       	and	r24, r20
    24ba:	8c 93       	st	X, r24
    24bc:	5f c0       	rjmp	.+190    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	88 30       	cpi	r24, 0x08	; 8
    24c2:	d8 f0       	brcs	.+54     	; 0x24fa <DIO_enuWritePin+0x182>
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	80 31       	cpi	r24, 0x10	; 16
    24c8:	c0 f4       	brcc	.+48     	; 0x24fa <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    24ca:	a8 e3       	ldi	r26, 0x38	; 56
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e8 e3       	ldi	r30, 0x38	; 56
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	48 2f       	mov	r20, r24
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 01       	movw	r18, r24
    24de:	27 70       	andi	r18, 0x07	; 7
    24e0:	30 70       	andi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 2e       	mov	r0, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <DIO_enuWritePin+0x176>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <DIO_enuWritePin+0x172>
    24f2:	80 95       	com	r24
    24f4:	84 23       	and	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	41 c0       	rjmp	.+130    	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	80 31       	cpi	r24, 0x10	; 16
    24fe:	d8 f0       	brcs	.+54     	; 0x2536 <DIO_enuWritePin+0x1be>
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	88 31       	cpi	r24, 0x18	; 24
    2504:	c0 f4       	brcc	.+48     	; 0x2536 <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2506:	a5 e3       	ldi	r26, 0x35	; 53
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e5 e3       	ldi	r30, 0x35	; 53
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	48 2f       	mov	r20, r24
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 01       	movw	r18, r24
    251a:	27 70       	andi	r18, 0x07	; 7
    251c:	30 70       	andi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_enuWritePin+0x1b2>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_enuWritePin+0x1ae>
    252e:	80 95       	com	r24
    2530:	84 23       	and	r24, r20
    2532:	8c 93       	st	X, r24
    2534:	23 c0       	rjmp	.+70     	; 0x257c <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	88 31       	cpi	r24, 0x18	; 24
    253a:	d8 f0       	brcs	.+54     	; 0x2572 <DIO_enuWritePin+0x1fa>
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	80 32       	cpi	r24, 0x20	; 32
    2540:	c0 f4       	brcc	.+48     	; 0x2572 <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2542:	a2 e3       	ldi	r26, 0x32	; 50
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e2 e3       	ldi	r30, 0x32	; 50
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	48 2f       	mov	r20, r24
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9c 01       	movw	r18, r24
    2556:	27 70       	andi	r18, 0x07	; 7
    2558:	30 70       	andi	r19, 0x00	; 0
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	02 2e       	mov	r0, r18
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_enuWritePin+0x1ee>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_enuWritePin+0x1ea>
    256a:	80 95       	com	r24
    256c:	84 23       	and	r24, r20
    256e:	8c 93       	st	X, r24
    2570:	05 c0       	rjmp	.+10     	; 0x257c <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_enuWritePin+0x204>
				}

			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	89 83       	std	Y+1, r24	; 0x01
			break ;

		}

	return enuReturnStatusLoc ;
    257c:	89 81       	ldd	r24, Y+1	; 0x01

}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <DIO_enuReadPin+0x6>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <DIO_enuReadPin+0x8>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	7c 83       	std	Y+4, r23	; 0x04
    259e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    25a0:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL_PTR)
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	09 f4       	brne	.+2      	; 0x25ac <DIO_enuReadPin+0x1e>
    25aa:	6e c0       	rjmp	.+220    	; 0x2688 <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	88 30       	cpi	r24, 0x08	; 8
    25b0:	a0 f4       	brcc	.+40     	; 0x25da <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;
    25b2:	e9 e3       	ldi	r30, 0x39	; 57
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a9 01       	movw	r20, r18
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <DIO_enuReadPin+0x3c>
    25c6:	55 95       	asr	r21
    25c8:	47 95       	ror	r20
    25ca:	8a 95       	dec	r24
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <DIO_enuReadPin+0x38>
    25ce:	ca 01       	movw	r24, r20
    25d0:	81 70       	andi	r24, 0x01	; 1
    25d2:	eb 81       	ldd	r30, Y+3	; 0x03
    25d4:	fc 81       	ldd	r31, Y+4	; 0x04
    25d6:	80 83       	st	Z, r24
    25d8:	59 c0       	rjmp	.+178    	; 0x268c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	88 30       	cpi	r24, 0x08	; 8
    25de:	c8 f0       	brcs	.+50     	; 0x2612 <DIO_enuReadPin+0x84>
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	80 31       	cpi	r24, 0x10	; 16
    25e4:	b0 f4       	brcc	.+44     	; 0x2612 <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    25e6:	e6 e3       	ldi	r30, 0x36	; 54
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	87 70       	andi	r24, 0x07	; 7
    25f8:	90 70       	andi	r25, 0x00	; 0
    25fa:	a9 01       	movw	r20, r18
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <DIO_enuReadPin+0x74>
    25fe:	55 95       	asr	r21
    2600:	47 95       	ror	r20
    2602:	8a 95       	dec	r24
    2604:	e2 f7       	brpl	.-8      	; 0x25fe <DIO_enuReadPin+0x70>
    2606:	ca 01       	movw	r24, r20
    2608:	81 70       	andi	r24, 0x01	; 1
    260a:	eb 81       	ldd	r30, Y+3	; 0x03
    260c:	fc 81       	ldd	r31, Y+4	; 0x04
    260e:	80 83       	st	Z, r24
    2610:	3d c0       	rjmp	.+122    	; 0x268c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	80 31       	cpi	r24, 0x10	; 16
    2616:	c8 f0       	brcs	.+50     	; 0x264a <DIO_enuReadPin+0xbc>
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	88 31       	cpi	r24, 0x18	; 24
    261c:	b0 f4       	brcc	.+44     	; 0x264a <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    261e:	e3 e3       	ldi	r30, 0x33	; 51
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	87 70       	andi	r24, 0x07	; 7
    2630:	90 70       	andi	r25, 0x00	; 0
    2632:	a9 01       	movw	r20, r18
    2634:	02 c0       	rjmp	.+4      	; 0x263a <DIO_enuReadPin+0xac>
    2636:	55 95       	asr	r21
    2638:	47 95       	ror	r20
    263a:	8a 95       	dec	r24
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <DIO_enuReadPin+0xa8>
    263e:	ca 01       	movw	r24, r20
    2640:	81 70       	andi	r24, 0x01	; 1
    2642:	eb 81       	ldd	r30, Y+3	; 0x03
    2644:	fc 81       	ldd	r31, Y+4	; 0x04
    2646:	80 83       	st	Z, r24
    2648:	21 c0       	rjmp	.+66     	; 0x268c <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	88 31       	cpi	r24, 0x18	; 24
    264e:	c8 f0       	brcs	.+50     	; 0x2682 <DIO_enuReadPin+0xf4>
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	80 32       	cpi	r24, 0x20	; 32
    2654:	b0 f4       	brcc	.+44     	; 0x2682 <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2656:	e0 e3       	ldi	r30, 0x30	; 48
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	87 70       	andi	r24, 0x07	; 7
    2668:	90 70       	andi	r25, 0x00	; 0
    266a:	a9 01       	movw	r20, r18
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <DIO_enuReadPin+0xe4>
    266e:	55 95       	asr	r21
    2670:	47 95       	ror	r20
    2672:	8a 95       	dec	r24
    2674:	e2 f7       	brpl	.-8      	; 0x266e <DIO_enuReadPin+0xe0>
    2676:	ca 01       	movw	r24, r20
    2678:	81 70       	andi	r24, 0x01	; 1
    267a:	eb 81       	ldd	r30, Y+3	; 0x03
    267c:	fc 81       	ldd	r31, Y+4	; 0x04
    267e:	80 83       	st	Z, r24
    2680:	05 c0       	rjmp	.+10     	; 0x268c <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	02 c0       	rjmp	.+4      	; 0x268c <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStatusLoc ;
    268c:	89 81       	ldd	r24, Y+1	; 0x01

}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <DIO_enuPullWrite>:

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <DIO_enuPullWrite+0x6>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	6a 81       	ldd	r22, Y+2	; 0x02
    26ae:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <DIO_enuWriteBus>:

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <DIO_enuWriteBus+0xa>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <DIO_enuWriteBus+0xc>
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9c 83       	std	Y+4, r25	; 0x04
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    26d2:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    26d4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <DIO_enuWriteBus+0x24>
    26de:	3f c0       	rjmp	.+126    	; 0x275e <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	81 32       	cpi	r24, 0x21	; 33
    26e4:	c8 f5       	brcc	.+114    	; 0x2758 <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    26e6:	19 82       	std	Y+1, r1	; 0x01
    26e8:	32 c0       	rjmp	.+100    	; 0x274e <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	c9 01       	movw	r24, r18
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	28 0f       	add	r18, r24
    26f8:	39 1f       	adc	r19, r25
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	8c 01       	movw	r16, r24
    2700:	02 0f       	add	r16, r18
    2702:	13 1f       	adc	r17, r19
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	c9 01       	movw	r24, r18
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	28 0f       	add	r18, r24
    2712:	39 1f       	adc	r19, r25
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	fc 01       	movw	r30, r24
    271a:	e2 0f       	add	r30, r18
    271c:	f3 1f       	adc	r31, r19
    271e:	40 81       	ld	r20, Z
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	c9 01       	movw	r24, r18
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	28 0f       	add	r18, r24
    272e:	39 1f       	adc	r19, r25
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	fc 01       	movw	r30, r24
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	84 2f       	mov	r24, r20
    273e:	69 2f       	mov	r22, r25
    2740:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2744:	f8 01       	movw	r30, r16
    2746:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	99 81       	ldd	r25, Y+1	; 0x01
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	98 17       	cp	r25, r24
    2754:	50 f2       	brcs	.-108    	; 0x26ea <DIO_enuWriteBus+0x2e>
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <DIO_enuWriteBus+0xa6>
		}

	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret

00002778 <DIO_enuReadBus>:

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <DIO_enuReadBus+0xa>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <DIO_enuReadBus+0xc>
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	8b 83       	std	Y+3, r24	; 0x03
    278e:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2790:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;

	if(pastrPinMappingCpy != NULL_PTR )
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	09 f4       	brne	.+2      	; 0x279c <DIO_enuReadBus+0x24>
    279a:	40 c0       	rjmp	.+128    	; 0x281c <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	81 32       	cpi	r24, 0x21	; 33
    27a0:	d0 f5       	brcc	.+116    	; 0x2816 <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	33 c0       	rjmp	.+102    	; 0x280c <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	c9 01       	movw	r24, r18
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	28 0f       	add	r18, r24
    27b4:	39 1f       	adc	r19, r25
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	8c 01       	movw	r16, r24
    27bc:	02 0f       	add	r16, r18
    27be:	13 1f       	adc	r17, r19
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	c9 01       	movw	r24, r18
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	28 0f       	add	r18, r24
    27ce:	39 1f       	adc	r19, r25
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	40 81       	ld	r20, Z
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	c9 01       	movw	r24, r18
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	28 0f       	add	r18, r24
    27ea:	39 1f       	adc	r19, r25
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	82 0f       	add	r24, r18
    27f2:	93 1f       	adc	r25, r19
    27f4:	9c 01       	movw	r18, r24
    27f6:	2f 5f       	subi	r18, 0xFF	; 255
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	84 2f       	mov	r24, r20
    27fc:	b9 01       	movw	r22, r18
    27fe:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
    2802:	f8 01       	movw	r30, r16
    2804:	82 83       	std	Z+2, r24	; 0x02

	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	99 81       	ldd	r25, Y+1	; 0x01
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	98 17       	cp	r25, r24
    2812:	48 f2       	brcs	.-110    	; 0x27a6 <DIO_enuReadBus+0x2e>
    2814:	05 c0       	rjmp	.+10     	; 0x2820 <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <DIO_enuReadBus+0xa8>
		}

	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	08 95       	ret

00002836 <DIO_enuWritePinDir>:

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <DIO_enuWritePinDir+0x6>
    283c:	00 d0       	rcall	.+0      	; 0x283e <DIO_enuWritePinDir+0x8>
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    2848:	19 82       	std	Y+1, r1	; 0x01

	switch (u8PinDirCpy)
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	3d 83       	std	Y+5, r19	; 0x05
    2852:	2c 83       	std	Y+4, r18	; 0x04
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	09 f4       	brne	.+2      	; 0x285e <DIO_enuWritePinDir+0x28>
    285c:	77 c0       	rjmp	.+238    	; 0x294c <DIO_enuWritePinDir+0x116>
    285e:	2c 81       	ldd	r18, Y+4	; 0x04
    2860:	3d 81       	ldd	r19, Y+5	; 0x05
    2862:	21 30       	cpi	r18, 0x01	; 1
    2864:	31 05       	cpc	r19, r1
    2866:	09 f0       	breq	.+2      	; 0x286a <DIO_enuWritePinDir+0x34>
    2868:	e6 c0       	rjmp	.+460    	; 0x2a36 <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	88 30       	cpi	r24, 0x08	; 8
    286e:	a0 f4       	brcc	.+40     	; 0x2898 <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;
    2870:	aa e3       	ldi	r26, 0x3A	; 58
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ea e3       	ldi	r30, 0x3A	; 58
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_enuWritePinDir+0x58>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_enuWritePinDir+0x54>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
    2896:	d1 c0       	rjmp	.+418    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	88 30       	cpi	r24, 0x08	; 8
    289c:	d0 f0       	brcs	.+52     	; 0x28d2 <DIO_enuWritePinDir+0x9c>
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	80 31       	cpi	r24, 0x10	; 16
    28a2:	b8 f4       	brcc	.+46     	; 0x28d2 <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    28a4:	a7 e3       	ldi	r26, 0x37	; 55
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e7 e3       	ldi	r30, 0x37	; 55
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	48 2f       	mov	r20, r24
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 01       	movw	r18, r24
    28b8:	27 70       	andi	r18, 0x07	; 7
    28ba:	30 70       	andi	r19, 0x00	; 0
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	02 2e       	mov	r0, r18
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <DIO_enuWritePinDir+0x92>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	0a 94       	dec	r0
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <DIO_enuWritePinDir+0x8e>
    28cc:	84 2b       	or	r24, r20
    28ce:	8c 93       	st	X, r24
    28d0:	b4 c0       	rjmp	.+360    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	80 31       	cpi	r24, 0x10	; 16
    28d6:	d0 f0       	brcs	.+52     	; 0x290c <DIO_enuWritePinDir+0xd6>
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	88 31       	cpi	r24, 0x18	; 24
    28dc:	b8 f4       	brcc	.+46     	; 0x290c <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    28de:	a4 e3       	ldi	r26, 0x34	; 52
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e4 e3       	ldi	r30, 0x34	; 52
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	48 2f       	mov	r20, r24
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 01       	movw	r18, r24
    28f2:	27 70       	andi	r18, 0x07	; 7
    28f4:	30 70       	andi	r19, 0x00	; 0
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	02 2e       	mov	r0, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <DIO_enuWritePinDir+0xcc>
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	0a 94       	dec	r0
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <DIO_enuWritePinDir+0xc8>
    2906:	84 2b       	or	r24, r20
    2908:	8c 93       	st	X, r24
    290a:	97 c0       	rjmp	.+302    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	88 31       	cpi	r24, 0x18	; 24
    2910:	d0 f0       	brcs	.+52     	; 0x2946 <DIO_enuWritePinDir+0x110>
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	80 32       	cpi	r24, 0x20	; 32
    2916:	b8 f4       	brcc	.+46     	; 0x2946 <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2918:	a1 e3       	ldi	r26, 0x31	; 49
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e1 e3       	ldi	r30, 0x31	; 49
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9c 01       	movw	r18, r24
    292c:	27 70       	andi	r18, 0x07	; 7
    292e:	30 70       	andi	r19, 0x00	; 0
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	02 2e       	mov	r0, r18
    2936:	02 c0       	rjmp	.+4      	; 0x293c <DIO_enuWritePinDir+0x106>
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	0a 94       	dec	r0
    293e:	e2 f7       	brpl	.-8      	; 0x2938 <DIO_enuWritePinDir+0x102>
    2940:	84 2b       	or	r24, r20
    2942:	8c 93       	st	X, r24
    2944:	7a c0       	rjmp	.+244    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	77 c0       	rjmp	.+238    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}

			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	88 30       	cpi	r24, 0x08	; 8
    2950:	a8 f4       	brcc	.+42     	; 0x297c <DIO_enuWritePinDir+0x146>
				{
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    2952:	aa e3       	ldi	r26, 0x3A	; 58
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ea e3       	ldi	r30, 0x3A	; 58
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	48 2f       	mov	r20, r24
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	02 2e       	mov	r0, r18
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <DIO_enuWritePinDir+0x13a>
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	0a 94       	dec	r0
    2972:	e2 f7       	brpl	.-8      	; 0x296c <DIO_enuWritePinDir+0x136>
    2974:	80 95       	com	r24
    2976:	84 23       	and	r24, r20
    2978:	8c 93       	st	X, r24
    297a:	5f c0       	rjmp	.+190    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	88 30       	cpi	r24, 0x08	; 8
    2980:	d8 f0       	brcs	.+54     	; 0x29b8 <DIO_enuWritePinDir+0x182>
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	80 31       	cpi	r24, 0x10	; 16
    2986:	c0 f4       	brcc	.+48     	; 0x29b8 <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2988:	a7 e3       	ldi	r26, 0x37	; 55
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e7 e3       	ldi	r30, 0x37	; 55
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	48 2f       	mov	r20, r24
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 01       	movw	r18, r24
    299c:	27 70       	andi	r18, 0x07	; 7
    299e:	30 70       	andi	r19, 0x00	; 0
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	02 2e       	mov	r0, r18
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <DIO_enuWritePinDir+0x176>
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	0a 94       	dec	r0
    29ae:	e2 f7       	brpl	.-8      	; 0x29a8 <DIO_enuWritePinDir+0x172>
    29b0:	80 95       	com	r24
    29b2:	84 23       	and	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	41 c0       	rjmp	.+130    	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	80 31       	cpi	r24, 0x10	; 16
    29bc:	d8 f0       	brcs	.+54     	; 0x29f4 <DIO_enuWritePinDir+0x1be>
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	88 31       	cpi	r24, 0x18	; 24
    29c2:	c0 f4       	brcc	.+48     	; 0x29f4 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    29c4:	a4 e3       	ldi	r26, 0x34	; 52
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e4 e3       	ldi	r30, 0x34	; 52
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	48 2f       	mov	r20, r24
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 01       	movw	r18, r24
    29d8:	27 70       	andi	r18, 0x07	; 7
    29da:	30 70       	andi	r19, 0x00	; 0
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	02 2e       	mov	r0, r18
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <DIO_enuWritePinDir+0x1b2>
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	0a 94       	dec	r0
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <DIO_enuWritePinDir+0x1ae>
    29ec:	80 95       	com	r24
    29ee:	84 23       	and	r24, r20
    29f0:	8c 93       	st	X, r24
    29f2:	23 c0       	rjmp	.+70     	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	88 31       	cpi	r24, 0x18	; 24
    29f8:	d8 f0       	brcs	.+54     	; 0x2a30 <DIO_enuWritePinDir+0x1fa>
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	80 32       	cpi	r24, 0x20	; 32
    29fe:	c0 f4       	brcc	.+48     	; 0x2a30 <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2a00:	a1 e3       	ldi	r26, 0x31	; 49
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e1 e3       	ldi	r30, 0x31	; 49
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9c 01       	movw	r18, r24
    2a14:	27 70       	andi	r18, 0x07	; 7
    2a16:	30 70       	andi	r19, 0x00	; 0
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	02 2e       	mov	r0, r18
    2a1e:	02 c0       	rjmp	.+4      	; 0x2a24 <DIO_enuWritePinDir+0x1ee>
    2a20:	88 0f       	add	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	0a 94       	dec	r0
    2a26:	e2 f7       	brpl	.-8      	; 0x2a20 <DIO_enuWritePinDir+0x1ea>
    2a28:	80 95       	com	r24
    2a2a:	84 23       	and	r24, r20
    2a2c:	8c 93       	st	X, r24
    2a2e:	05 c0       	rjmp	.+10     	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	89 83       	std	Y+1, r24	; 0x01
			break ;

		}

	return enuReturnStatusLoc ;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01


}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <DIO_enuTogglePin>:

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <DIO_enuTogglePin+0x6>
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <DIO_enuTogglePin+0x8>
    2a54:	0f 92       	push	r0
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2a5c:	19 82       	std	Y+1, r1	; 0x01

	 uint8 u8PinValueCpy;

	 enuReturnStatusLoc = DIO_enuReadPin(u8PinNumCpy , &u8PinValueCpy );
    2a5e:	9e 01       	movw	r18, r28
    2a60:	2e 5f       	subi	r18, 0xFE	; 254
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	b9 01       	movw	r22, r18
    2a68:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
    2a6c:	89 83       	std	Y+1, r24	; 0x01

	 if(enuReturnStatusLoc == E_OK){
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	88 23       	and	r24, r24
    2a72:	e1 f4       	brne	.+56     	; 0x2aac <DIO_enuTogglePin+0x60>

	 	switch(u8PinValueCpy){
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	3d 83       	std	Y+5, r19	; 0x05
    2a7c:	2c 83       	std	Y+4, r18	; 0x04
    2a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a80:	9d 81       	ldd	r25, Y+5	; 0x05
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	59 f0       	breq	.+22     	; 0x2a9c <DIO_enuTogglePin+0x50>
    2a86:	2c 81       	ldd	r18, Y+4	; 0x04
    2a88:	3d 81       	ldd	r19, Y+5	; 0x05
    2a8a:	21 30       	cpi	r18, 0x01	; 1
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	61 f4       	brne	.+24     	; 0x2aa8 <DIO_enuTogglePin+0x5c>

	 	case DIO_u8HIGH:
	 		enuReturnStatusLoc = DIO_enuWritePin( u8PinNumCpy ,  DIO_u8LOW);
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	08 c0       	rjmp	.+16     	; 0x2aac <DIO_enuTogglePin+0x60>
	 	break ;

	 	case DIO_u8LOW:
	 		enuReturnStatusLoc = DIO_enuWritePin( u8PinNumCpy ,  DIO_u8HIGH);
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <DIO_enuTogglePin+0x60>
	 	break ;

	 	default: enuReturnStatusLoc = E_NOK_CONFIG_PARM_ERROR ;
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	89 83       	std	Y+1, r24	; 0x01
	 }
	 else{

	 }

	return enuReturnStatusLoc ;
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <ADC_voidInit>:

void Dummy(void);
pf ADC_pfCallback;
uint16 ADC_ReadValue;
void ADC_voidInit(void)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLTAGE_REFERENCE == AVCC
    CLR_BIT(ADMUX, REFS1);
    2ac6:	a7 e2       	ldi	r26, 0x27	; 39
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e7 e2       	ldi	r30, 0x27	; 39
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	8f 77       	andi	r24, 0x7F	; 127
    2ad2:	8c 93       	st	X, r24
    SET_BIT(ADMUX, REFS0);
    2ad4:	a7 e2       	ldi	r26, 0x27	; 39
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e7 e2       	ldi	r30, 0x27	; 39
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	80 64       	ori	r24, 0x40	; 64
    2ae0:	8c 93       	st	X, r24
#endif

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    SET_BIT(ADMUX, ADLAR);
#else
    CLR_BIT(ADMUX, ADLAR);
    2ae2:	a7 e2       	ldi	r26, 0x27	; 39
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e7 e2       	ldi	r30, 0x27	; 39
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 7d       	andi	r24, 0xDF	; 223
    2aee:	8c 93       	st	X, r24
#endif
    // selecting from ADC0 to ADC 7
    ADMUX |= ADC_CHANNEL_NUM;
    2af0:	a7 e2       	ldi	r26, 0x27	; 39
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e7 e2       	ldi	r30, 0x27	; 39
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8c 93       	st	X, r24
// The ADC will start a conversion on a positive edge of the selected trigger signal
#if ADC_AUTO_TRIGGIR_MODE == AUTO_TRIGGIR_ENABLE
    SET_BIT(ADCSRA, ADATE);
    2afc:	a6 e2       	ldi	r26, 0x26	; 38
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e6 e2       	ldi	r30, 0x26	; 38
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 62       	ori	r24, 0x20	; 32
    2b08:	8c 93       	st	X, r24
    SFIOR |= ADC_AUTO_TRIGGIR_SOURCE;
    2b0a:	a0 e5       	ldi	r26, 0x50	; 80
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e0 e5       	ldi	r30, 0x50	; 80
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	8c 93       	st	X, r24
#else
    CLR_BIT(ADCSRA, ADATE);
#endif
    // setting prescaler value
    ADCSRA |= ADC_PRESCALLER;
    2b16:	a6 e2       	ldi	r26, 0x26	; 38
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e6 e2       	ldi	r30, 0x26	; 38
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	8c 93       	st	X, r24
    // do nothing if the pointer to function was not assigned an address.
    ADC_pfCallback = Dummy;
    2b24:	8b eb       	ldi	r24, 0xBB	; 187
    2b26:	96 e1       	ldi	r25, 0x16	; 22
    2b28:	90 93 2d 02 	sts	0x022D, r25
    2b2c:	80 93 2c 02 	sts	0x022C, r24

    CLR_BIT(ADCSRA, ADIE); /* Disable interrupt  */
    2b30:	a6 e2       	ldi	r26, 0x26	; 38
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e6 e2       	ldi	r30, 0x26	; 38
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	87 7f       	andi	r24, 0xF7	; 247
    2b3c:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADIF); /* Clear interrupt flag */
    2b3e:	a6 e2       	ldi	r26, 0x26	; 38
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e6 e2       	ldi	r30, 0x26	; 38
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	80 61       	ori	r24, 0x10	; 16
    2b4a:	8c 93       	st	X, r24
}
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <ADC_voidEnable>:
void ADC_voidEnable(void)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADEN);
    2b5a:	a6 e2       	ldi	r26, 0x26	; 38
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e6 e2       	ldi	r30, 0x26	; 38
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	80 68       	ori	r24, 0x80	; 128
    2b66:	8c 93       	st	X, r24
}
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <ADC_voidDisable>:
void ADC_voidDisable(void)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADEN);
    2b76:	a6 e2       	ldi	r26, 0x26	; 38
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e6 e2       	ldi	r30, 0x26	; 38
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 77       	andi	r24, 0x7F	; 127
    2b82:	8c 93       	st	X, r24
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <ADC_voidInterruptEnable>:
void ADC_voidInterruptEnable(void)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADIE);
    2b92:	a6 e2       	ldi	r26, 0x26	; 38
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e6 e2       	ldi	r30, 0x26	; 38
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	88 60       	ori	r24, 0x08	; 8
    2b9e:	8c 93       	st	X, r24
}
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <ADC_voidInterruptDisable>:
void ADC_voidInterruptDisable(void)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADIE);
    2bae:	a6 e2       	ldi	r26, 0x26	; 38
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e6 e2       	ldi	r30, 0x26	; 38
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	87 7f       	andi	r24, 0xF7	; 247
    2bba:	8c 93       	st	X, r24
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <ADC_voidSetCallback+0x6>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    ADC_pfCallback = pfCallbackCpy;
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	90 93 2d 02 	sts	0x022D, r25
    2bd8:	80 93 2c 02 	sts	0x022C, r24
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <ADC_u16ReadSync>:
uint16 ADC_u16ReadSync(void)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <ADC_u16ReadSync+0x6>
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    uint16 u16ReadValueLoc;

    SET_BIT(ADCSRA, ADSC); /*Start conversion */
    2bf0:	a6 e2       	ldi	r26, 0x26	; 38
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e6 e2       	ldi	r30, 0x26	; 38
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 64       	ori	r24, 0x40	; 64
    2bfc:	8c 93       	st	X, r24
                           //		flag = 0;

    /*Polling IF */
    // the interrupt flag is set when the conversion ends.

    while (GET_BIT(ADCSRA, ADIF) == 0)
    2bfe:	e6 e2       	ldi	r30, 0x26	; 38
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	82 95       	swap	r24
    2c06:	8f 70       	andi	r24, 0x0F	; 15
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	81 70       	andi	r24, 0x01	; 1
    2c0e:	90 70       	andi	r25, 0x00	; 0
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	a9 f3       	breq	.-22     	; 0x2bfe <ADC_u16ReadSync+0x18>
        //	while(ADCSRA & (1<<ADSC));

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    u16ReadValueLoc = ADCH;
#else
    u16ReadValueLoc = ADCL | ADCH << 8;
    2c14:	e4 e2       	ldi	r30, 0x24	; 36
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	e5 e2       	ldi	r30, 0x25	; 37
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	98 2f       	mov	r25, r24
    2c2a:	88 27       	eor	r24, r24
    2c2c:	82 2b       	or	r24, r18
    2c2e:	93 2b       	or	r25, r19
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
#endif
    SET_BIT(ADCSRA, ADIF); /* Clear event flag */
    2c34:	a6 e2       	ldi	r26, 0x26	; 38
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e6 e2       	ldi	r30, 0x26	; 38
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	8c 93       	st	X, r24
    return u16ReadValueLoc;
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <ADC_voidStartConversion>:
void ADC_voidStartConversion(void)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, 6);
    2c58:	a6 e2       	ldi	r26, 0x26	; 38
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e6 e2       	ldi	r30, 0x26	; 38
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	80 64       	ori	r24, 0x40	; 64
    2c64:	8c 93       	st	X, r24
}
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <ADC_u16ReadASync>:

uint16 ADC_u16ReadASync(void)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    return ADC_ReadValue;
    2c74:	80 91 2e 02 	lds	r24, 0x022E
    2c78:	90 91 2f 02 	lds	r25, 0x022F
}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <ADC_f32NumtoVolt>:
float32 ADC_f32NumtoVolt(uint16 u16ReadCpy)
{
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <ADC_f32NumtoVolt+0x6>
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <ADC_f32NumtoVolt+0x8>
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <ADC_f32NumtoVolt+0xa>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    // assuming AREF = VCC
    float32 volt;

    volt = (float32)u16ReadCpy * 5 / 1023;
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	cc 01       	movw	r24, r24
    2c9a:	a0 e0       	ldi	r26, 0x00	; 0
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 ea       	ldi	r20, 0xA0	; 160
    2cb4:	50 e4       	ldi	r21, 0x40	; 64
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 ec       	ldi	r19, 0xC0	; 192
    2cc6:	4f e7       	ldi	r20, 0x7F	; 127
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	ab 83       	std	Y+3, r26	; 0x03
    2cd8:	bc 83       	std	Y+4, r27	; 0x04
    return volt;
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	26 96       	adiw	r28, 0x06	; 6
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <__vector_16>:
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
    2cf8:	1f 92       	push	r1
    2cfa:	0f 92       	push	r0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	0f 92       	push	r0
    2d00:	11 24       	eor	r1, r1
    2d02:	2f 93       	push	r18
    2d04:	3f 93       	push	r19
    2d06:	4f 93       	push	r20
    2d08:	5f 93       	push	r21
    2d0a:	6f 93       	push	r22
    2d0c:	7f 93       	push	r23
    2d0e:	8f 93       	push	r24
    2d10:	9f 93       	push	r25
    2d12:	af 93       	push	r26
    2d14:	bf 93       	push	r27
    2d16:	ef 93       	push	r30
    2d18:	ff 93       	push	r31
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    ADC_ReadValue = ADCH;
#else
    ADC_ReadValue = ADCH << 8 | ADCL;
    2d22:	e5 e2       	ldi	r30, 0x25	; 37
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	88 2f       	mov	r24, r24
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	38 2f       	mov	r19, r24
    2d2e:	22 27       	eor	r18, r18
    2d30:	e4 e2       	ldi	r30, 0x24	; 36
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	82 2b       	or	r24, r18
    2d3c:	93 2b       	or	r25, r19
    2d3e:	90 93 2f 02 	sts	0x022F, r25
    2d42:	80 93 2e 02 	sts	0x022E, r24
#endif
    ADC_pfCallback();
    2d46:	e0 91 2c 02 	lds	r30, 0x022C
    2d4a:	f0 91 2d 02 	lds	r31, 0x022D
    2d4e:	09 95       	icall
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	ff 91       	pop	r31
    2d56:	ef 91       	pop	r30
    2d58:	bf 91       	pop	r27
    2d5a:	af 91       	pop	r26
    2d5c:	9f 91       	pop	r25
    2d5e:	8f 91       	pop	r24
    2d60:	7f 91       	pop	r23
    2d62:	6f 91       	pop	r22
    2d64:	5f 91       	pop	r21
    2d66:	4f 91       	pop	r20
    2d68:	3f 91       	pop	r19
    2d6a:	2f 91       	pop	r18
    2d6c:	0f 90       	pop	r0
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	0f 90       	pop	r0
    2d72:	1f 90       	pop	r1
    2d74:	18 95       	reti

00002d76 <Dummy>:

void Dummy(void) {}
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <SEV_enuWrite>:
//	{0,0,0,0,1,0,0}
//};


tenuErrorStatus SEV_enuWrite(uint8 u8SevNumCpy , uint8 u8ValueCpy)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <SEV_enuWrite+0x6>
    2d8a:	0f 92       	push	r0
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	8a 83       	std	Y+2, r24	; 0x02
    2d92:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = E_OK;
    2d94:	19 82       	std	Y+1, r1	; 0x01
	
	if(u8SevNumCpy < SEV_MAX_NUM)
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	e0 f4       	brcc	.+56     	; 0x2dd4 <SEV_enuWrite+0x50>
	{
		if(u8ValueCpy <= SEV_u8WRITE_NUM_9)
    2d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9e:	8a 30       	cpi	r24, 0x0A	; 10
    2da0:	b0 f4       	brcc	.+44     	; 0x2dce <SEV_enuWrite+0x4a>
		{
			Sev_voidHelp(u8SevNumCpy , u8ValueCpy , SEV_astrPinMapping[u8SevNumCpy].u8SevConnection);
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	c9 01       	movw	r24, r18
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	82 0f       	add	r24, r18
    2db8:	93 1f       	adc	r25, r19
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e9 56       	subi	r30, 0x69	; 105
    2dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc0:	90 81       	ld	r25, Z
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	6b 81       	ldd	r22, Y+3	; 0x03
    2dc6:	49 2f       	mov	r20, r25
    2dc8:	0e 94 1a 18 	call	0x3034	; 0x3034 <Sev_voidHelp>
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <SEV_enuWrite+0x54>
		}
		else
		{
			 enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <SEV_enuWrite+0x54>
		}
		
	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2dd4:	82 e0       	ldi	r24, 0x02	; 2
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <SEV_enuWrite2Digits>:

tenuErrorStatus SEV_enuWrite2Digits(uint8 u8SevNumCpy1 ,uint8 u8SevNumCpy0, uint8 u8ValueCpy)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <SEV_enuWrite2Digits+0x6>
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <SEV_enuWrite2Digits+0x8>
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	8a 83       	std	Y+2, r24	; 0x02
    2df4:	6b 83       	std	Y+3, r22	; 0x03
    2df6:	4c 83       	std	Y+4, r20	; 0x04
	tenuErrorStatus enuReturnStateLoc = E_OK;
    2df8:	19 82       	std	Y+1, r1	; 0x01

	if(u8SevNumCpy0 < SEV_MAX_NUM || u8SevNumCpy1 < SEV_MAX_NUM)
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	82 30       	cpi	r24, 0x02	; 2
    2dfe:	20 f0       	brcs	.+8      	; 0x2e08 <SEV_enuWrite2Digits+0x22>
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	82 30       	cpi	r24, 0x02	; 2
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <SEV_enuWrite2Digits+0x22>
    2e06:	3e c0       	rjmp	.+124    	; 0x2e84 <SEV_enuWrite2Digits+0x9e>
	{
		if(u8ValueCpy <= 99)
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	84 36       	cpi	r24, 0x64	; 100
    2e0c:	c0 f5       	brcc	.+112    	; 0x2e7e <SEV_enuWrite2Digits+0x98>
		{
			Sev_voidHelp(u8SevNumCpy1 , u8ValueCpy/10 , SEV_astrPinMapping[u8SevNumCpy1].u8SevConnection);
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	9a e0       	ldi	r25, 0x0A	; 10
    2e12:	69 2f       	mov	r22, r25
    2e14:	0e 94 3f 39 	call	0x727e	; 0x727e <__udivmodqi4>
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	c9 01       	movw	r24, r18
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	82 0f       	add	r24, r18
    2e30:	93 1f       	adc	r25, r19
    2e32:	fc 01       	movw	r30, r24
    2e34:	e9 56       	subi	r30, 0x69	; 105
    2e36:	fe 4f       	sbci	r31, 0xFE	; 254
    2e38:	90 81       	ld	r25, Z
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	64 2f       	mov	r22, r20
    2e3e:	49 2f       	mov	r20, r25
    2e40:	0e 94 1a 18 	call	0x3034	; 0x3034 <Sev_voidHelp>
			Sev_voidHelp(u8SevNumCpy0 , u8ValueCpy%10 , SEV_astrPinMapping[u8SevNumCpy0].u8SevConnection);
    2e44:	8c 81       	ldd	r24, Y+4	; 0x04
    2e46:	9a e0       	ldi	r25, 0x0A	; 10
    2e48:	69 2f       	mov	r22, r25
    2e4a:	0e 94 3f 39 	call	0x727e	; 0x727e <__udivmodqi4>
    2e4e:	89 2f       	mov	r24, r25
    2e50:	48 2f       	mov	r20, r24
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	c9 01       	movw	r24, r18
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	e9 56       	subi	r30, 0x69	; 105
    2e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e70:	90 81       	ld	r25, Z
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	64 2f       	mov	r22, r20
    2e76:	49 2f       	mov	r20, r25
    2e78:	0e 94 1a 18 	call	0x3034	; 0x3034 <Sev_voidHelp>
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <SEV_enuWrite2Digits+0xa2>
		}
		else
		{
			 enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	89 83       	std	Y+1, r24	; 0x01
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <SEV_enuWrite2Digits+0xa2>
		}

	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <SEV_enuMode>:


tenuErrorStatus SEV_enuMode(uint8 u8SevNumCpy  , uint8 u8ModeCpy)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <SEV_enuMode+0x6>
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <SEV_enuMode+0x8>
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = E_OK ;
    2eaa:	19 82       	std	Y+1, r1	; 0x01
	
	if (u8SevNumCpy < SEV_MAX_NUM )
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <SEV_enuMode+0x1c>
    2eb2:	b5 c0       	rjmp	.+362    	; 0x301e <SEV_enuMode+0x186>
	{
		switch(u8ModeCpy)
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	3d 83       	std	Y+5, r19	; 0x05
    2ebc:	2c 83       	std	Y+4, r18	; 0x04
    2ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <SEV_enuMode+0x30>
    2ec6:	57 c0       	rjmp	.+174    	; 0x2f76 <SEV_enuMode+0xde>
    2ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eca:	3d 81       	ldd	r19, Y+5	; 0x05
    2ecc:	21 30       	cpi	r18, 0x01	; 1
    2ece:	31 05       	cpc	r19, r1
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <SEV_enuMode+0x3c>
    2ed2:	a2 c0       	rjmp	.+324    	; 0x3018 <SEV_enuMode+0x180>
		{
			case  SEV_u8ON :
				if(SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_ANODE)
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	c9 01       	movw	r24, r18
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	82 0f       	add	r24, r18
    2eea:	93 1f       	adc	r25, r19
    2eec:	fc 01       	movw	r30, r24
    2eee:	e9 56       	subi	r30, 0x69	; 105
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	80 81       	ld	r24, Z
    2ef4:	88 23       	and	r24, r24
    2ef6:	a9 f4       	brne	.+42     	; 0x2f22 <SEV_enuMode+0x8a>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8HIGH) ;
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	c9 01       	movw	r24, r18
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	82 0f       	add	r24, r18
    2f0e:	93 1f       	adc	r25, r19
    2f10:	fc 01       	movw	r30, r24
    2f12:	ea 56       	subi	r30, 0x6A	; 106
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	80 81       	ld	r24, Z
    2f18:	61 e0       	ldi	r22, 0x01	; 1
    2f1a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	80 c0       	rjmp	.+256    	; 0x3022 <SEV_enuMode+0x18a>
				}
				else if (SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_CATHODE)
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	c9 01       	movw	r24, r18
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	e9 56       	subi	r30, 0x69	; 105
    2f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f40:	80 81       	ld	r24, Z
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	a9 f4       	brne	.+42     	; 0x2f70 <SEV_enuMode+0xd8>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8LOW) ;
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	82 0f       	add	r24, r18
    2f5c:	93 1f       	adc	r25, r19
    2f5e:	fc 01       	movw	r30, r24
    2f60:	ea 56       	subi	r30, 0x6A	; 106
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	80 81       	ld	r24, Z
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	59 c0       	rjmp	.+178    	; 0x3022 <SEV_enuMode+0x18a>
				}
				else 
				{
					 enuReturnStateLoc = E_NOK_CONFIG_PARM_ERROR ;
    2f70:	84 e0       	ldi	r24, 0x04	; 4
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	56 c0       	rjmp	.+172    	; 0x3022 <SEV_enuMode+0x18a>
				}
			break ;
			case SEV_u8OFF :
				if(SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_ANODE)
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	82 0f       	add	r24, r18
    2f8c:	93 1f       	adc	r25, r19
    2f8e:	fc 01       	movw	r30, r24
    2f90:	e9 56       	subi	r30, 0x69	; 105
    2f92:	fe 4f       	sbci	r31, 0xFE	; 254
    2f94:	80 81       	ld	r24, Z
    2f96:	88 23       	and	r24, r24
    2f98:	a9 f4       	brne	.+42     	; 0x2fc4 <SEV_enuMode+0x12c>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8LOW) ;
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	82 0f       	add	r24, r18
    2fb0:	93 1f       	adc	r25, r19
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	ea 56       	subi	r30, 0x6A	; 106
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	80 81       	ld	r24, Z
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	2f c0       	rjmp	.+94     	; 0x3022 <SEV_enuMode+0x18a>
				}
				else if (SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_CATHODE)
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	c9 01       	movw	r24, r18
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	88 0f       	add	r24, r24
    2fd6:	99 1f       	adc	r25, r25
    2fd8:	82 0f       	add	r24, r18
    2fda:	93 1f       	adc	r25, r19
    2fdc:	fc 01       	movw	r30, r24
    2fde:	e9 56       	subi	r30, 0x69	; 105
    2fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe2:	80 81       	ld	r24, Z
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	a9 f4       	brne	.+42     	; 0x3012 <SEV_enuMode+0x17a>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8HIGH) ;
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	c9 01       	movw	r24, r18
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	82 0f       	add	r24, r18
    2ffe:	93 1f       	adc	r25, r19
    3000:	fc 01       	movw	r30, r24
    3002:	ea 56       	subi	r30, 0x6A	; 106
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	80 81       	ld	r24, Z
    3008:	61 e0       	ldi	r22, 0x01	; 1
    300a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	08 c0       	rjmp	.+16     	; 0x3022 <SEV_enuMode+0x18a>
				}
				else 
				{
					 enuReturnStateLoc = E_NOK_CONFIG_PARM_ERROR ;
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	05 c0       	rjmp	.+10     	; 0x3022 <SEV_enuMode+0x18a>
				}
			break;
			default:
				enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <SEV_enuMode+0x18a>
			break ;
		}
	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    301e:	82 e0       	ldi	r24, 0x02	; 2
    3020:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    3022:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <Sev_voidHelp>:


static  void Sev_voidHelp(uint8 u8SevNumCpy , uint8 u8ValueCpy , uint8 u8ModeCpy)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	61 97       	sbiw	r28, 0x11	; 17
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	6a 83       	std	Y+2, r22	; 0x02
    304c:	4b 83       	std	Y+3, r20	; 0x03
	if (u8ModeCpy == SEV_u8COMMON_CATHODE)
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	81 30       	cpi	r24, 0x01	; 1
    3052:	09 f0       	breq	.+2      	; 0x3056 <Sev_voidHelp+0x22>
    3054:	db c0       	rjmp	.+438    	; 0x320c <Sev_voidHelp+0x1d8>
	{
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[0],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_A);
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	c9 01       	movw	r24, r18
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	82 0f       	add	r24, r18
    306c:	93 1f       	adc	r25, r19
    306e:	fc 01       	movw	r30, r24
    3070:	e1 57       	subi	r30, 0x71	; 113
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	20 81       	ld	r18, Z
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	fc 01       	movw	r30, r24
    307e:	eb 57       	subi	r30, 0x7B	; 123
    3080:	fe 4f       	sbci	r31, 0xFE	; 254
    3082:	80 81       	ld	r24, Z
    3084:	81 70       	andi	r24, 0x01	; 1
    3086:	98 2f       	mov	r25, r24
    3088:	82 2f       	mov	r24, r18
    308a:	69 2f       	mov	r22, r25
    308c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[1],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_B);
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	c9 01       	movw	r24, r18
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	82 0f       	add	r24, r18
    30a6:	93 1f       	adc	r25, r19
    30a8:	fc 01       	movw	r30, r24
    30aa:	e0 57       	subi	r30, 0x70	; 112
    30ac:	fe 4f       	sbci	r31, 0xFE	; 254
    30ae:	20 81       	ld	r18, Z
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	fc 01       	movw	r30, r24
    30b8:	eb 57       	subi	r30, 0x7B	; 123
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	80 81       	ld	r24, Z
    30be:	86 95       	lsr	r24
    30c0:	81 70       	andi	r24, 0x01	; 1
    30c2:	98 2f       	mov	r25, r24
    30c4:	82 2f       	mov	r24, r18
    30c6:	69 2f       	mov	r22, r25
    30c8:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[2],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_C);
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	c9 01       	movw	r24, r18
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	82 0f       	add	r24, r18
    30e2:	93 1f       	adc	r25, r19
    30e4:	fc 01       	movw	r30, r24
    30e6:	ef 56       	subi	r30, 0x6F	; 111
    30e8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ea:	20 81       	ld	r18, Z
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	fc 01       	movw	r30, r24
    30f4:	eb 57       	subi	r30, 0x7B	; 123
    30f6:	fe 4f       	sbci	r31, 0xFE	; 254
    30f8:	80 81       	ld	r24, Z
    30fa:	86 95       	lsr	r24
    30fc:	86 95       	lsr	r24
    30fe:	81 70       	andi	r24, 0x01	; 1
    3100:	98 2f       	mov	r25, r24
    3102:	82 2f       	mov	r24, r18
    3104:	69 2f       	mov	r22, r25
    3106:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[3],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_D);
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	c9 01       	movw	r24, r18
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	82 0f       	add	r24, r18
    3120:	93 1f       	adc	r25, r19
    3122:	fc 01       	movw	r30, r24
    3124:	ee 56       	subi	r30, 0x6E	; 110
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	20 81       	ld	r18, Z
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	fc 01       	movw	r30, r24
    3132:	eb 57       	subi	r30, 0x7B	; 123
    3134:	fe 4f       	sbci	r31, 0xFE	; 254
    3136:	80 81       	ld	r24, Z
    3138:	86 95       	lsr	r24
    313a:	86 95       	lsr	r24
    313c:	86 95       	lsr	r24
    313e:	81 70       	andi	r24, 0x01	; 1
    3140:	98 2f       	mov	r25, r24
    3142:	82 2f       	mov	r24, r18
    3144:	69 2f       	mov	r22, r25
    3146:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[4],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_E);
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	c9 01       	movw	r24, r18
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	82 0f       	add	r24, r18
    3160:	93 1f       	adc	r25, r19
    3162:	fc 01       	movw	r30, r24
    3164:	ed 56       	subi	r30, 0x6D	; 109
    3166:	fe 4f       	sbci	r31, 0xFE	; 254
    3168:	20 81       	ld	r18, Z
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	fc 01       	movw	r30, r24
    3172:	eb 57       	subi	r30, 0x7B	; 123
    3174:	fe 4f       	sbci	r31, 0xFE	; 254
    3176:	80 81       	ld	r24, Z
    3178:	82 95       	swap	r24
    317a:	8f 70       	andi	r24, 0x0F	; 15
    317c:	81 70       	andi	r24, 0x01	; 1
    317e:	98 2f       	mov	r25, r24
    3180:	82 2f       	mov	r24, r18
    3182:	69 2f       	mov	r22, r25
    3184:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[5],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_F);
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	c9 01       	movw	r24, r18
    3190:	88 0f       	add	r24, r24
    3192:	99 1f       	adc	r25, r25
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	fc 01       	movw	r30, r24
    31a2:	ec 56       	subi	r30, 0x6C	; 108
    31a4:	fe 4f       	sbci	r31, 0xFE	; 254
    31a6:	20 81       	ld	r18, Z
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	fc 01       	movw	r30, r24
    31b0:	eb 57       	subi	r30, 0x7B	; 123
    31b2:	fe 4f       	sbci	r31, 0xFE	; 254
    31b4:	80 81       	ld	r24, Z
    31b6:	82 95       	swap	r24
    31b8:	86 95       	lsr	r24
    31ba:	87 70       	andi	r24, 0x07	; 7
    31bc:	81 70       	andi	r24, 0x01	; 1
    31be:	98 2f       	mov	r25, r24
    31c0:	82 2f       	mov	r24, r18
    31c2:	69 2f       	mov	r22, r25
    31c4:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[6],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_G);
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	c9 01       	movw	r24, r18
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	fc 01       	movw	r30, r24
    31e2:	eb 56       	subi	r30, 0x6B	; 107
    31e4:	fe 4f       	sbci	r31, 0xFE	; 254
    31e6:	20 81       	ld	r18, Z
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	fc 01       	movw	r30, r24
    31f0:	eb 57       	subi	r30, 0x7B	; 123
    31f2:	fe 4f       	sbci	r31, 0xFE	; 254
    31f4:	80 81       	ld	r24, Z
    31f6:	82 95       	swap	r24
    31f8:	86 95       	lsr	r24
    31fa:	86 95       	lsr	r24
    31fc:	83 70       	andi	r24, 0x03	; 3
    31fe:	81 70       	andi	r24, 0x01	; 1
    3200:	98 2f       	mov	r25, r24
    3202:	82 2f       	mov	r24, r18
    3204:	69 2f       	mov	r22, r25
    3206:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    320a:	01 c1       	rjmp	.+514    	; 0x340e <Sev_voidHelp+0x3da>
	}
	else  if(u8ModeCpy == SEV_u8COMMON_ANODE)
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	88 23       	and	r24, r24
    3210:	09 f0       	breq	.+2      	; 0x3214 <Sev_voidHelp+0x1e0>
    3212:	fd c0       	rjmp	.+506    	; 0x340e <Sev_voidHelp+0x3da>
	{
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[0],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_A);
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	28 2f       	mov	r18, r24
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	c9 01       	movw	r24, r18
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	82 0f       	add	r24, r18
    322a:	93 1f       	adc	r25, r19
    322c:	fc 01       	movw	r30, r24
    322e:	e1 57       	subi	r30, 0x71	; 113
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	80 81       	ld	r24, Z
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	fc 01       	movw	r30, r24
    323e:	eb 57       	subi	r30, 0x7B	; 123
    3240:	fe 4f       	sbci	r31, 0xFE	; 254
    3242:	80 81       	ld	r24, Z
    3244:	81 70       	andi	r24, 0x01	; 1
    3246:	18 8a       	std	Y+16, r1	; 0x10
    3248:	88 23       	and	r24, r24
    324a:	11 f4       	brne	.+4      	; 0x3250 <Sev_voidHelp+0x21c>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	88 8b       	std	Y+16, r24	; 0x10
    3250:	89 89       	ldd	r24, Y+17	; 0x11
    3252:	68 89       	ldd	r22, Y+16	; 0x10
    3254:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[1],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_B);
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	c9 01       	movw	r24, r18
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	82 0f       	add	r24, r18
    326e:	93 1f       	adc	r25, r19
    3270:	fc 01       	movw	r30, r24
    3272:	e0 57       	subi	r30, 0x70	; 112
    3274:	fe 4f       	sbci	r31, 0xFE	; 254
    3276:	80 81       	ld	r24, Z
    3278:	8f 87       	std	Y+15, r24	; 0x0f
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	88 2f       	mov	r24, r24
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	fc 01       	movw	r30, r24
    3282:	eb 57       	subi	r30, 0x7B	; 123
    3284:	fe 4f       	sbci	r31, 0xFE	; 254
    3286:	80 81       	ld	r24, Z
    3288:	86 95       	lsr	r24
    328a:	81 70       	andi	r24, 0x01	; 1
    328c:	1e 86       	std	Y+14, r1	; 0x0e
    328e:	88 23       	and	r24, r24
    3290:	11 f4       	brne	.+4      	; 0x3296 <Sev_voidHelp+0x262>
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	8e 87       	std	Y+14, r24	; 0x0e
    3296:	8f 85       	ldd	r24, Y+15	; 0x0f
    3298:	6e 85       	ldd	r22, Y+14	; 0x0e
    329a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[2],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_C);
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	c9 01       	movw	r24, r18
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	82 0f       	add	r24, r18
    32b4:	93 1f       	adc	r25, r19
    32b6:	fc 01       	movw	r30, r24
    32b8:	ef 56       	subi	r30, 0x6F	; 111
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	80 81       	ld	r24, Z
    32be:	8d 87       	std	Y+13, r24	; 0x0d
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	fc 01       	movw	r30, r24
    32c8:	eb 57       	subi	r30, 0x7B	; 123
    32ca:	fe 4f       	sbci	r31, 0xFE	; 254
    32cc:	80 81       	ld	r24, Z
    32ce:	86 95       	lsr	r24
    32d0:	86 95       	lsr	r24
    32d2:	81 70       	andi	r24, 0x01	; 1
    32d4:	1c 86       	std	Y+12, r1	; 0x0c
    32d6:	88 23       	and	r24, r24
    32d8:	11 f4       	brne	.+4      	; 0x32de <Sev_voidHelp+0x2aa>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	8c 87       	std	Y+12, r24	; 0x0c
    32de:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32e2:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[3],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_D);
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	c9 01       	movw	r24, r18
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	82 0f       	add	r24, r18
    32fc:	93 1f       	adc	r25, r19
    32fe:	fc 01       	movw	r30, r24
    3300:	ee 56       	subi	r30, 0x6E	; 110
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	80 81       	ld	r24, Z
    3306:	8b 87       	std	Y+11, r24	; 0x0b
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	fc 01       	movw	r30, r24
    3310:	eb 57       	subi	r30, 0x7B	; 123
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	80 81       	ld	r24, Z
    3316:	86 95       	lsr	r24
    3318:	86 95       	lsr	r24
    331a:	86 95       	lsr	r24
    331c:	81 70       	andi	r24, 0x01	; 1
    331e:	1a 86       	std	Y+10, r1	; 0x0a
    3320:	88 23       	and	r24, r24
    3322:	11 f4       	brne	.+4      	; 0x3328 <Sev_voidHelp+0x2f4>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	8a 87       	std	Y+10, r24	; 0x0a
    3328:	8b 85       	ldd	r24, Y+11	; 0x0b
    332a:	6a 85       	ldd	r22, Y+10	; 0x0a
    332c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[4],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_E);
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	c9 01       	movw	r24, r18
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	fc 01       	movw	r30, r24
    334a:	ed 56       	subi	r30, 0x6D	; 109
    334c:	fe 4f       	sbci	r31, 0xFE	; 254
    334e:	80 81       	ld	r24, Z
    3350:	89 87       	std	Y+9, r24	; 0x09
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	fc 01       	movw	r30, r24
    335a:	eb 57       	subi	r30, 0x7B	; 123
    335c:	fe 4f       	sbci	r31, 0xFE	; 254
    335e:	80 81       	ld	r24, Z
    3360:	82 95       	swap	r24
    3362:	8f 70       	andi	r24, 0x0F	; 15
    3364:	81 70       	andi	r24, 0x01	; 1
    3366:	18 86       	std	Y+8, r1	; 0x08
    3368:	88 23       	and	r24, r24
    336a:	11 f4       	brne	.+4      	; 0x3370 <Sev_voidHelp+0x33c>
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	88 87       	std	Y+8, r24	; 0x08
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	68 85       	ldd	r22, Y+8	; 0x08
    3374:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[5],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_F);
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	c9 01       	movw	r24, r18
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	82 0f       	add	r24, r18
    338e:	93 1f       	adc	r25, r19
    3390:	fc 01       	movw	r30, r24
    3392:	ec 56       	subi	r30, 0x6C	; 108
    3394:	fe 4f       	sbci	r31, 0xFE	; 254
    3396:	80 81       	ld	r24, Z
    3398:	8f 83       	std	Y+7, r24	; 0x07
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	fc 01       	movw	r30, r24
    33a2:	eb 57       	subi	r30, 0x7B	; 123
    33a4:	fe 4f       	sbci	r31, 0xFE	; 254
    33a6:	80 81       	ld	r24, Z
    33a8:	82 95       	swap	r24
    33aa:	86 95       	lsr	r24
    33ac:	87 70       	andi	r24, 0x07	; 7
    33ae:	81 70       	andi	r24, 0x01	; 1
    33b0:	1e 82       	std	Y+6, r1	; 0x06
    33b2:	88 23       	and	r24, r24
    33b4:	11 f4       	brne	.+4      	; 0x33ba <Sev_voidHelp+0x386>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	8e 83       	std	Y+6, r24	; 0x06
    33ba:	8f 81       	ldd	r24, Y+7	; 0x07
    33bc:	6e 81       	ldd	r22, Y+6	; 0x06
    33be:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[6],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_G);
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	c9 01       	movw	r24, r18
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	82 0f       	add	r24, r18
    33d8:	93 1f       	adc	r25, r19
    33da:	fc 01       	movw	r30, r24
    33dc:	eb 56       	subi	r30, 0x6B	; 107
    33de:	fe 4f       	sbci	r31, 0xFE	; 254
    33e0:	80 81       	ld	r24, Z
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	fc 01       	movw	r30, r24
    33ec:	eb 57       	subi	r30, 0x7B	; 123
    33ee:	fe 4f       	sbci	r31, 0xFE	; 254
    33f0:	80 81       	ld	r24, Z
    33f2:	82 95       	swap	r24
    33f4:	86 95       	lsr	r24
    33f6:	86 95       	lsr	r24
    33f8:	83 70       	andi	r24, 0x03	; 3
    33fa:	81 70       	andi	r24, 0x01	; 1
    33fc:	1c 82       	std	Y+4, r1	; 0x04
    33fe:	88 23       	and	r24, r24
    3400:	11 f4       	brne	.+4      	; 0x3406 <Sev_voidHelp+0x3d2>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	8c 83       	std	Y+4, r24	; 0x04
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	6c 81       	ldd	r22, Y+4	; 0x04
    340a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	else
	{
		
	}
	
}
    340e:	61 96       	adiw	r28, 0x11	; 17
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <Relay_voidInit>:
#include "RELAY_priv.h"
static void Relay_ONNC_OFFNO(uint8 u8RelayNumCpy , uint8 u8Mode);
static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode);

void Relay_voidInit(void)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <Relay_voidInit+0x6>
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < RELAY_MAX_NUM  ; u8CntrLoc++)
    342c:	19 82       	std	Y+1, r1	; 0x01
    342e:	8f c0       	rjmp	.+286    	; 0x354e <Relay_voidInit+0x12e>
	{
		switch( (Relay_astrPinMapping[u8CntrLoc].u8PinNumbers) )
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	28 2f       	mov	r18, r24
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	c9 01       	movw	r24, r18
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	82 0f       	add	r24, r18
    3442:	93 1f       	adc	r25, r19
    3444:	fc 01       	movw	r30, r24
    3446:	ef 55       	subi	r30, 0x5F	; 95
    3448:	fe 4f       	sbci	r31, 0xFE	; 254
    344a:	80 81       	ld	r24, Z
    344c:	28 2f       	mov	r18, r24
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	3b 83       	std	Y+3, r19	; 0x03
    3452:	2a 83       	std	Y+2, r18	; 0x02
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	81 30       	cpi	r24, 0x01	; 1
    345a:	91 05       	cpc	r25, r1
    345c:	09 f4       	brne	.+2      	; 0x3460 <Relay_voidInit+0x40>
    345e:	45 c0       	rjmp	.+138    	; 0x34ea <Relay_voidInit+0xca>
    3460:	2a 81       	ldd	r18, Y+2	; 0x02
    3462:	3b 81       	ldd	r19, Y+3	; 0x03
    3464:	22 30       	cpi	r18, 0x02	; 2
    3466:	31 05       	cpc	r19, r1
    3468:	09 f0       	breq	.+2      	; 0x346c <Relay_voidInit+0x4c>
    346a:	5f c0       	rjmp	.+190    	; 0x352a <Relay_voidInit+0x10a>
		{
		case Relay_intSupply:
		{
			if(Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map >= DIO_u8PIN_0  &&
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	c9 01       	movw	r24, r18
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	82 0f       	add	r24, r18
    347e:	93 1f       	adc	r25, r19
    3480:	fc 01       	movw	r30, r24
    3482:	ed 55       	subi	r30, 0x5D	; 93
    3484:	fe 4f       	sbci	r31, 0xFE	; 254
    3486:	80 81       	ld	r24, Z
    3488:	80 32       	cpi	r24, 0x20	; 32
    348a:	f8 f4       	brcc	.+62     	; 0x34ca <Relay_voidInit+0xaa>
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	c9 01       	movw	r24, r18
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	82 0f       	add	r24, r18
    349e:	93 1f       	adc	r25, r19
    34a0:	fc 01       	movw	r30, r24
    34a2:	ec 55       	subi	r30, 0x5C	; 92
    34a4:	fe 4f       	sbci	r31, 0xFE	; 254
    34a6:	80 81       	ld	r24, Z
    34a8:	80 32       	cpi	r24, 0x20	; 32
    34aa:	78 f4       	brcc	.+30     	; 0x34ca <Relay_voidInit+0xaa>
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map <= DIO_u8PIN_31 &&
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin2Map >= DIO_u8PIN_0  &&
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin2Map <= DIO_u8PIN_31)
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_OK;
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	c9 01       	movw	r24, r18
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	88 0f       	add	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	82 0f       	add	r24, r18
    34be:	93 1f       	adc	r25, r19
    34c0:	fc 01       	movw	r30, r24
    34c2:	eb 55       	subi	r30, 0x5B	; 91
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	10 82       	st	Z, r1
    34c8:	3f c0       	rjmp	.+126    	; 0x3548 <Relay_voidInit+0x128>
			}
			else
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	28 2f       	mov	r18, r24
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	c9 01       	movw	r24, r18
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	82 0f       	add	r24, r18
    34dc:	93 1f       	adc	r25, r19
    34de:	fc 01       	movw	r30, r24
    34e0:	eb 55       	subi	r30, 0x5B	; 91
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	80 83       	st	Z, r24
    34e8:	2f c0       	rjmp	.+94     	; 0x3548 <Relay_voidInit+0x128>
		}
		break;

		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap >= DIO_u8PIN_0  &&
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	c9 01       	movw	r24, r18
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	82 0f       	add	r24, r18
    34fc:	93 1f       	adc	r25, r19
    34fe:	fc 01       	movw	r30, r24
    3500:	ec 55       	subi	r30, 0x5C	; 92
    3502:	fe 4f       	sbci	r31, 0xFE	; 254
    3504:	80 81       	ld	r24, Z
    3506:	80 32       	cpi	r24, 0x20	; 32
    3508:	f8 f0       	brcs	.+62     	; 0x3548 <Relay_voidInit+0x128>
			{

			}
			else
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	28 2f       	mov	r18, r24
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	c9 01       	movw	r24, r18
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	82 0f       	add	r24, r18
    351c:	93 1f       	adc	r25, r19
    351e:	fc 01       	movw	r30, r24
    3520:	eb 55       	subi	r30, 0x5B	; 91
    3522:	fe 4f       	sbci	r31, 0xFE	; 254
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	80 83       	st	Z, r24
    3528:	0f c0       	rjmp	.+30     	; 0x3548 <Relay_voidInit+0x128>
			}
		}
		break;

		default:
			Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	28 2f       	mov	r18, r24
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	c9 01       	movw	r24, r18
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	88 0f       	add	r24, r24
    3538:	99 1f       	adc	r25, r25
    353a:	82 0f       	add	r24, r18
    353c:	93 1f       	adc	r25, r19
    353e:	fc 01       	movw	r30, r24
    3540:	eb 55       	subi	r30, 0x5B	; 91
    3542:	fe 4f       	sbci	r31, 0xFE	; 254
    3544:	84 e0       	ldi	r24, 0x04	; 4
    3546:	80 83       	st	Z, r24
static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode);

void Relay_voidInit(void)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < RELAY_MAX_NUM  ; u8CntrLoc++)
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	8f 5f       	subi	r24, 0xFF	; 255
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	82 30       	cpi	r24, 0x02	; 2
    3552:	08 f4       	brcc	.+2      	; 0x3556 <Relay_voidInit+0x136>
    3554:	6d cf       	rjmp	.-294    	; 0x3430 <Relay_voidInit+0x10>
		break;
		}

	}

}
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <Relay_enuState>:


tenuErrorStatus Relay_enuState (uint8 u8RelayNumCpy , uint8 u8Mode)
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	00 d0       	rcall	.+0      	; 0x3568 <Relay_enuState+0x6>
    3568:	00 d0       	rcall	.+0      	; 0x356a <Relay_enuState+0x8>
    356a:	0f 92       	push	r0
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	8a 83       	std	Y+2, r24	; 0x02
    3572:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus Relay_ErrorState = E_OK;
    3574:	19 82       	std	Y+1, r1	; 0x01

	switch (u8Mode) {
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	3d 83       	std	Y+5, r19	; 0x05
    357e:	2c 83       	std	Y+4, r18	; 0x04
    3580:	8c 81       	ldd	r24, Y+4	; 0x04
    3582:	9d 81       	ldd	r25, Y+5	; 0x05
    3584:	85 35       	cpi	r24, 0x55	; 85
    3586:	91 05       	cpc	r25, r1
    3588:	31 f0       	breq	.+12     	; 0x3596 <Relay_enuState+0x34>
    358a:	2c 81       	ldd	r18, Y+4	; 0x04
    358c:	3d 81       	ldd	r19, Y+5	; 0x05
    358e:	26 36       	cpi	r18, 0x66	; 102
    3590:	31 05       	cpc	r19, r1
    3592:	71 f1       	breq	.+92     	; 0x35f0 <Relay_enuState+0x8e>
    3594:	5a c0       	rjmp	.+180    	; 0x364a <Relay_enuState+0xe8>
		case RELAY_ON:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNO)
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	28 2f       	mov	r18, r24
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	c9 01       	movw	r24, r18
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	88 0f       	add	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	82 0f       	add	r24, r18
    35a8:	93 1f       	adc	r25, r19
    35aa:	fc 01       	movw	r30, r24
    35ac:	ee 55       	subi	r30, 0x5E	; 94
    35ae:	fe 4f       	sbci	r31, 0xFE	; 254
    35b0:	80 81       	ld	r24, Z
    35b2:	85 31       	cpi	r24, 0x15	; 21
    35b4:	29 f4       	brne	.+10     	; 0x35c0 <Relay_enuState+0x5e>
			{
				Relay_ONNC_OFFNO(u8RelayNumCpy , u8Mode);
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	6b 81       	ldd	r22, Y+3	; 0x03
    35ba:	0e 94 30 1b 	call	0x3660	; 0x3660 <Relay_ONNC_OFFNO>
    35be:	47 c0       	rjmp	.+142    	; 0x364e <Relay_enuState+0xec>

			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNC)
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	c9 01       	movw	r24, r18
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	fc 01       	movw	r30, r24
    35d6:	ee 55       	subi	r30, 0x5E	; 94
    35d8:	fe 4f       	sbci	r31, 0xFE	; 254
    35da:	80 81       	ld	r24, Z
    35dc:	8f 3f       	cpi	r24, 0xFF	; 255
    35de:	29 f4       	brne	.+10     	; 0x35ea <Relay_enuState+0x88>
			{
				Relay_OFFNC_ONNO(u8RelayNumCpy , u8Mode);
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	6b 81       	ldd	r22, Y+3	; 0x03
    35e4:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Relay_OFFNC_ONNO>
    35e8:	32 c0       	rjmp	.+100    	; 0x364e <Relay_enuState+0xec>

			}
			else
			{
				Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    35ea:	84 e0       	ldi	r24, 0x04	; 4
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	2f c0       	rjmp	.+94     	; 0x364e <Relay_enuState+0xec>

		break;

		case RELAY_OFF:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNO)
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	28 2f       	mov	r18, r24
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	c9 01       	movw	r24, r18
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	82 0f       	add	r24, r18
    3602:	93 1f       	adc	r25, r19
    3604:	fc 01       	movw	r30, r24
    3606:	ee 55       	subi	r30, 0x5E	; 94
    3608:	fe 4f       	sbci	r31, 0xFE	; 254
    360a:	80 81       	ld	r24, Z
    360c:	85 31       	cpi	r24, 0x15	; 21
    360e:	29 f4       	brne	.+10     	; 0x361a <Relay_enuState+0xb8>
			{
				Relay_OFFNC_ONNO(u8RelayNumCpy , u8Mode);
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	6b 81       	ldd	r22, Y+3	; 0x03
    3614:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Relay_OFFNC_ONNO>
    3618:	1a c0       	rjmp	.+52     	; 0x364e <Relay_enuState+0xec>

			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNC)
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	c9 01       	movw	r24, r18
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	82 0f       	add	r24, r18
    362c:	93 1f       	adc	r25, r19
    362e:	fc 01       	movw	r30, r24
    3630:	ee 55       	subi	r30, 0x5E	; 94
    3632:	fe 4f       	sbci	r31, 0xFE	; 254
    3634:	80 81       	ld	r24, Z
    3636:	8f 3f       	cpi	r24, 0xFF	; 255
    3638:	29 f4       	brne	.+10     	; 0x3644 <Relay_enuState+0xe2>
			{
				Relay_ONNC_OFFNO(u8RelayNumCpy , u8Mode);
    363a:	8a 81       	ldd	r24, Y+2	; 0x02
    363c:	6b 81       	ldd	r22, Y+3	; 0x03
    363e:	0e 94 30 1b 	call	0x3660	; 0x3660 <Relay_ONNC_OFFNO>
    3642:	05 c0       	rjmp	.+10     	; 0x364e <Relay_enuState+0xec>

			}
			else
			{
				Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    3644:	84 e0       	ldi	r24, 0x04	; 4
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	02 c0       	rjmp	.+4      	; 0x364e <Relay_enuState+0xec>
		}

		break;

		default:
			Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    364a:	84 e0       	ldi	r24, 0x04	; 4
    364c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	return Relay_ErrorState;
    364e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	08 95       	ret

00003660 <Relay_ONNC_OFFNO>:


static void Relay_ONNC_OFFNO(uint8 u8RelayNumCpy , uint8 u8Mode)
{
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	00 d0       	rcall	.+0      	; 0x3666 <Relay_ONNC_OFFNO+0x6>
    3666:	00 d0       	rcall	.+0      	; 0x3668 <Relay_ONNC_OFFNO+0x8>
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Relay_astrPinMapping[u8RelayNumCpy].u8PinNumbers)
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	c9 01       	movw	r24, r18
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	fc 01       	movw	r30, r24
    3686:	ef 55       	subi	r30, 0x5F	; 95
    3688:	fe 4f       	sbci	r31, 0xFE	; 254
    368a:	80 81       	ld	r24, Z
    368c:	28 2f       	mov	r18, r24
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	3c 83       	std	Y+4, r19	; 0x04
    3692:	2b 83       	std	Y+3, r18	; 0x03
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	81 30       	cpi	r24, 0x01	; 1
    369a:	91 05       	cpc	r25, r1
    369c:	49 f1       	breq	.+82     	; 0x36f0 <Relay_ONNC_OFFNO+0x90>
    369e:	2b 81       	ldd	r18, Y+3	; 0x03
    36a0:	3c 81       	ldd	r19, Y+4	; 0x04
    36a2:	22 30       	cpi	r18, 0x02	; 2
    36a4:	31 05       	cpc	r19, r1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <Relay_ONNC_OFFNO+0x4a>
    36a8:	76 c0       	rjmp	.+236    	; 0x3796 <Relay_ONNC_OFFNO+0x136>
	{
		case Relay_intSupply:
		{

			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH );
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	c9 01       	movw	r24, r18
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	82 0f       	add	r24, r18
    36bc:	93 1f       	adc	r25, r19
    36be:	fc 01       	movw	r30, r24
    36c0:	ed 55       	subi	r30, 0x5D	; 93
    36c2:	fe 4f       	sbci	r31, 0xFE	; 254
    36c4:	80 81       	ld	r24, Z
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	28 2f       	mov	r18, r24
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	c9 01       	movw	r24, r18
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	88 0f       	add	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	82 0f       	add	r24, r18
    36de:	93 1f       	adc	r25, r19
    36e0:	fc 01       	movw	r30, r24
    36e2:	ec 55       	subi	r30, 0x5C	; 92
    36e4:	fe 4f       	sbci	r31, 0xFE	; 254
    36e6:	80 81       	ld	r24, Z
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    36ee:	53 c0       	rjmp	.+166    	; 0x3796 <Relay_ONNC_OFFNO+0x136>
		}
	break;

		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extHIGH)
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	c9 01       	movw	r24, r18
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	82 0f       	add	r24, r18
    3702:	93 1f       	adc	r25, r19
    3704:	fc 01       	movw	r30, r24
    3706:	ed 55       	subi	r30, 0x5D	; 93
    3708:	fe 4f       	sbci	r31, 0xFE	; 254
    370a:	80 81       	ld	r24, Z
    370c:	8a 3c       	cpi	r24, 0xCA	; 202
    370e:	91 f4       	brne	.+36     	; 0x3734 <Relay_ONNC_OFFNO+0xd4>
			{

				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	c9 01       	movw	r24, r18
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	fc 01       	movw	r30, r24
    3726:	ec 55       	subi	r30, 0x5C	; 92
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 81       	ld	r24, Z
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3732:	31 c0       	rjmp	.+98     	; 0x3796 <Relay_ONNC_OFFNO+0x136>
			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extLOW)
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	28 2f       	mov	r18, r24
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	c9 01       	movw	r24, r18
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	82 0f       	add	r24, r18
    3746:	93 1f       	adc	r25, r19
    3748:	fc 01       	movw	r30, r24
    374a:	ed 55       	subi	r30, 0x5D	; 93
    374c:	fe 4f       	sbci	r31, 0xFE	; 254
    374e:	80 81       	ld	r24, Z
    3750:	85 3c       	cpi	r24, 0xC5	; 197
    3752:	91 f4       	brne	.+36     	; 0x3778 <Relay_ONNC_OFFNO+0x118>
			{

				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	c9 01       	movw	r24, r18
    375c:	88 0f       	add	r24, r24
    375e:	99 1f       	adc	r25, r25
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	82 0f       	add	r24, r18
    3766:	93 1f       	adc	r25, r19
    3768:	fc 01       	movw	r30, r24
    376a:	ec 55       	subi	r30, 0x5C	; 92
    376c:	fe 4f       	sbci	r31, 0xFE	; 254
    376e:	80 81       	ld	r24, Z
    3770:	61 e0       	ldi	r22, 0x01	; 1
    3772:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3776:	0f c0       	rjmp	.+30     	; 0x3796 <Relay_ONNC_OFFNO+0x136>
			}
			else
			{
				Relay_astrPinMapping[u8RelayNumCpy].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	28 2f       	mov	r18, r24
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	c9 01       	movw	r24, r18
    3780:	88 0f       	add	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	82 0f       	add	r24, r18
    378a:	93 1f       	adc	r25, r19
    378c:	fc 01       	movw	r30, r24
    378e:	eb 55       	subi	r30, 0x5B	; 91
    3790:	fe 4f       	sbci	r31, 0xFE	; 254
    3792:	84 e0       	ldi	r24, 0x04	; 4
    3794:	80 83       	st	Z, r24
			break;
		}
	break;
	}

}
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <Relay_OFFNC_ONNO>:

static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode)
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <Relay_OFFNC_ONNO+0x6>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <Relay_OFFNC_ONNO+0x8>
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Relay_astrPinMapping[u8RelayNumCpy].u8PinNumbers)
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	28 2f       	mov	r18, r24
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	c9 01       	movw	r24, r18
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	82 0f       	add	r24, r18
    37c6:	93 1f       	adc	r25, r19
    37c8:	fc 01       	movw	r30, r24
    37ca:	ef 55       	subi	r30, 0x5F	; 95
    37cc:	fe 4f       	sbci	r31, 0xFE	; 254
    37ce:	80 81       	ld	r24, Z
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	3c 83       	std	Y+4, r19	; 0x04
    37d6:	2b 83       	std	Y+3, r18	; 0x03
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	9c 81       	ldd	r25, Y+4	; 0x04
    37dc:	81 30       	cpi	r24, 0x01	; 1
    37de:	91 05       	cpc	r25, r1
    37e0:	49 f1       	breq	.+82     	; 0x3834 <Relay_OFFNC_ONNO+0x90>
    37e2:	2b 81       	ldd	r18, Y+3	; 0x03
    37e4:	3c 81       	ldd	r19, Y+4	; 0x04
    37e6:	22 30       	cpi	r18, 0x02	; 2
    37e8:	31 05       	cpc	r19, r1
    37ea:	09 f0       	breq	.+2      	; 0x37ee <Relay_OFFNC_ONNO+0x4a>
    37ec:	76 c0       	rjmp	.+236    	; 0x38da <Relay_OFFNC_ONNO+0x136>
	{
		case Relay_intSupply:
		{
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	28 2f       	mov	r18, r24
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	c9 01       	movw	r24, r18
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	82 0f       	add	r24, r18
    3800:	93 1f       	adc	r25, r19
    3802:	fc 01       	movw	r30, r24
    3804:	ed 55       	subi	r30, 0x5D	; 93
    3806:	fe 4f       	sbci	r31, 0xFE	; 254
    3808:	80 81       	ld	r24, Z
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	c9 01       	movw	r24, r18
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	88 0f       	add	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	82 0f       	add	r24, r18
    3822:	93 1f       	adc	r25, r19
    3824:	fc 01       	movw	r30, r24
    3826:	ec 55       	subi	r30, 0x5C	; 92
    3828:	fe 4f       	sbci	r31, 0xFE	; 254
    382a:	80 81       	ld	r24, Z
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3832:	53 c0       	rjmp	.+166    	; 0x38da <Relay_OFFNC_ONNO+0x136>
		}
		break;
		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extHIGH)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	c9 01       	movw	r24, r18
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	88 0f       	add	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	82 0f       	add	r24, r18
    3846:	93 1f       	adc	r25, r19
    3848:	fc 01       	movw	r30, r24
    384a:	ed 55       	subi	r30, 0x5D	; 93
    384c:	fe 4f       	sbci	r31, 0xFE	; 254
    384e:	80 81       	ld	r24, Z
    3850:	8a 3c       	cpi	r24, 0xCA	; 202
    3852:	91 f4       	brne	.+36     	; 0x3878 <Relay_OFFNC_ONNO+0xd4>
			{
				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	c9 01       	movw	r24, r18
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	82 0f       	add	r24, r18
    3866:	93 1f       	adc	r25, r19
    3868:	fc 01       	movw	r30, r24
    386a:	ec 55       	subi	r30, 0x5C	; 92
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	80 81       	ld	r24, Z
    3870:	61 e0       	ldi	r22, 0x01	; 1
    3872:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3876:	31 c0       	rjmp	.+98     	; 0x38da <Relay_OFFNC_ONNO+0x136>
			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extLOW)
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	28 2f       	mov	r18, r24
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	c9 01       	movw	r24, r18
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	88 0f       	add	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	82 0f       	add	r24, r18
    388a:	93 1f       	adc	r25, r19
    388c:	fc 01       	movw	r30, r24
    388e:	ed 55       	subi	r30, 0x5D	; 93
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	80 81       	ld	r24, Z
    3894:	85 3c       	cpi	r24, 0xC5	; 197
    3896:	91 f4       	brne	.+36     	; 0x38bc <Relay_OFFNC_ONNO+0x118>
			{
				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	c9 01       	movw	r24, r18
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	82 0f       	add	r24, r18
    38aa:	93 1f       	adc	r25, r19
    38ac:	fc 01       	movw	r30, r24
    38ae:	ec 55       	subi	r30, 0x5C	; 92
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	80 81       	ld	r24, Z
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    38ba:	0f c0       	rjmp	.+30     	; 0x38da <Relay_OFFNC_ONNO+0x136>
			}
			else
			{
				Relay_astrPinMapping[u8RelayNumCpy].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	c9 01       	movw	r24, r18
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	82 0f       	add	r24, r18
    38ce:	93 1f       	adc	r25, r19
    38d0:	fc 01       	movw	r30, r24
    38d2:	eb 55       	subi	r30, 0x5B	; 91
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	84 e0       	ldi	r24, 0x04	; 4
    38d8:	80 83       	st	Z, r24
			break;
		}
		break;
	}

}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <LM35_vidInit>:
static float32 LM35_u16ReadTempAsync(uint8 LM35_u8ChannelNum);

uint8 LM35_u8Channel;

void LM35_vidInit(uint8 LM35_u8ChannelNum)
{
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	0f 92       	push	r0
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	89 83       	std	Y+1, r24	; 0x01
	LM35_u8Channel = LM35_u8ChannelNum;
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	80 93 30 02 	sts	0x0230, r24
	if(LM35_astrChannelMapping[LM35_u8ChannelNum].u8ReadMode == LM35_ReadSynch)
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	c9 01       	movw	r24, r18
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	88 0f       	add	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	82 1b       	sub	r24, r18
    3910:	93 0b       	sbc	r25, r19
    3912:	fc 01       	movw	r30, r24
    3914:	e4 55       	subi	r30, 0x54	; 84
    3916:	fe 4f       	sbci	r31, 0xFE	; 254
    3918:	80 81       	ld	r24, Z
    391a:	86 36       	cpi	r24, 0x66	; 102
    391c:	69 f4       	brne	.+26     	; 0x3938 <LM35_vidInit+0x50>
	{
		DIO_voidInit();
    391e:	0e 94 a5 11 	call	0x234a	; 0x234a <DIO_voidInit>
		ADC_voidEnable();
    3922:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <ADC_voidEnable>
		ADC_voidInit();
    3926:	0e 94 5f 15 	call	0x2abe	; 0x2abe <ADC_voidInit>
		LCD_voidInit();
    392a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_voidInit>
		DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8HIGH);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
    3936:	16 c0       	rjmp	.+44     	; 0x3964 <LM35_vidInit+0x7c>
	}
	else
	{
		DIO_voidInit();
    3938:	0e 94 a5 11 	call	0x234a	; 0x234a <DIO_voidInit>
		GIE_voidDisable();
    393c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <GIE_voidDisable>
		ADC_voidEnable();
    3940:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <ADC_voidEnable>
		ADC_voidInit();
    3944:	0e 94 5f 15 	call	0x2abe	; 0x2abe <ADC_voidInit>
		LCD_voidInit();
    3948:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_voidInit>
		ADC_voidSetCallback(LM35_u16ReadTempUpdate);
    394c:	81 ef       	ldi	r24, 0xF1	; 241
    394e:	9c e1       	ldi	r25, 0x1C	; 28
    3950:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <ADC_voidSetCallback>
		DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8HIGH);
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	61 e0       	ldi	r22, 0x01	; 1
    3958:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
		ADC_voidInterruptEnable();
    395c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <ADC_voidInterruptEnable>
		GIE_voidEnable();
    3960:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <GIE_voidEnable>
	}
}
    3964:	0f 90       	pop	r0
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <LM35_u16ReadTemp>:

float32 LM35_u16ReadTemp(uint8 LM35_u8ChannelNum)
{
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	00 d0       	rcall	.+0      	; 0x3972 <LM35_u16ReadTemp+0x6>
    3972:	00 d0       	rcall	.+0      	; 0x3974 <LM35_u16ReadTemp+0x8>
    3974:	0f 92       	push	r0
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	8d 83       	std	Y+5, r24	; 0x05
	float32 f32_LM35Temp;
	if(LM35_astrChannelMapping[LM35_u8ChannelNum].u8ReadMode == LM35_ReadSynch)
    397c:	8d 81       	ldd	r24, Y+5	; 0x05
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	c9 01       	movw	r24, r18
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	82 1b       	sub	r24, r18
    3992:	93 0b       	sbc	r25, r19
    3994:	fc 01       	movw	r30, r24
    3996:	e4 55       	subi	r30, 0x54	; 84
    3998:	fe 4f       	sbci	r31, 0xFE	; 254
    399a:	80 81       	ld	r24, Z
    399c:	86 36       	cpi	r24, 0x66	; 102
    399e:	51 f4       	brne	.+20     	; 0x39b4 <LM35_u16ReadTemp+0x48>
	{
		f32_LM35Temp = LM35_u16ReadTempSync(LM35_u8ChannelNum);
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LM35_u16ReadTempSync>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	89 83       	std	Y+1, r24	; 0x01
    39ac:	9a 83       	std	Y+2, r25	; 0x02
    39ae:	ab 83       	std	Y+3, r26	; 0x03
    39b0:	bc 83       	std	Y+4, r27	; 0x04
    39b2:	09 c0       	rjmp	.+18     	; 0x39c6 <LM35_u16ReadTemp+0x5a>

	}
	else
	{
		f32_LM35Temp = LM35_u16ReadTempAsync(LM35_u8ChannelNum);
    39b4:	8d 81       	ldd	r24, Y+5	; 0x05
    39b6:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <LM35_u16ReadTempAsync>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	ab 83       	std	Y+3, r26	; 0x03
    39c4:	bc 83       	std	Y+4, r27	; 0x04

	}
	return f32_LM35Temp;
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ca:	ab 81       	ldd	r26, Y+3	; 0x03
    39cc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <LM35_u16ReadTempUpdate>:

void LM35_u16ReadTempUpdate(void)
{
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62

	if( LM35_astrChannelMapping[LM35_u8Channel].u8ReadMode == LM35_ReadSynch)
    39ee:	80 91 30 02 	lds	r24, 0x0230
    39f2:	28 2f       	mov	r18, r24
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	c9 01       	movw	r24, r18
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	82 1b       	sub	r24, r18
    3a06:	93 0b       	sbc	r25, r19
    3a08:	fc 01       	movw	r30, r24
    3a0a:	e4 55       	subi	r30, 0x54	; 84
    3a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0e:	80 81       	ld	r24, Z
    3a10:	86 36       	cpi	r24, 0x66	; 102
    3a12:	51 f5       	brne	.+84     	; 0x3a68 <LM35_u16ReadTempUpdate+0x86>
	{
		LM35_astrChannelMapping[LM35_u8Channel].f32ChannelValue =
    3a14:	80 91 30 02 	lds	r24, 0x0230
    3a18:	08 2f       	mov	r16, r24
    3a1a:	10 e0       	ldi	r17, 0x00	; 0
    3a1c:	80 91 30 02 	lds	r24, 0x0230
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	c9 01       	movw	r24, r18
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	82 1b       	sub	r24, r18
    3a34:	93 0b       	sbc	r25, r19
    3a36:	fc 01       	movw	r30, r24
    3a38:	e5 55       	subi	r30, 0x55	; 85
    3a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a3c:	80 81       	ld	r24, Z
    3a3e:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LM35_u16ReadTempSync>
    3a42:	9b 01       	movw	r18, r22
    3a44:	ac 01       	movw	r20, r24
    3a46:	c8 01       	movw	r24, r16
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	88 0f       	add	r24, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	80 1b       	sub	r24, r16
    3a56:	91 0b       	sbc	r25, r17
    3a58:	fc 01       	movw	r30, r24
    3a5a:	e3 55       	subi	r30, 0x53	; 83
    3a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5e:	20 83       	st	Z, r18
    3a60:	31 83       	std	Z+1, r19	; 0x01
    3a62:	42 83       	std	Z+2, r20	; 0x02
    3a64:	53 83       	std	Z+3, r21	; 0x03
    3a66:	4f c0       	rjmp	.+158    	; 0x3b06 <LM35_u16ReadTempUpdate+0x124>
				LM35_u16ReadTempSync(LM35_astrChannelMapping[LM35_u8Channel].u8ADCChannelMap);
	}
	else if (LM35_astrChannelMapping[LM35_u8Channel].u8ReadMode == LM35_ReadAsynch)
    3a68:	80 91 30 02 	lds	r24, 0x0230
    3a6c:	28 2f       	mov	r18, r24
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	c9 01       	movw	r24, r18
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	88 0f       	add	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	88 0f       	add	r24, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	82 1b       	sub	r24, r18
    3a80:	93 0b       	sbc	r25, r19
    3a82:	fc 01       	movw	r30, r24
    3a84:	e4 55       	subi	r30, 0x54	; 84
    3a86:	fe 4f       	sbci	r31, 0xFE	; 254
    3a88:	80 81       	ld	r24, Z
    3a8a:	8c 3c       	cpi	r24, 0xCC	; 204
    3a8c:	51 f5       	brne	.+84     	; 0x3ae2 <LM35_u16ReadTempUpdate+0x100>
	{
		LM35_astrChannelMapping[LM35_u8Channel].f32ChannelValue =
    3a8e:	80 91 30 02 	lds	r24, 0x0230
    3a92:	08 2f       	mov	r16, r24
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	80 91 30 02 	lds	r24, 0x0230
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	88 0f       	add	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	82 1b       	sub	r24, r18
    3aae:	93 0b       	sbc	r25, r19
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	e5 55       	subi	r30, 0x55	; 85
    3ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab6:	80 81       	ld	r24, Z
    3ab8:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <LM35_u16ReadTempAsync>
    3abc:	9b 01       	movw	r18, r22
    3abe:	ac 01       	movw	r20, r24
    3ac0:	c8 01       	movw	r24, r16
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	88 0f       	add	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	80 1b       	sub	r24, r16
    3ad0:	91 0b       	sbc	r25, r17
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	e3 55       	subi	r30, 0x53	; 83
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	20 83       	st	Z, r18
    3ada:	31 83       	std	Z+1, r19	; 0x01
    3adc:	42 83       	std	Z+2, r20	; 0x02
    3ade:	53 83       	std	Z+3, r21	; 0x03
    3ae0:	12 c0       	rjmp	.+36     	; 0x3b06 <LM35_u16ReadTempUpdate+0x124>
							LM35_u16ReadTempAsync(LM35_astrChannelMapping[LM35_u8Channel].u8ADCChannelMap);
	}
	else
	{
		LM35_astrChannelMapping[LM35_u8Channel].tenuLM35_ErrorState = E_NOK_CONFIG_PARM_ERROR ;
    3ae2:	80 91 30 02 	lds	r24, 0x0230
    3ae6:	28 2f       	mov	r18, r24
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	c9 01       	movw	r24, r18
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	82 1b       	sub	r24, r18
    3afa:	93 0b       	sbc	r25, r19
    3afc:	fc 01       	movw	r30, r24
    3afe:	ef 54       	subi	r30, 0x4F	; 79
    3b00:	fe 4f       	sbci	r31, 0xFE	; 254
    3b02:	84 e0       	ldi	r24, 0x04	; 4
    3b04:	80 83       	st	Z, r24
	}

}
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	1f 91       	pop	r17
    3b0c:	0f 91       	pop	r16
    3b0e:	08 95       	ret

00003b10 <LM35_u16ReadTempSync>:


static float32 LM35_u16ReadTempSync(uint8 LM35_u8ChannelNum)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	27 97       	sbiw	r28, 0x07	; 7
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	8f 83       	std	Y+7, r24	; 0x07
	uint16 LM35Value;
	float32 Temp = 0;
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a0 e0       	ldi	r26, 0x00	; 0
    3b2c:	b0 e0       	ldi	r27, 0x00	; 0
    3b2e:	89 83       	std	Y+1, r24	; 0x01
    3b30:	9a 83       	std	Y+2, r25	; 0x02
    3b32:	ab 83       	std	Y+3, r26	; 0x03
    3b34:	bc 83       	std	Y+4, r27	; 0x04
	ADC_voidStartConversion();
    3b36:	0e 94 28 16 	call	0x2c50	; 0x2c50 <ADC_voidStartConversion>

	LM35Value = ADC_u16ReadSync();
    3b3a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <ADC_u16ReadSync>
    3b3e:	9e 83       	std	Y+6, r25	; 0x06
    3b40:	8d 83       	std	Y+5, r24	; 0x05


	Temp = ( (((float)LM35Value)/(1023.0*2)) * 1000 );
    3b42:	8d 81       	ldd	r24, Y+5	; 0x05
    3b44:	9e 81       	ldd	r25, Y+6	; 0x06
    3b46:	cc 01       	movw	r24, r24
    3b48:	a0 e0       	ldi	r26, 0x00	; 0
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 ec       	ldi	r19, 0xC0	; 192
    3b60:	4f ef       	ldi	r20, 0xFF	; 255
    3b62:	54 e4       	ldi	r21, 0x44	; 68
    3b64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a e7       	ldi	r20, 0x7A	; 122
    3b76:	54 e4       	ldi	r21, 0x44	; 68
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	89 83       	std	Y+1, r24	; 0x01
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	ab 83       	std	Y+3, r26	; 0x03
    3b86:	bc 83       	std	Y+4, r27	; 0x04

	return Temp;
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b8e:	bc 81       	ldd	r27, Y+4	; 0x04

}
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	27 96       	adiw	r28, 0x07	; 7
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <LM35_u16ReadTempAsync>:
static float32 LM35_u16ReadTempAsync(uint8 LM35_u8ChannelNum)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	27 97       	sbiw	r28, 0x07	; 7
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	8f 83       	std	Y+7, r24	; 0x07
	uint16 LM35Value;
	float Temp = 0;
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	a0 e0       	ldi	r26, 0x00	; 0
    3bc2:	b0 e0       	ldi	r27, 0x00	; 0
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    3bc6:	9a 83       	std	Y+2, r25	; 0x02
    3bc8:	ab 83       	std	Y+3, r26	; 0x03
    3bca:	bc 83       	std	Y+4, r27	; 0x04

	ADC_voidStartConversion();
    3bcc:	0e 94 28 16 	call	0x2c50	; 0x2c50 <ADC_voidStartConversion>
	LM35Value = ADC_u16ReadASync();
    3bd0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <ADC_u16ReadASync>
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05

	Temp = ( (((float)LM35Value)/(1023.0*2)) * 1000 );
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	9e 81       	ldd	r25, Y+6	; 0x06
    3bdc:	cc 01       	movw	r24, r24
    3bde:	a0 e0       	ldi	r26, 0x00	; 0
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 ec       	ldi	r19, 0xC0	; 192
    3bf6:	4f ef       	ldi	r20, 0xFF	; 255
    3bf8:	54 e4       	ldi	r21, 0x44	; 68
    3bfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	4a e7       	ldi	r20, 0x7A	; 122
    3c0c:	54 e4       	ldi	r21, 0x44	; 68
    3c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	89 83       	std	Y+1, r24	; 0x01
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	ab 83       	std	Y+3, r26	; 0x03
    3c1c:	bc 83       	std	Y+4, r27	; 0x04

	return Temp;
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	9a 81       	ldd	r25, Y+2	; 0x02
    3c22:	ab 81       	ldd	r26, Y+3	; 0x03
    3c24:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	27 96       	adiw	r28, 0x07	; 7
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	de bf       	out	0x3e, r29	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	08 95       	ret

00003c3c <LED_enuWriteValue>:
#include "LED_cfg.h"
#include "LED_priv.h"


tenuErrorStatus LED_enuWriteValue (uint8 u8LedNumCpy , uint8 u8LedValueCpy  )
{
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <LED_enuWriteValue+0x6>
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <LED_enuWriteValue+0x8>
    3c44:	0f 92       	push	r0
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	8a 83       	std	Y+2, r24	; 0x02
    3c4c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    3c4e:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    3c50:	8a 81       	ldd	r24, Y+2	; 0x02
    3c52:	83 30       	cpi	r24, 0x03	; 3
    3c54:	08 f0       	brcs	.+2      	; 0x3c58 <LED_enuWriteValue+0x1c>
    3c56:	7c c0       	rjmp	.+248    	; 0x3d50 <LED_enuWriteValue+0x114>
	{
		switch(u8LedValueCpy)
    3c58:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5a:	28 2f       	mov	r18, r24
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	3d 83       	std	Y+5, r19	; 0x05
    3c60:	2c 83       	std	Y+4, r18	; 0x04
    3c62:	8c 81       	ldd	r24, Y+4	; 0x04
    3c64:	9d 81       	ldd	r25, Y+5	; 0x05
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	d9 f1       	breq	.+118    	; 0x3ce0 <LED_enuWriteValue+0xa4>
    3c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c6e:	21 30       	cpi	r18, 0x01	; 1
    3c70:	31 05       	cpc	r19, r1
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <LED_enuWriteValue+0x3a>
    3c74:	6a c0       	rjmp	.+212    	; 0x3d4a <LED_enuWriteValue+0x10e>
		{
			case LED_u8ON :
				if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	88 0f       	add	r24, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	fc 01       	movw	r30, r24
    3c82:	ed 54       	subi	r30, 0x4D	; 77
    3c84:	fe 4f       	sbci	r31, 0xFE	; 254
    3c86:	80 81       	ld	r24, Z
    3c88:	8a 3a       	cpi	r24, 0xAA	; 170
    3c8a:	71 f4       	brne	.+28     	; 0x3ca8 <LED_enuWriteValue+0x6c>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	88 2f       	mov	r24, r24
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	fc 01       	movw	r30, r24
    3c98:	ee 54       	subi	r30, 0x4E	; 78
    3c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9c:	80 81       	ld	r24, Z
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3ca4:	89 83       	std	Y+1, r24	; 0x01
    3ca6:	56 c0       	rjmp	.+172    	; 0x3d54 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	88 2f       	mov	r24, r24
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	ed 54       	subi	r30, 0x4D	; 77
    3cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb8:	80 81       	ld	r24, Z
    3cba:	85 35       	cpi	r24, 0x55	; 85
    3cbc:	71 f4       	brne	.+28     	; 0x3cda <LED_enuWriteValue+0x9e>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;			
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	88 2f       	mov	r24, r24
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	88 0f       	add	r24, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	fc 01       	movw	r30, r24
    3cca:	ee 54       	subi	r30, 0x4E	; 78
    3ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cce:	80 81       	ld	r24, Z
    3cd0:	60 e0       	ldi	r22, 0x00	; 0
    3cd2:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	3d c0       	rjmp	.+122    	; 0x3d54 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	89 83       	std	Y+1, r24	; 0x01
    3cde:	3a c0       	rjmp	.+116    	; 0x3d54 <LED_enuWriteValue+0x118>
				}
			break ;
			case LED_u8OFF:
			   if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	88 2f       	mov	r24, r24
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	88 0f       	add	r24, r24
    3ce8:	99 1f       	adc	r25, r25
    3cea:	fc 01       	movw	r30, r24
    3cec:	ed 54       	subi	r30, 0x4D	; 77
    3cee:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8a 3a       	cpi	r24, 0xAA	; 170
    3cf4:	71 f4       	brne	.+28     	; 0x3d12 <LED_enuWriteValue+0xd6>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;
    3cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf8:	88 2f       	mov	r24, r24
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	88 0f       	add	r24, r24
    3cfe:	99 1f       	adc	r25, r25
    3d00:	fc 01       	movw	r30, r24
    3d02:	ee 54       	subi	r30, 0x4E	; 78
    3d04:	fe 4f       	sbci	r31, 0xFE	; 254
    3d06:	80 81       	ld	r24, Z
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    3d10:	21 c0       	rjmp	.+66     	; 0x3d54 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	88 2f       	mov	r24, r24
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	88 0f       	add	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	ed 54       	subi	r30, 0x4D	; 77
    3d20:	fe 4f       	sbci	r31, 0xFE	; 254
    3d22:	80 81       	ld	r24, Z
    3d24:	85 35       	cpi	r24, 0x55	; 85
    3d26:	71 f4       	brne	.+28     	; 0x3d44 <LED_enuWriteValue+0x108>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;			
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	fc 01       	movw	r30, r24
    3d34:	ee 54       	subi	r30, 0x4E	; 78
    3d36:	fe 4f       	sbci	r31, 0xFE	; 254
    3d38:	80 81       	ld	r24, Z
    3d3a:	61 e0       	ldi	r22, 0x01	; 1
    3d3c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    3d40:	89 83       	std	Y+1, r24	; 0x01
    3d42:	08 c0       	rjmp	.+16     	; 0x3d54 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    3d44:	84 e0       	ldi	r24, 0x04	; 4
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	05 c0       	rjmp	.+10     	; 0x3d54 <LED_enuWriteValue+0x118>
				}					
			break ;
			default :
				enuReturnStatLoc =E_NOK_PARAM_OUT_OF_RANGE ;
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <LED_enuWriteValue+0x118>
            break ;				
		}
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <LED_enuToggle>:

tenuErrorStatus LED_enuToggle (uint8 u8LedNumCpy )
{
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	00 d0       	rcall	.+0      	; 0x3d6c <LED_enuToggle+0x6>
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    3d72:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	83 30       	cpi	r24, 0x03	; 3
    3d78:	68 f4       	brcc	.+26     	; 0x3d94 <LED_enuToggle+0x2e>
	{
		enuReturnStatLoc = DIO_enuTogglePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap);
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	88 2f       	mov	r24, r24
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	88 0f       	add	r24, r24
    3d82:	99 1f       	adc	r25, r25
    3d84:	fc 01       	movw	r30, r24
    3d86:	ee 54       	subi	r30, 0x4E	; 78
    3d88:	fe 4f       	sbci	r31, 0xFE	; 254
    3d8a:	80 81       	ld	r24, Z
    3d8c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <DIO_enuTogglePin>
    3d90:	89 83       	std	Y+1, r24	; 0x01
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <LED_enuToggle+0x32>
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <LED_enuAllOff>:


tenuErrorStatus LED_enuAllOff (void)
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <LED_enuAllOff+0x6>
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntCpy;
	tenuErrorStatus enuReturnStatLoc = E_OK ;
    3dae:	19 82       	std	Y+1, r1	; 0x01
	for(u8CntCpy = 0 ; u8CntCpy <LED_MAX_NUM ; u8CntCpy++)
    3db0:	1a 82       	std	Y+2, r1	; 0x02
    3db2:	07 c0       	rjmp	.+14     	; 0x3dc2 <LED_enuAllOff+0x1e>
	{
		LED_enuWriteValue( u8CntCpy , LED_u8OFF);
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <LED_enuWriteValue>

tenuErrorStatus LED_enuAllOff (void)
{
	uint8 u8CntCpy;
	tenuErrorStatus enuReturnStatLoc = E_OK ;
	for(u8CntCpy = 0 ; u8CntCpy <LED_MAX_NUM ; u8CntCpy++)
    3dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbe:	8f 5f       	subi	r24, 0xFF	; 255
    3dc0:	8a 83       	std	Y+2, r24	; 0x02
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	83 30       	cpi	r24, 0x03	; 3
    3dc6:	b0 f3       	brcs	.-20     	; 0x3db4 <LED_enuAllOff+0x10>
	{
		LED_enuWriteValue( u8CntCpy , LED_u8OFF);
	}
	return enuReturnStatLoc;
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	08 95       	ret

00003dd4 <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	c6 5c       	subi	r28, 0xC6	; 198
    3de2:	d0 40       	sbci	r29, 0x00	; 0
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    3dee:	fe 01       	movw	r30, r28
    3df0:	ea 53       	subi	r30, 0x3A	; 58
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	10 82       	st	Z, r1
    3df6:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <LCD_voidInit+0x15f4>
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	ef 53       	subi	r30, 0x3F	; 63
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	a0 ef       	ldi	r26, 0xF0	; 240
    3e06:	b1 e4       	ldi	r27, 0x41	; 65
    3e08:	80 83       	st	Z, r24
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	a2 83       	std	Z+2, r26	; 0x02
    3e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e10:	8e 01       	movw	r16, r28
    3e12:	03 54       	subi	r16, 0x43	; 67
    3e14:	1f 4f       	sbci	r17, 0xFF	; 255
    3e16:	fe 01       	movw	r30, r28
    3e18:	ef 53       	subi	r30, 0x3F	; 63
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	4a ef       	ldi	r20, 0xFA	; 250
    3e2a:	54 e4       	ldi	r21, 0x44	; 68
    3e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	f8 01       	movw	r30, r16
    3e36:	80 83       	st	Z, r24
    3e38:	91 83       	std	Z+1, r25	; 0x01
    3e3a:	a2 83       	std	Z+2, r26	; 0x02
    3e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e3 54       	subi	r30, 0x43	; 67
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e58:	88 23       	and	r24, r24
    3e5a:	44 f4       	brge	.+16     	; 0x3e6c <LCD_voidInit+0x98>
		__ticks = 1;
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e5 54       	subi	r30, 0x45	; 69
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24
    3e6a:	64 c0       	rjmp	.+200    	; 0x3f34 <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	e3 54       	subi	r30, 0x43	; 67
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	60 81       	ld	r22, Z
    3e74:	71 81       	ldd	r23, Z+1	; 0x01
    3e76:	82 81       	ldd	r24, Z+2	; 0x02
    3e78:	93 81       	ldd	r25, Z+3	; 0x03
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	3f ef       	ldi	r19, 0xFF	; 255
    3e7e:	4f e7       	ldi	r20, 0x7F	; 127
    3e80:	57 e4       	ldi	r21, 0x47	; 71
    3e82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e86:	18 16       	cp	r1, r24
    3e88:	0c f0       	brlt	.+2      	; 0x3e8c <LCD_voidInit+0xb8>
    3e8a:	43 c0       	rjmp	.+134    	; 0x3f12 <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	ef 53       	subi	r30, 0x3F	; 63
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e2       	ldi	r20, 0x20	; 32
    3ea0:	51 e4       	ldi	r21, 0x41	; 65
    3ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	8e 01       	movw	r16, r28
    3eac:	05 54       	subi	r16, 0x45	; 69
    3eae:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
    3ec2:	1f c0       	rjmp	.+62     	; 0x3f02 <LCD_voidInit+0x12e>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e7 54       	subi	r30, 0x47	; 71
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	88 ec       	ldi	r24, 0xC8	; 200
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	e7 54       	subi	r30, 0x47	; 71
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	80 81       	ld	r24, Z
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	f1 f7       	brne	.-4      	; 0x3edc <LCD_voidInit+0x108>
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e7 54       	subi	r30, 0x47	; 71
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eea:	de 01       	movw	r26, r28
    3eec:	a5 54       	subi	r26, 0x45	; 69
    3eee:	bf 4f       	sbci	r27, 0xFF	; 255
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e5 54       	subi	r30, 0x45	; 69
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	11 96       	adiw	r26, 0x01	; 1
    3efe:	9c 93       	st	X, r25
    3f00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f02:	fe 01       	movw	r30, r28
    3f04:	e5 54       	subi	r30, 0x45	; 69
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	80 81       	ld	r24, Z
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	d1 f6       	brne	.-76     	; 0x3ec4 <LCD_voidInit+0xf0>
    3f10:	28 c0       	rjmp	.+80     	; 0x3f62 <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f12:	8e 01       	movw	r16, r28
    3f14:	05 54       	subi	r16, 0x45	; 69
    3f16:	1f 4f       	sbci	r17, 0xFF	; 255
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e3 54       	subi	r30, 0x43	; 67
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	60 81       	ld	r22, Z
    3f20:	71 81       	ldd	r23, Z+1	; 0x01
    3f22:	82 81       	ldd	r24, Z+2	; 0x02
    3f24:	93 81       	ldd	r25, Z+3	; 0x03
    3f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	f8 01       	movw	r30, r16
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	80 83       	st	Z, r24
    3f34:	de 01       	movw	r26, r28
    3f36:	a9 54       	subi	r26, 0x49	; 73
    3f38:	bf 4f       	sbci	r27, 0xFF	; 255
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e5 54       	subi	r30, 0x45	; 69
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	80 81       	ld	r24, Z
    3f42:	91 81       	ldd	r25, Z+1	; 0x01
    3f44:	11 96       	adiw	r26, 0x01	; 1
    3f46:	9c 93       	st	X, r25
    3f48:	8e 93       	st	-X, r24
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e9 54       	subi	r30, 0x49	; 73
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 81       	ld	r24, Z
    3f52:	91 81       	ldd	r25, Z+1	; 0x01
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <LCD_voidInit+0x180>
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e9 54       	subi	r30, 0x49	; 73
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    3f62:	fe 01       	movw	r30, r28
    3f64:	ea 53       	subi	r30, 0x3A	; 58
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	28 2f       	mov	r18, r24
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	c9 01       	movw	r24, r18
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	82 0f       	add	r24, r18
    3f76:	93 1f       	adc	r25, r19
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	88 0f       	add	r24, r24
    3f7e:	99 1f       	adc	r25, r25
    3f80:	fc 01       	movw	r30, r24
    3f82:	e8 54       	subi	r30, 0x48	; 72
    3f84:	fe 4f       	sbci	r31, 0xFE	; 254
    3f86:	80 81       	ld	r24, Z
    3f88:	82 95       	swap	r24
    3f8a:	86 95       	lsr	r24
    3f8c:	87 70       	andi	r24, 0x07	; 7
    3f8e:	81 70       	andi	r24, 0x01	; 1
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <LCD_voidInit+0x1c2>
    3f94:	bf c3       	rjmp	.+1918   	; 0x4714 <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
    3f96:	fe 01       	movw	r30, r28
    3f98:	ea 53       	subi	r30, 0x3A	; 58
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	28 2f       	mov	r18, r24
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	c9 01       	movw	r24, r18
    3fa4:	88 0f       	add	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	82 0f       	add	r24, r18
    3faa:	93 1f       	adc	r25, r19
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	e8 54       	subi	r30, 0x48	; 72
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	80 81       	ld	r24, Z
    3fbc:	81 70       	andi	r24, 0x01	; 1
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	88 0f       	add	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	88 0f       	add	r24, r24
    3fcc:	99 1f       	adc	r25, r25
    3fce:	48 2f       	mov	r20, r24
    3fd0:	40 63       	ori	r20, 0x30	; 48
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ea 53       	subi	r30, 0x3A	; 58
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	80 81       	ld	r24, Z
    3fda:	28 2f       	mov	r18, r24
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	c9 01       	movw	r24, r18
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	82 0f       	add	r24, r18
    3fe6:	93 1f       	adc	r25, r19
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	88 0f       	add	r24, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	e8 54       	subi	r30, 0x48	; 72
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	80 81       	ld	r24, Z
    3ff8:	86 95       	lsr	r24
    3ffa:	81 70       	andi	r24, 0x01	; 1
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	84 2b       	or	r24, r20
    400a:	fe 01       	movw	r30, r28
    400c:	eb 53       	subi	r30, 0x3B	; 59
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    4012:	fe 01       	movw	r30, r28
    4014:	ea 53       	subi	r30, 0x3A	; 58
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	de 01       	movw	r26, r28
    401a:	ab 53       	subi	r26, 0x3B	; 59
    401c:	bf 4f       	sbci	r27, 0xFF	; 255
    401e:	80 81       	ld	r24, Z
    4020:	6c 91       	ld	r22, X
    4022:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4026:	fe 01       	movw	r30, r28
    4028:	ed 54       	subi	r30, 0x4D	; 77
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	a0 e8       	ldi	r26, 0x80	; 128
    4032:	bf e3       	ldi	r27, 0x3F	; 63
    4034:	80 83       	st	Z, r24
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	a2 83       	std	Z+2, r26	; 0x02
    403a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403c:	8e 01       	movw	r16, r28
    403e:	01 55       	subi	r16, 0x51	; 81
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	fe 01       	movw	r30, r28
    4044:	ed 54       	subi	r30, 0x4D	; 77
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	60 81       	ld	r22, Z
    404a:	71 81       	ldd	r23, Z+1	; 0x01
    404c:	82 81       	ldd	r24, Z+2	; 0x02
    404e:	93 81       	ldd	r25, Z+3	; 0x03
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	4a ef       	ldi	r20, 0xFA	; 250
    4056:	54 e4       	ldi	r21, 0x44	; 68
    4058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	80 83       	st	Z, r24
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	a2 83       	std	Z+2, r26	; 0x02
    4068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    406a:	fe 01       	movw	r30, r28
    406c:	e1 55       	subi	r30, 0x51	; 81
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e8       	ldi	r20, 0x80	; 128
    407e:	5f e3       	ldi	r21, 0x3F	; 63
    4080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4084:	88 23       	and	r24, r24
    4086:	44 f4       	brge	.+16     	; 0x4098 <LCD_voidInit+0x2c4>
		__ticks = 1;
    4088:	fe 01       	movw	r30, r28
    408a:	e3 55       	subi	r30, 0x53	; 83
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	80 83       	st	Z, r24
    4096:	64 c0       	rjmp	.+200    	; 0x4160 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    4098:	fe 01       	movw	r30, r28
    409a:	e1 55       	subi	r30, 0x51	; 81
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	60 81       	ld	r22, Z
    40a0:	71 81       	ldd	r23, Z+1	; 0x01
    40a2:	82 81       	ldd	r24, Z+2	; 0x02
    40a4:	93 81       	ldd	r25, Z+3	; 0x03
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	3f ef       	ldi	r19, 0xFF	; 255
    40aa:	4f e7       	ldi	r20, 0x7F	; 127
    40ac:	57 e4       	ldi	r21, 0x47	; 71
    40ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b2:	18 16       	cp	r1, r24
    40b4:	0c f0       	brlt	.+2      	; 0x40b8 <LCD_voidInit+0x2e4>
    40b6:	43 c0       	rjmp	.+134    	; 0x413e <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 54       	subi	r30, 0x4D	; 77
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 e2       	ldi	r20, 0x20	; 32
    40cc:	51 e4       	ldi	r21, 0x41	; 65
    40ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8e 01       	movw	r16, r28
    40d8:	03 55       	subi	r16, 0x53	; 83
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	bc 01       	movw	r22, r24
    40de:	cd 01       	movw	r24, r26
    40e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	f8 01       	movw	r30, r16
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	80 83       	st	Z, r24
    40ee:	1f c0       	rjmp	.+62     	; 0x412e <LCD_voidInit+0x35a>
    40f0:	fe 01       	movw	r30, r28
    40f2:	e5 55       	subi	r30, 0x55	; 85
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	88 ec       	ldi	r24, 0xC8	; 200
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	fe 01       	movw	r30, r28
    4100:	e5 55       	subi	r30, 0x55	; 85
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	f1 f7       	brne	.-4      	; 0x4108 <LCD_voidInit+0x334>
    410c:	fe 01       	movw	r30, r28
    410e:	e5 55       	subi	r30, 0x55	; 85
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	91 83       	std	Z+1, r25	; 0x01
    4114:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4116:	de 01       	movw	r26, r28
    4118:	a3 55       	subi	r26, 0x53	; 83
    411a:	bf 4f       	sbci	r27, 0xFF	; 255
    411c:	fe 01       	movw	r30, r28
    411e:	e3 55       	subi	r30, 0x53	; 83
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	11 96       	adiw	r26, 0x01	; 1
    412a:	9c 93       	st	X, r25
    412c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412e:	fe 01       	movw	r30, r28
    4130:	e3 55       	subi	r30, 0x53	; 83
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	d1 f6       	brne	.-76     	; 0x40f0 <LCD_voidInit+0x31c>
    413c:	27 c0       	rjmp	.+78     	; 0x418c <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413e:	8e 01       	movw	r16, r28
    4140:	03 55       	subi	r16, 0x53	; 83
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	fe 01       	movw	r30, r28
    4146:	e1 55       	subi	r30, 0x51	; 81
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	f8 01       	movw	r30, r16
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24
    4160:	de 01       	movw	r26, r28
    4162:	a7 55       	subi	r26, 0x57	; 87
    4164:	bf 4f       	sbci	r27, 0xFF	; 255
    4166:	fe 01       	movw	r30, r28
    4168:	e3 55       	subi	r30, 0x53	; 83
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	8d 93       	st	X+, r24
    4172:	9c 93       	st	X, r25
    4174:	fe 01       	movw	r30, r28
    4176:	e7 55       	subi	r30, 0x57	; 87
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <LCD_voidInit+0x3aa>
    4182:	fe 01       	movw	r30, r28
    4184:	e7 55       	subi	r30, 0x57	; 87
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
    418c:	fe 01       	movw	r30, r28
    418e:	ea 53       	subi	r30, 0x3A	; 58
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	80 81       	ld	r24, Z
    4194:	28 2f       	mov	r18, r24
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	c9 01       	movw	r24, r18
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	82 0f       	add	r24, r18
    41a0:	93 1f       	adc	r25, r19
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	88 0f       	add	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	fc 01       	movw	r30, r24
    41ac:	e8 54       	subi	r30, 0x48	; 72
    41ae:	fe 4f       	sbci	r31, 0xFE	; 254
    41b0:	80 81       	ld	r24, Z
    41b2:	86 95       	lsr	r24
    41b4:	86 95       	lsr	r24
    41b6:	81 70       	andi	r24, 0x01	; 1
    41b8:	88 2f       	mov	r24, r24
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	88 0f       	add	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	88 0f       	add	r24, r24
    41c2:	99 1f       	adc	r25, r25
    41c4:	48 2f       	mov	r20, r24
    41c6:	48 60       	ori	r20, 0x08	; 8
    41c8:	fe 01       	movw	r30, r28
    41ca:	ea 53       	subi	r30, 0x3A	; 58
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	28 2f       	mov	r18, r24
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	c9 01       	movw	r24, r18
    41d6:	88 0f       	add	r24, r24
    41d8:	99 1f       	adc	r25, r25
    41da:	82 0f       	add	r24, r18
    41dc:	93 1f       	adc	r25, r19
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	88 0f       	add	r24, r24
    41e4:	99 1f       	adc	r25, r25
    41e6:	fc 01       	movw	r30, r24
    41e8:	e8 54       	subi	r30, 0x48	; 72
    41ea:	fe 4f       	sbci	r31, 0xFE	; 254
    41ec:	80 81       	ld	r24, Z
    41ee:	86 95       	lsr	r24
    41f0:	86 95       	lsr	r24
    41f2:	86 95       	lsr	r24
    41f4:	81 70       	andi	r24, 0x01	; 1
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	88 0f       	add	r24, r24
    41fc:	99 1f       	adc	r25, r25
    41fe:	48 2b       	or	r20, r24
    4200:	fe 01       	movw	r30, r28
    4202:	ea 53       	subi	r30, 0x3A	; 58
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	80 81       	ld	r24, Z
    4208:	28 2f       	mov	r18, r24
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	c9 01       	movw	r24, r18
    420e:	88 0f       	add	r24, r24
    4210:	99 1f       	adc	r25, r25
    4212:	82 0f       	add	r24, r18
    4214:	93 1f       	adc	r25, r19
    4216:	88 0f       	add	r24, r24
    4218:	99 1f       	adc	r25, r25
    421a:	88 0f       	add	r24, r24
    421c:	99 1f       	adc	r25, r25
    421e:	fc 01       	movw	r30, r24
    4220:	e8 54       	subi	r30, 0x48	; 72
    4222:	fe 4f       	sbci	r31, 0xFE	; 254
    4224:	80 81       	ld	r24, Z
    4226:	82 95       	swap	r24
    4228:	8f 70       	andi	r24, 0x0F	; 15
    422a:	81 70       	andi	r24, 0x01	; 1
    422c:	84 2b       	or	r24, r20
    422e:	fe 01       	movw	r30, r28
    4230:	eb 53       	subi	r30, 0x3B	; 59
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	80 83       	st	Z, r24
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    4236:	fe 01       	movw	r30, r28
    4238:	ea 53       	subi	r30, 0x3A	; 58
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	de 01       	movw	r26, r28
    423e:	ab 53       	subi	r26, 0x3B	; 59
    4240:	bf 4f       	sbci	r27, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	6c 91       	ld	r22, X
    4246:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    424a:	fe 01       	movw	r30, r28
    424c:	eb 55       	subi	r30, 0x5B	; 91
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	a0 e8       	ldi	r26, 0x80	; 128
    4256:	bf e3       	ldi	r27, 0x3F	; 63
    4258:	80 83       	st	Z, r24
    425a:	91 83       	std	Z+1, r25	; 0x01
    425c:	a2 83       	std	Z+2, r26	; 0x02
    425e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4260:	8e 01       	movw	r16, r28
    4262:	0f 55       	subi	r16, 0x5F	; 95
    4264:	1f 4f       	sbci	r17, 0xFF	; 255
    4266:	fe 01       	movw	r30, r28
    4268:	eb 55       	subi	r30, 0x5B	; 91
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	60 81       	ld	r22, Z
    426e:	71 81       	ldd	r23, Z+1	; 0x01
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	93 81       	ldd	r25, Z+3	; 0x03
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a ef       	ldi	r20, 0xFA	; 250
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	f8 01       	movw	r30, r16
    4286:	80 83       	st	Z, r24
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	a2 83       	std	Z+2, r26	; 0x02
    428c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    428e:	fe 01       	movw	r30, r28
    4290:	ef 55       	subi	r30, 0x5F	; 95
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	60 81       	ld	r22, Z
    4296:	71 81       	ldd	r23, Z+1	; 0x01
    4298:	82 81       	ldd	r24, Z+2	; 0x02
    429a:	93 81       	ldd	r25, Z+3	; 0x03
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	40 e8       	ldi	r20, 0x80	; 128
    42a2:	5f e3       	ldi	r21, 0x3F	; 63
    42a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a8:	88 23       	and	r24, r24
    42aa:	44 f4       	brge	.+16     	; 0x42bc <LCD_voidInit+0x4e8>
		__ticks = 1;
    42ac:	fe 01       	movw	r30, r28
    42ae:	e1 56       	subi	r30, 0x61	; 97
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	80 83       	st	Z, r24
    42ba:	64 c0       	rjmp	.+200    	; 0x4384 <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    42bc:	fe 01       	movw	r30, r28
    42be:	ef 55       	subi	r30, 0x5F	; 95
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	60 81       	ld	r22, Z
    42c4:	71 81       	ldd	r23, Z+1	; 0x01
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	3f ef       	ldi	r19, 0xFF	; 255
    42ce:	4f e7       	ldi	r20, 0x7F	; 127
    42d0:	57 e4       	ldi	r21, 0x47	; 71
    42d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42d6:	18 16       	cp	r1, r24
    42d8:	0c f0       	brlt	.+2      	; 0x42dc <LCD_voidInit+0x508>
    42da:	43 c0       	rjmp	.+134    	; 0x4362 <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42dc:	fe 01       	movw	r30, r28
    42de:	eb 55       	subi	r30, 0x5B	; 91
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	60 81       	ld	r22, Z
    42e4:	71 81       	ldd	r23, Z+1	; 0x01
    42e6:	82 81       	ldd	r24, Z+2	; 0x02
    42e8:	93 81       	ldd	r25, Z+3	; 0x03
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e2       	ldi	r20, 0x20	; 32
    42f0:	51 e4       	ldi	r21, 0x41	; 65
    42f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8e 01       	movw	r16, r28
    42fc:	01 56       	subi	r16, 0x61	; 97
    42fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4300:	bc 01       	movw	r22, r24
    4302:	cd 01       	movw	r24, r26
    4304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	f8 01       	movw	r30, r16
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	80 83       	st	Z, r24
    4312:	1f c0       	rjmp	.+62     	; 0x4352 <LCD_voidInit+0x57e>
    4314:	fe 01       	movw	r30, r28
    4316:	e3 56       	subi	r30, 0x63	; 99
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	88 ec       	ldi	r24, 0xC8	; 200
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
    4322:	fe 01       	movw	r30, r28
    4324:	e3 56       	subi	r30, 0x63	; 99
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	91 81       	ldd	r25, Z+1	; 0x01
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <LCD_voidInit+0x558>
    4330:	fe 01       	movw	r30, r28
    4332:	e3 56       	subi	r30, 0x63	; 99
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    433a:	de 01       	movw	r26, r28
    433c:	a1 56       	subi	r26, 0x61	; 97
    433e:	bf 4f       	sbci	r27, 0xFF	; 255
    4340:	fe 01       	movw	r30, r28
    4342:	e1 56       	subi	r30, 0x61	; 97
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 81       	ld	r24, Z
    4348:	91 81       	ldd	r25, Z+1	; 0x01
    434a:	01 97       	sbiw	r24, 0x01	; 1
    434c:	11 96       	adiw	r26, 0x01	; 1
    434e:	9c 93       	st	X, r25
    4350:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4352:	fe 01       	movw	r30, r28
    4354:	e1 56       	subi	r30, 0x61	; 97
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	d1 f6       	brne	.-76     	; 0x4314 <LCD_voidInit+0x540>
    4360:	27 c0       	rjmp	.+78     	; 0x43b0 <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4362:	8e 01       	movw	r16, r28
    4364:	01 56       	subi	r16, 0x61	; 97
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	fe 01       	movw	r30, r28
    436a:	ef 55       	subi	r30, 0x5F	; 95
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	60 81       	ld	r22, Z
    4370:	71 81       	ldd	r23, Z+1	; 0x01
    4372:	82 81       	ldd	r24, Z+2	; 0x02
    4374:	93 81       	ldd	r25, Z+3	; 0x03
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	f8 01       	movw	r30, r16
    4380:	91 83       	std	Z+1, r25	; 0x01
    4382:	80 83       	st	Z, r24
    4384:	de 01       	movw	r26, r28
    4386:	a5 56       	subi	r26, 0x65	; 101
    4388:	bf 4f       	sbci	r27, 0xFF	; 255
    438a:	fe 01       	movw	r30, r28
    438c:	e1 56       	subi	r30, 0x61	; 97
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	80 81       	ld	r24, Z
    4392:	91 81       	ldd	r25, Z+1	; 0x01
    4394:	8d 93       	st	X+, r24
    4396:	9c 93       	st	X, r25
    4398:	fe 01       	movw	r30, r28
    439a:	e5 56       	subi	r30, 0x65	; 101
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	80 81       	ld	r24, Z
    43a0:	91 81       	ldd	r25, Z+1	; 0x01
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <LCD_voidInit+0x5ce>
    43a6:	fe 01       	movw	r30, r28
    43a8:	e5 56       	subi	r30, 0x65	; 101
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
    43b0:	fe 01       	movw	r30, r28
    43b2:	ea 53       	subi	r30, 0x3A	; 58
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	80 81       	ld	r24, Z
    43b8:	61 e0       	ldi	r22, 0x01	; 1
    43ba:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    43be:	fe 01       	movw	r30, r28
    43c0:	e9 56       	subi	r30, 0x69	; 105
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	a0 e0       	ldi	r26, 0x00	; 0
    43ca:	b0 e4       	ldi	r27, 0x40	; 64
    43cc:	80 83       	st	Z, r24
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	a2 83       	std	Z+2, r26	; 0x02
    43d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d4:	8e 01       	movw	r16, r28
    43d6:	0d 56       	subi	r16, 0x6D	; 109
    43d8:	1f 4f       	sbci	r17, 0xFF	; 255
    43da:	fe 01       	movw	r30, r28
    43dc:	e9 56       	subi	r30, 0x69	; 105
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	4a ef       	ldi	r20, 0xFA	; 250
    43ee:	54 e4       	ldi	r21, 0x44	; 68
    43f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	f8 01       	movw	r30, r16
    43fa:	80 83       	st	Z, r24
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	a2 83       	std	Z+2, r26	; 0x02
    4400:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4402:	fe 01       	movw	r30, r28
    4404:	ed 56       	subi	r30, 0x6D	; 109
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	5f e3       	ldi	r21, 0x3F	; 63
    4418:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    441c:	88 23       	and	r24, r24
    441e:	44 f4       	brge	.+16     	; 0x4430 <LCD_voidInit+0x65c>
		__ticks = 1;
    4420:	fe 01       	movw	r30, r28
    4422:	ef 56       	subi	r30, 0x6F	; 111
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	80 83       	st	Z, r24
    442e:	64 c0       	rjmp	.+200    	; 0x44f8 <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    4430:	fe 01       	movw	r30, r28
    4432:	ed 56       	subi	r30, 0x6D	; 109
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	60 81       	ld	r22, Z
    4438:	71 81       	ldd	r23, Z+1	; 0x01
    443a:	82 81       	ldd	r24, Z+2	; 0x02
    443c:	93 81       	ldd	r25, Z+3	; 0x03
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	3f ef       	ldi	r19, 0xFF	; 255
    4442:	4f e7       	ldi	r20, 0x7F	; 127
    4444:	57 e4       	ldi	r21, 0x47	; 71
    4446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    444a:	18 16       	cp	r1, r24
    444c:	0c f0       	brlt	.+2      	; 0x4450 <LCD_voidInit+0x67c>
    444e:	43 c0       	rjmp	.+134    	; 0x44d6 <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4450:	fe 01       	movw	r30, r28
    4452:	e9 56       	subi	r30, 0x69	; 105
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	60 81       	ld	r22, Z
    4458:	71 81       	ldd	r23, Z+1	; 0x01
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	93 81       	ldd	r25, Z+3	; 0x03
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e2       	ldi	r20, 0x20	; 32
    4464:	51 e4       	ldi	r21, 0x41	; 65
    4466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	8e 01       	movw	r16, r28
    4470:	0f 56       	subi	r16, 0x6F	; 111
    4472:	1f 4f       	sbci	r17, 0xFF	; 255
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447c:	dc 01       	movw	r26, r24
    447e:	cb 01       	movw	r24, r22
    4480:	f8 01       	movw	r30, r16
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	1f c0       	rjmp	.+62     	; 0x44c6 <LCD_voidInit+0x6f2>
    4488:	fe 01       	movw	r30, r28
    448a:	e1 57       	subi	r30, 0x71	; 113
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	88 ec       	ldi	r24, 0xC8	; 200
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
    4496:	fe 01       	movw	r30, r28
    4498:	e1 57       	subi	r30, 0x71	; 113
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <LCD_voidInit+0x6cc>
    44a4:	fe 01       	movw	r30, r28
    44a6:	e1 57       	subi	r30, 0x71	; 113
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ae:	de 01       	movw	r26, r28
    44b0:	af 56       	subi	r26, 0x6F	; 111
    44b2:	bf 4f       	sbci	r27, 0xFF	; 255
    44b4:	fe 01       	movw	r30, r28
    44b6:	ef 56       	subi	r30, 0x6F	; 111
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	80 81       	ld	r24, Z
    44bc:	91 81       	ldd	r25, Z+1	; 0x01
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	11 96       	adiw	r26, 0x01	; 1
    44c2:	9c 93       	st	X, r25
    44c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c6:	fe 01       	movw	r30, r28
    44c8:	ef 56       	subi	r30, 0x6F	; 111
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	d1 f6       	brne	.-76     	; 0x4488 <LCD_voidInit+0x6b4>
    44d4:	27 c0       	rjmp	.+78     	; 0x4524 <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d6:	8e 01       	movw	r16, r28
    44d8:	0f 56       	subi	r16, 0x6F	; 111
    44da:	1f 4f       	sbci	r17, 0xFF	; 255
    44dc:	fe 01       	movw	r30, r28
    44de:	ed 56       	subi	r30, 0x6D	; 109
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	60 81       	ld	r22, Z
    44e4:	71 81       	ldd	r23, Z+1	; 0x01
    44e6:	82 81       	ldd	r24, Z+2	; 0x02
    44e8:	93 81       	ldd	r25, Z+3	; 0x03
    44ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	f8 01       	movw	r30, r16
    44f4:	91 83       	std	Z+1, r25	; 0x01
    44f6:	80 83       	st	Z, r24
    44f8:	de 01       	movw	r26, r28
    44fa:	a3 57       	subi	r26, 0x73	; 115
    44fc:	bf 4f       	sbci	r27, 0xFF	; 255
    44fe:	fe 01       	movw	r30, r28
    4500:	ef 56       	subi	r30, 0x6F	; 111
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	80 81       	ld	r24, Z
    4506:	91 81       	ldd	r25, Z+1	; 0x01
    4508:	8d 93       	st	X+, r24
    450a:	9c 93       	st	X, r25
    450c:	fe 01       	movw	r30, r28
    450e:	e3 57       	subi	r30, 0x73	; 115
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	f1 f7       	brne	.-4      	; 0x4516 <LCD_voidInit+0x742>
    451a:	fe 01       	movw	r30, r28
    451c:	e3 57       	subi	r30, 0x73	; 115
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	91 83       	std	Z+1, r25	; 0x01
    4522:	80 83       	st	Z, r24
		    _delay_ms(2);
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
    4524:	fe 01       	movw	r30, r28
    4526:	ea 53       	subi	r30, 0x3A	; 58
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	80 81       	ld	r24, Z
    452c:	28 2f       	mov	r18, r24
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	c9 01       	movw	r24, r18
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	82 0f       	add	r24, r18
    4538:	93 1f       	adc	r25, r19
    453a:	88 0f       	add	r24, r24
    453c:	99 1f       	adc	r25, r25
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	fc 01       	movw	r30, r24
    4544:	e8 54       	subi	r30, 0x48	; 72
    4546:	fe 4f       	sbci	r31, 0xFE	; 254
    4548:	80 81       	ld	r24, Z
    454a:	82 95       	swap	r24
    454c:	86 95       	lsr	r24
    454e:	86 95       	lsr	r24
    4550:	83 70       	andi	r24, 0x03	; 3
    4552:	81 70       	andi	r24, 0x01	; 1
    4554:	88 2f       	mov	r24, r24
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	48 2f       	mov	r20, r24
    455e:	44 60       	ori	r20, 0x04	; 4
    4560:	fe 01       	movw	r30, r28
    4562:	ea 53       	subi	r30, 0x3A	; 58
    4564:	ff 4f       	sbci	r31, 0xFF	; 255
    4566:	80 81       	ld	r24, Z
    4568:	28 2f       	mov	r18, r24
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	c9 01       	movw	r24, r18
    456e:	88 0f       	add	r24, r24
    4570:	99 1f       	adc	r25, r25
    4572:	82 0f       	add	r24, r18
    4574:	93 1f       	adc	r25, r19
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	fc 01       	movw	r30, r24
    4580:	e8 54       	subi	r30, 0x48	; 72
    4582:	fe 4f       	sbci	r31, 0xFE	; 254
    4584:	80 81       	ld	r24, Z
    4586:	88 1f       	adc	r24, r24
    4588:	88 27       	eor	r24, r24
    458a:	88 1f       	adc	r24, r24
    458c:	84 2b       	or	r24, r20
    458e:	fe 01       	movw	r30, r28
    4590:	eb 53       	subi	r30, 0x3B	; 59
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    4596:	fe 01       	movw	r30, r28
    4598:	ea 53       	subi	r30, 0x3A	; 58
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	de 01       	movw	r26, r28
    459e:	ab 53       	subi	r26, 0x3B	; 59
    45a0:	bf 4f       	sbci	r27, 0xFF	; 255
    45a2:	80 81       	ld	r24, Z
    45a4:	6c 91       	ld	r22, X
    45a6:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    45aa:	fe 01       	movw	r30, r28
    45ac:	e7 57       	subi	r30, 0x77	; 119
    45ae:	ff 4f       	sbci	r31, 0xFF	; 255
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	a0 e0       	ldi	r26, 0x00	; 0
    45b6:	b0 e4       	ldi	r27, 0x40	; 64
    45b8:	80 83       	st	Z, r24
    45ba:	91 83       	std	Z+1, r25	; 0x01
    45bc:	a2 83       	std	Z+2, r26	; 0x02
    45be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c0:	8e 01       	movw	r16, r28
    45c2:	0b 57       	subi	r16, 0x7B	; 123
    45c4:	1f 4f       	sbci	r17, 0xFF	; 255
    45c6:	fe 01       	movw	r30, r28
    45c8:	e7 57       	subi	r30, 0x77	; 119
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	60 81       	ld	r22, Z
    45ce:	71 81       	ldd	r23, Z+1	; 0x01
    45d0:	82 81       	ldd	r24, Z+2	; 0x02
    45d2:	93 81       	ldd	r25, Z+3	; 0x03
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	4a ef       	ldi	r20, 0xFA	; 250
    45da:	54 e4       	ldi	r21, 0x44	; 68
    45dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	f8 01       	movw	r30, r16
    45e6:	80 83       	st	Z, r24
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	a2 83       	std	Z+2, r26	; 0x02
    45ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ee:	fe 01       	movw	r30, r28
    45f0:	eb 57       	subi	r30, 0x7B	; 123
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	60 81       	ld	r22, Z
    45f6:	71 81       	ldd	r23, Z+1	; 0x01
    45f8:	82 81       	ldd	r24, Z+2	; 0x02
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e8       	ldi	r20, 0x80	; 128
    4602:	5f e3       	ldi	r21, 0x3F	; 63
    4604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4608:	88 23       	and	r24, r24
    460a:	44 f4       	brge	.+16     	; 0x461c <LCD_voidInit+0x848>
		__ticks = 1;
    460c:	fe 01       	movw	r30, r28
    460e:	ed 57       	subi	r30, 0x7D	; 125
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	80 83       	st	Z, r24
    461a:	64 c0       	rjmp	.+200    	; 0x46e4 <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    461c:	fe 01       	movw	r30, r28
    461e:	eb 57       	subi	r30, 0x7B	; 123
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	60 81       	ld	r22, Z
    4624:	71 81       	ldd	r23, Z+1	; 0x01
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	93 81       	ldd	r25, Z+3	; 0x03
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	3f ef       	ldi	r19, 0xFF	; 255
    462e:	4f e7       	ldi	r20, 0x7F	; 127
    4630:	57 e4       	ldi	r21, 0x47	; 71
    4632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4636:	18 16       	cp	r1, r24
    4638:	0c f0       	brlt	.+2      	; 0x463c <LCD_voidInit+0x868>
    463a:	43 c0       	rjmp	.+134    	; 0x46c2 <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    463c:	fe 01       	movw	r30, r28
    463e:	e7 57       	subi	r30, 0x77	; 119
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	60 81       	ld	r22, Z
    4644:	71 81       	ldd	r23, Z+1	; 0x01
    4646:	82 81       	ldd	r24, Z+2	; 0x02
    4648:	93 81       	ldd	r25, Z+3	; 0x03
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	40 e2       	ldi	r20, 0x20	; 32
    4650:	51 e4       	ldi	r21, 0x41	; 65
    4652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	8e 01       	movw	r16, r28
    465c:	0d 57       	subi	r16, 0x7D	; 125
    465e:	1f 4f       	sbci	r17, 0xFF	; 255
    4660:	bc 01       	movw	r22, r24
    4662:	cd 01       	movw	r24, r26
    4664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	f8 01       	movw	r30, r16
    466e:	91 83       	std	Z+1, r25	; 0x01
    4670:	80 83       	st	Z, r24
    4672:	1f c0       	rjmp	.+62     	; 0x46b2 <LCD_voidInit+0x8de>
    4674:	fe 01       	movw	r30, r28
    4676:	ef 57       	subi	r30, 0x7F	; 127
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	88 ec       	ldi	r24, 0xC8	; 200
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	91 83       	std	Z+1, r25	; 0x01
    4680:	80 83       	st	Z, r24
    4682:	fe 01       	movw	r30, r28
    4684:	ef 57       	subi	r30, 0x7F	; 127
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	80 81       	ld	r24, Z
    468a:	91 81       	ldd	r25, Z+1	; 0x01
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	f1 f7       	brne	.-4      	; 0x468c <LCD_voidInit+0x8b8>
    4690:	fe 01       	movw	r30, r28
    4692:	ef 57       	subi	r30, 0x7F	; 127
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	91 83       	std	Z+1, r25	; 0x01
    4698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    469a:	de 01       	movw	r26, r28
    469c:	ad 57       	subi	r26, 0x7D	; 125
    469e:	bf 4f       	sbci	r27, 0xFF	; 255
    46a0:	fe 01       	movw	r30, r28
    46a2:	ed 57       	subi	r30, 0x7D	; 125
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	11 96       	adiw	r26, 0x01	; 1
    46ae:	9c 93       	st	X, r25
    46b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b2:	fe 01       	movw	r30, r28
    46b4:	ed 57       	subi	r30, 0x7D	; 125
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	00 97       	sbiw	r24, 0x00	; 0
    46be:	d1 f6       	brne	.-76     	; 0x4674 <LCD_voidInit+0x8a0>
    46c0:	7a c6       	rjmp	.+3316   	; 0x53b6 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c2:	8e 01       	movw	r16, r28
    46c4:	0d 57       	subi	r16, 0x7D	; 125
    46c6:	1f 4f       	sbci	r17, 0xFF	; 255
    46c8:	fe 01       	movw	r30, r28
    46ca:	eb 57       	subi	r30, 0x7B	; 123
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	60 81       	ld	r22, Z
    46d0:	71 81       	ldd	r23, Z+1	; 0x01
    46d2:	82 81       	ldd	r24, Z+2	; 0x02
    46d4:	93 81       	ldd	r25, Z+3	; 0x03
    46d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	f8 01       	movw	r30, r16
    46e0:	91 83       	std	Z+1, r25	; 0x01
    46e2:	80 83       	st	Z, r24
    46e4:	de 01       	movw	r26, r28
    46e6:	a1 58       	subi	r26, 0x81	; 129
    46e8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ea:	fe 01       	movw	r30, r28
    46ec:	ed 57       	subi	r30, 0x7D	; 125
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	80 81       	ld	r24, Z
    46f2:	91 81       	ldd	r25, Z+1	; 0x01
    46f4:	11 96       	adiw	r26, 0x01	; 1
    46f6:	9c 93       	st	X, r25
    46f8:	8e 93       	st	-X, r24
    46fa:	fe 01       	movw	r30, r28
    46fc:	e1 58       	subi	r30, 0x81	; 129
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	80 81       	ld	r24, Z
    4702:	91 81       	ldd	r25, Z+1	; 0x01
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	f1 f7       	brne	.-4      	; 0x4704 <LCD_voidInit+0x930>
    4708:	fe 01       	movw	r30, r28
    470a:	e1 58       	subi	r30, 0x81	; 129
    470c:	ff 4f       	sbci	r31, 0xFF	; 255
    470e:	91 83       	std	Z+1, r25	; 0x01
    4710:	80 83       	st	Z, r24
    4712:	51 c6       	rjmp	.+3234   	; 0x53b6 <LCD_voidInit+0x15e2>
			 _delay_ms(2);
			
		}
		else 
		{
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    4714:	fe 01       	movw	r30, r28
    4716:	ea 53       	subi	r30, 0x3A	; 58
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	80 81       	ld	r24, Z
    471c:	60 e2       	ldi	r22, 0x20	; 32
    471e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4722:	fe 01       	movw	r30, r28
    4724:	e5 58       	subi	r30, 0x85	; 133
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	a0 e8       	ldi	r26, 0x80	; 128
    472e:	bf e3       	ldi	r27, 0x3F	; 63
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4738:	8e 01       	movw	r16, r28
    473a:	09 58       	subi	r16, 0x89	; 137
    473c:	1f 4f       	sbci	r17, 0xFF	; 255
    473e:	fe 01       	movw	r30, r28
    4740:	e5 58       	subi	r30, 0x85	; 133
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	93 81       	ldd	r25, Z+3	; 0x03
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	4a ef       	ldi	r20, 0xFA	; 250
    4752:	54 e4       	ldi	r21, 0x44	; 68
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	f8 01       	movw	r30, r16
    475e:	80 83       	st	Z, r24
    4760:	91 83       	std	Z+1, r25	; 0x01
    4762:	a2 83       	std	Z+2, r26	; 0x02
    4764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4766:	fe 01       	movw	r30, r28
    4768:	e9 58       	subi	r30, 0x89	; 137
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e8       	ldi	r20, 0x80	; 128
    477a:	5f e3       	ldi	r21, 0x3F	; 63
    477c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4780:	88 23       	and	r24, r24
    4782:	44 f4       	brge	.+16     	; 0x4794 <LCD_voidInit+0x9c0>
		__ticks = 1;
    4784:	fe 01       	movw	r30, r28
    4786:	eb 58       	subi	r30, 0x8B	; 139
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	64 c0       	rjmp	.+200    	; 0x485c <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    4794:	fe 01       	movw	r30, r28
    4796:	e9 58       	subi	r30, 0x89	; 137
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	60 81       	ld	r22, Z
    479c:	71 81       	ldd	r23, Z+1	; 0x01
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	93 81       	ldd	r25, Z+3	; 0x03
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	3f ef       	ldi	r19, 0xFF	; 255
    47a6:	4f e7       	ldi	r20, 0x7F	; 127
    47a8:	57 e4       	ldi	r21, 0x47	; 71
    47aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47ae:	18 16       	cp	r1, r24
    47b0:	0c f0       	brlt	.+2      	; 0x47b4 <LCD_voidInit+0x9e0>
    47b2:	43 c0       	rjmp	.+134    	; 0x483a <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b4:	fe 01       	movw	r30, r28
    47b6:	e5 58       	subi	r30, 0x85	; 133
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	60 81       	ld	r22, Z
    47bc:	71 81       	ldd	r23, Z+1	; 0x01
    47be:	82 81       	ldd	r24, Z+2	; 0x02
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e2       	ldi	r20, 0x20	; 32
    47c8:	51 e4       	ldi	r21, 0x41	; 65
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	8e 01       	movw	r16, r28
    47d4:	0b 58       	subi	r16, 0x8B	; 139
    47d6:	1f 4f       	sbci	r17, 0xFF	; 255
    47d8:	bc 01       	movw	r22, r24
    47da:	cd 01       	movw	r24, r26
    47dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	f8 01       	movw	r30, r16
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
    47ea:	1f c0       	rjmp	.+62     	; 0x482a <LCD_voidInit+0xa56>
    47ec:	fe 01       	movw	r30, r28
    47ee:	ed 58       	subi	r30, 0x8D	; 141
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	88 ec       	ldi	r24, 0xC8	; 200
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
    47fa:	fe 01       	movw	r30, r28
    47fc:	ed 58       	subi	r30, 0x8D	; 141
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	f1 f7       	brne	.-4      	; 0x4804 <LCD_voidInit+0xa30>
    4808:	fe 01       	movw	r30, r28
    480a:	ed 58       	subi	r30, 0x8D	; 141
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4812:	de 01       	movw	r26, r28
    4814:	ab 58       	subi	r26, 0x8B	; 139
    4816:	bf 4f       	sbci	r27, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	eb 58       	subi	r30, 0x8B	; 139
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	91 81       	ldd	r25, Z+1	; 0x01
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	11 96       	adiw	r26, 0x01	; 1
    4826:	9c 93       	st	X, r25
    4828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482a:	fe 01       	movw	r30, r28
    482c:	eb 58       	subi	r30, 0x8B	; 139
    482e:	ff 4f       	sbci	r31, 0xFF	; 255
    4830:	80 81       	ld	r24, Z
    4832:	91 81       	ldd	r25, Z+1	; 0x01
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	d1 f6       	brne	.-76     	; 0x47ec <LCD_voidInit+0xa18>
    4838:	27 c0       	rjmp	.+78     	; 0x4888 <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	8e 01       	movw	r16, r28
    483c:	0b 58       	subi	r16, 0x8B	; 139
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	fe 01       	movw	r30, r28
    4842:	e9 58       	subi	r30, 0x89	; 137
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	93 81       	ldd	r25, Z+3	; 0x03
    484e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	f8 01       	movw	r30, r16
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
    485c:	de 01       	movw	r26, r28
    485e:	af 58       	subi	r26, 0x8F	; 143
    4860:	bf 4f       	sbci	r27, 0xFF	; 255
    4862:	fe 01       	movw	r30, r28
    4864:	eb 58       	subi	r30, 0x8B	; 139
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	80 81       	ld	r24, Z
    486a:	91 81       	ldd	r25, Z+1	; 0x01
    486c:	8d 93       	st	X+, r24
    486e:	9c 93       	st	X, r25
    4870:	fe 01       	movw	r30, r28
    4872:	ef 58       	subi	r30, 0x8F	; 143
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	01 97       	sbiw	r24, 0x01	; 1
    487c:	f1 f7       	brne	.-4      	; 0x487a <LCD_voidInit+0xaa6>
    487e:	fe 01       	movw	r30, r28
    4880:	ef 58       	subi	r30, 0x8F	; 143
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
				 _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    4888:	fe 01       	movw	r30, r28
    488a:	ea 53       	subi	r30, 0x3A	; 58
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	80 81       	ld	r24, Z
    4890:	60 e2       	ldi	r22, 0x20	; 32
    4892:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4896:	fe 01       	movw	r30, r28
    4898:	e3 59       	subi	r30, 0x93	; 147
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	a0 e8       	ldi	r26, 0x80	; 128
    48a2:	bf e3       	ldi	r27, 0x3F	; 63
    48a4:	80 83       	st	Z, r24
    48a6:	91 83       	std	Z+1, r25	; 0x01
    48a8:	a2 83       	std	Z+2, r26	; 0x02
    48aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ac:	8e 01       	movw	r16, r28
    48ae:	07 59       	subi	r16, 0x97	; 151
    48b0:	1f 4f       	sbci	r17, 0xFF	; 255
    48b2:	fe 01       	movw	r30, r28
    48b4:	e3 59       	subi	r30, 0x93	; 147
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	60 81       	ld	r22, Z
    48ba:	71 81       	ldd	r23, Z+1	; 0x01
    48bc:	82 81       	ldd	r24, Z+2	; 0x02
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	4a ef       	ldi	r20, 0xFA	; 250
    48c6:	54 e4       	ldi	r21, 0x44	; 68
    48c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	f8 01       	movw	r30, r16
    48d2:	80 83       	st	Z, r24
    48d4:	91 83       	std	Z+1, r25	; 0x01
    48d6:	a2 83       	std	Z+2, r26	; 0x02
    48d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48da:	fe 01       	movw	r30, r28
    48dc:	e7 59       	subi	r30, 0x97	; 151
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	60 81       	ld	r22, Z
    48e2:	71 81       	ldd	r23, Z+1	; 0x01
    48e4:	82 81       	ldd	r24, Z+2	; 0x02
    48e6:	93 81       	ldd	r25, Z+3	; 0x03
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e8       	ldi	r20, 0x80	; 128
    48ee:	5f e3       	ldi	r21, 0x3F	; 63
    48f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f4:	88 23       	and	r24, r24
    48f6:	44 f4       	brge	.+16     	; 0x4908 <LCD_voidInit+0xb34>
		__ticks = 1;
    48f8:	fe 01       	movw	r30, r28
    48fa:	e9 59       	subi	r30, 0x99	; 153
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	91 83       	std	Z+1, r25	; 0x01
    4904:	80 83       	st	Z, r24
    4906:	64 c0       	rjmp	.+200    	; 0x49d0 <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    4908:	fe 01       	movw	r30, r28
    490a:	e7 59       	subi	r30, 0x97	; 151
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	82 81       	ldd	r24, Z+2	; 0x02
    4914:	93 81       	ldd	r25, Z+3	; 0x03
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	3f ef       	ldi	r19, 0xFF	; 255
    491a:	4f e7       	ldi	r20, 0x7F	; 127
    491c:	57 e4       	ldi	r21, 0x47	; 71
    491e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4922:	18 16       	cp	r1, r24
    4924:	0c f0       	brlt	.+2      	; 0x4928 <LCD_voidInit+0xb54>
    4926:	43 c0       	rjmp	.+134    	; 0x49ae <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4928:	fe 01       	movw	r30, r28
    492a:	e3 59       	subi	r30, 0x93	; 147
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	60 81       	ld	r22, Z
    4930:	71 81       	ldd	r23, Z+1	; 0x01
    4932:	82 81       	ldd	r24, Z+2	; 0x02
    4934:	93 81       	ldd	r25, Z+3	; 0x03
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e2       	ldi	r20, 0x20	; 32
    493c:	51 e4       	ldi	r21, 0x41	; 65
    493e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	8e 01       	movw	r16, r28
    4948:	09 59       	subi	r16, 0x99	; 153
    494a:	1f 4f       	sbci	r17, 0xFF	; 255
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	f8 01       	movw	r30, r16
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	80 83       	st	Z, r24
    495e:	1f c0       	rjmp	.+62     	; 0x499e <LCD_voidInit+0xbca>
    4960:	fe 01       	movw	r30, r28
    4962:	eb 59       	subi	r30, 0x9B	; 155
    4964:	ff 4f       	sbci	r31, 0xFF	; 255
    4966:	88 ec       	ldi	r24, 0xC8	; 200
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	91 83       	std	Z+1, r25	; 0x01
    496c:	80 83       	st	Z, r24
    496e:	fe 01       	movw	r30, r28
    4970:	eb 59       	subi	r30, 0x9B	; 155
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <LCD_voidInit+0xba4>
    497c:	fe 01       	movw	r30, r28
    497e:	eb 59       	subi	r30, 0x9B	; 155
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	91 83       	std	Z+1, r25	; 0x01
    4984:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4986:	de 01       	movw	r26, r28
    4988:	a9 59       	subi	r26, 0x99	; 153
    498a:	bf 4f       	sbci	r27, 0xFF	; 255
    498c:	fe 01       	movw	r30, r28
    498e:	e9 59       	subi	r30, 0x99	; 153
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 81       	ld	r24, Z
    4994:	91 81       	ldd	r25, Z+1	; 0x01
    4996:	01 97       	sbiw	r24, 0x01	; 1
    4998:	11 96       	adiw	r26, 0x01	; 1
    499a:	9c 93       	st	X, r25
    499c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    499e:	fe 01       	movw	r30, r28
    49a0:	e9 59       	subi	r30, 0x99	; 153
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	80 81       	ld	r24, Z
    49a6:	91 81       	ldd	r25, Z+1	; 0x01
    49a8:	00 97       	sbiw	r24, 0x00	; 0
    49aa:	d1 f6       	brne	.-76     	; 0x4960 <LCD_voidInit+0xb8c>
    49ac:	27 c0       	rjmp	.+78     	; 0x49fc <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ae:	8e 01       	movw	r16, r28
    49b0:	09 59       	subi	r16, 0x99	; 153
    49b2:	1f 4f       	sbci	r17, 0xFF	; 255
    49b4:	fe 01       	movw	r30, r28
    49b6:	e7 59       	subi	r30, 0x97	; 151
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	60 81       	ld	r22, Z
    49bc:	71 81       	ldd	r23, Z+1	; 0x01
    49be:	82 81       	ldd	r24, Z+2	; 0x02
    49c0:	93 81       	ldd	r25, Z+3	; 0x03
    49c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	f8 01       	movw	r30, r16
    49cc:	91 83       	std	Z+1, r25	; 0x01
    49ce:	80 83       	st	Z, r24
    49d0:	de 01       	movw	r26, r28
    49d2:	ad 59       	subi	r26, 0x9D	; 157
    49d4:	bf 4f       	sbci	r27, 0xFF	; 255
    49d6:	fe 01       	movw	r30, r28
    49d8:	e9 59       	subi	r30, 0x99	; 153
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 81       	ld	r24, Z
    49de:	91 81       	ldd	r25, Z+1	; 0x01
    49e0:	8d 93       	st	X+, r24
    49e2:	9c 93       	st	X, r25
    49e4:	fe 01       	movw	r30, r28
    49e6:	ed 59       	subi	r30, 0x9D	; 157
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <LCD_voidInit+0xc1a>
    49f2:	fe 01       	movw	r30, r28
    49f4:	ed 59       	subi	r30, 0x9D	; 157
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
				 _delay_ms(1);
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
    49fc:	fe 01       	movw	r30, r28
    49fe:	ea 53       	subi	r30, 0x3A	; 58
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 81       	ld	r24, Z
    4a04:	28 2f       	mov	r18, r24
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	c9 01       	movw	r24, r18
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	82 0f       	add	r24, r18
    4a10:	93 1f       	adc	r25, r19
    4a12:	88 0f       	add	r24, r24
    4a14:	99 1f       	adc	r25, r25
    4a16:	88 0f       	add	r24, r24
    4a18:	99 1f       	adc	r25, r25
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	e8 54       	subi	r30, 0x48	; 72
    4a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a20:	80 81       	ld	r24, Z
    4a22:	81 70       	andi	r24, 0x01	; 1
    4a24:	88 2f       	mov	r24, r24
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	96 95       	lsr	r25
    4a2a:	98 2f       	mov	r25, r24
    4a2c:	88 27       	eor	r24, r24
    4a2e:	97 95       	ror	r25
    4a30:	87 95       	ror	r24
    4a32:	48 2f       	mov	r20, r24
    4a34:	fe 01       	movw	r30, r28
    4a36:	ea 53       	subi	r30, 0x3A	; 58
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	80 81       	ld	r24, Z
    4a3c:	28 2f       	mov	r18, r24
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	c9 01       	movw	r24, r18
    4a42:	88 0f       	add	r24, r24
    4a44:	99 1f       	adc	r25, r25
    4a46:	82 0f       	add	r24, r18
    4a48:	93 1f       	adc	r25, r19
    4a4a:	88 0f       	add	r24, r24
    4a4c:	99 1f       	adc	r25, r25
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	fc 01       	movw	r30, r24
    4a54:	e8 54       	subi	r30, 0x48	; 72
    4a56:	fe 4f       	sbci	r31, 0xFE	; 254
    4a58:	80 81       	ld	r24, Z
    4a5a:	86 95       	lsr	r24
    4a5c:	81 70       	andi	r24, 0x01	; 1
    4a5e:	88 2f       	mov	r24, r24
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	00 24       	eor	r0, r0
    4a64:	96 95       	lsr	r25
    4a66:	87 95       	ror	r24
    4a68:	07 94       	ror	r0
    4a6a:	96 95       	lsr	r25
    4a6c:	87 95       	ror	r24
    4a6e:	07 94       	ror	r0
    4a70:	98 2f       	mov	r25, r24
    4a72:	80 2d       	mov	r24, r0
    4a74:	84 2b       	or	r24, r20
    4a76:	fe 01       	movw	r30, r28
    4a78:	eb 53       	subi	r30, 0x3B	; 59
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    4a7e:	fe 01       	movw	r30, r28
    4a80:	ea 53       	subi	r30, 0x3A	; 58
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	de 01       	movw	r26, r28
    4a86:	ab 53       	subi	r26, 0x3B	; 59
    4a88:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8a:	80 81       	ld	r24, Z
    4a8c:	6c 91       	ld	r22, X
    4a8e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4a92:	fe 01       	movw	r30, r28
    4a94:	e1 5a       	subi	r30, 0xA1	; 161
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	a0 e8       	ldi	r26, 0x80	; 128
    4a9e:	bf e3       	ldi	r27, 0x3F	; 63
    4aa0:	80 83       	st	Z, r24
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	a2 83       	std	Z+2, r26	; 0x02
    4aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	8e 01       	movw	r16, r28
    4aaa:	05 5a       	subi	r16, 0xA5	; 165
    4aac:	1f 4f       	sbci	r17, 0xFF	; 255
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e1 5a       	subi	r30, 0xA1	; 161
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	4a ef       	ldi	r20, 0xFA	; 250
    4ac2:	54 e4       	ldi	r21, 0x44	; 68
    4ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	f8 01       	movw	r30, r16
    4ace:	80 83       	st	Z, r24
    4ad0:	91 83       	std	Z+1, r25	; 0x01
    4ad2:	a2 83       	std	Z+2, r26	; 0x02
    4ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	e5 5a       	subi	r30, 0xA5	; 165
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	60 81       	ld	r22, Z
    4ade:	71 81       	ldd	r23, Z+1	; 0x01
    4ae0:	82 81       	ldd	r24, Z+2	; 0x02
    4ae2:	93 81       	ldd	r25, Z+3	; 0x03
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	40 e8       	ldi	r20, 0x80	; 128
    4aea:	5f e3       	ldi	r21, 0x3F	; 63
    4aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4af0:	88 23       	and	r24, r24
    4af2:	44 f4       	brge	.+16     	; 0x4b04 <LCD_voidInit+0xd30>
		__ticks = 1;
    4af4:	fe 01       	movw	r30, r28
    4af6:	e7 5a       	subi	r30, 0xA7	; 167
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	81 e0       	ldi	r24, 0x01	; 1
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
    4b02:	64 c0       	rjmp	.+200    	; 0x4bcc <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    4b04:	fe 01       	movw	r30, r28
    4b06:	e5 5a       	subi	r30, 0xA5	; 165
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	3f ef       	ldi	r19, 0xFF	; 255
    4b16:	4f e7       	ldi	r20, 0x7F	; 127
    4b18:	57 e4       	ldi	r21, 0x47	; 71
    4b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b1e:	18 16       	cp	r1, r24
    4b20:	0c f0       	brlt	.+2      	; 0x4b24 <LCD_voidInit+0xd50>
    4b22:	43 c0       	rjmp	.+134    	; 0x4baa <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b24:	fe 01       	movw	r30, r28
    4b26:	e1 5a       	subi	r30, 0xA1	; 161
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e2       	ldi	r20, 0x20	; 32
    4b38:	51 e4       	ldi	r21, 0x41	; 65
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	8e 01       	movw	r16, r28
    4b44:	07 5a       	subi	r16, 0xA7	; 167
    4b46:	1f 4f       	sbci	r17, 0xFF	; 255
    4b48:	bc 01       	movw	r22, r24
    4b4a:	cd 01       	movw	r24, r26
    4b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	f8 01       	movw	r30, r16
    4b56:	91 83       	std	Z+1, r25	; 0x01
    4b58:	80 83       	st	Z, r24
    4b5a:	1f c0       	rjmp	.+62     	; 0x4b9a <LCD_voidInit+0xdc6>
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	e9 5a       	subi	r30, 0xA9	; 169
    4b60:	ff 4f       	sbci	r31, 0xFF	; 255
    4b62:	88 ec       	ldi	r24, 0xC8	; 200
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	80 83       	st	Z, r24
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e9 5a       	subi	r30, 0xA9	; 169
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <LCD_voidInit+0xda0>
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e9 5a       	subi	r30, 0xA9	; 169
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	91 83       	std	Z+1, r25	; 0x01
    4b80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b82:	de 01       	movw	r26, r28
    4b84:	a7 5a       	subi	r26, 0xA7	; 167
    4b86:	bf 4f       	sbci	r27, 0xFF	; 255
    4b88:	fe 01       	movw	r30, r28
    4b8a:	e7 5a       	subi	r30, 0xA7	; 167
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	91 81       	ldd	r25, Z+1	; 0x01
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	11 96       	adiw	r26, 0x01	; 1
    4b96:	9c 93       	st	X, r25
    4b98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e7 5a       	subi	r30, 0xA7	; 167
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	80 81       	ld	r24, Z
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	d1 f6       	brne	.-76     	; 0x4b5c <LCD_voidInit+0xd88>
    4ba8:	27 c0       	rjmp	.+78     	; 0x4bf8 <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4baa:	8e 01       	movw	r16, r28
    4bac:	07 5a       	subi	r16, 0xA7	; 167
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e5 5a       	subi	r30, 0xA5	; 165
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	60 81       	ld	r22, Z
    4bb8:	71 81       	ldd	r23, Z+1	; 0x01
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	f8 01       	movw	r30, r16
    4bc8:	91 83       	std	Z+1, r25	; 0x01
    4bca:	80 83       	st	Z, r24
    4bcc:	de 01       	movw	r26, r28
    4bce:	ab 5a       	subi	r26, 0xAB	; 171
    4bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e7 5a       	subi	r30, 0xA7	; 167
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 81       	ld	r24, Z
    4bda:	91 81       	ldd	r25, Z+1	; 0x01
    4bdc:	8d 93       	st	X+, r24
    4bde:	9c 93       	st	X, r25
    4be0:	fe 01       	movw	r30, r28
    4be2:	eb 5a       	subi	r30, 0xAB	; 171
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	80 81       	ld	r24, Z
    4be8:	91 81       	ldd	r25, Z+1	; 0x01
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <LCD_voidInit+0xe16>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	eb 5a       	subi	r30, 0xAB	; 171
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	91 83       	std	Z+1, r25	; 0x01
    4bf6:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	ea 53       	subi	r30, 0x3A	; 58
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 81       	ld	r24, Z
    4c00:	60 e0       	ldi	r22, 0x00	; 0
    4c02:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4c06:	fe 01       	movw	r30, r28
    4c08:	ef 5a       	subi	r30, 0xAF	; 175
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	a0 e8       	ldi	r26, 0x80	; 128
    4c12:	bf e3       	ldi	r27, 0x3F	; 63
    4c14:	80 83       	st	Z, r24
    4c16:	91 83       	std	Z+1, r25	; 0x01
    4c18:	a2 83       	std	Z+2, r26	; 0x02
    4c1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	8e 01       	movw	r16, r28
    4c1e:	03 5b       	subi	r16, 0xB3	; 179
    4c20:	1f 4f       	sbci	r17, 0xFF	; 255
    4c22:	fe 01       	movw	r30, r28
    4c24:	ef 5a       	subi	r30, 0xAF	; 175
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	60 81       	ld	r22, Z
    4c2a:	71 81       	ldd	r23, Z+1	; 0x01
    4c2c:	82 81       	ldd	r24, Z+2	; 0x02
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	4a ef       	ldi	r20, 0xFA	; 250
    4c36:	54 e4       	ldi	r21, 0x44	; 68
    4c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	f8 01       	movw	r30, r16
    4c42:	80 83       	st	Z, r24
    4c44:	91 83       	std	Z+1, r25	; 0x01
    4c46:	a2 83       	std	Z+2, r26	; 0x02
    4c48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c4a:	fe 01       	movw	r30, r28
    4c4c:	e3 5b       	subi	r30, 0xB3	; 179
    4c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c50:	60 81       	ld	r22, Z
    4c52:	71 81       	ldd	r23, Z+1	; 0x01
    4c54:	82 81       	ldd	r24, Z+2	; 0x02
    4c56:	93 81       	ldd	r25, Z+3	; 0x03
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	40 e8       	ldi	r20, 0x80	; 128
    4c5e:	5f e3       	ldi	r21, 0x3F	; 63
    4c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c64:	88 23       	and	r24, r24
    4c66:	44 f4       	brge	.+16     	; 0x4c78 <LCD_voidInit+0xea4>
		__ticks = 1;
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e5 5b       	subi	r30, 0xB5	; 181
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	91 83       	std	Z+1, r25	; 0x01
    4c74:	80 83       	st	Z, r24
    4c76:	64 c0       	rjmp	.+200    	; 0x4d40 <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e3 5b       	subi	r30, 0xB3	; 179
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	60 81       	ld	r22, Z
    4c80:	71 81       	ldd	r23, Z+1	; 0x01
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	4f e7       	ldi	r20, 0x7F	; 127
    4c8c:	57 e4       	ldi	r21, 0x47	; 71
    4c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c92:	18 16       	cp	r1, r24
    4c94:	0c f0       	brlt	.+2      	; 0x4c98 <LCD_voidInit+0xec4>
    4c96:	43 c0       	rjmp	.+134    	; 0x4d1e <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ef 5a       	subi	r30, 0xAF	; 175
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	60 81       	ld	r22, Z
    4ca0:	71 81       	ldd	r23, Z+1	; 0x01
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	93 81       	ldd	r25, Z+3	; 0x03
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e2       	ldi	r20, 0x20	; 32
    4cac:	51 e4       	ldi	r21, 0x41	; 65
    4cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	8e 01       	movw	r16, r28
    4cb8:	05 5b       	subi	r16, 0xB5	; 181
    4cba:	1f 4f       	sbci	r17, 0xFF	; 255
    4cbc:	bc 01       	movw	r22, r24
    4cbe:	cd 01       	movw	r24, r26
    4cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	f8 01       	movw	r30, r16
    4cca:	91 83       	std	Z+1, r25	; 0x01
    4ccc:	80 83       	st	Z, r24
    4cce:	1f c0       	rjmp	.+62     	; 0x4d0e <LCD_voidInit+0xf3a>
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	e7 5b       	subi	r30, 0xB7	; 183
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	88 ec       	ldi	r24, 0xC8	; 200
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	91 83       	std	Z+1, r25	; 0x01
    4cdc:	80 83       	st	Z, r24
    4cde:	fe 01       	movw	r30, r28
    4ce0:	e7 5b       	subi	r30, 0xB7	; 183
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	80 81       	ld	r24, Z
    4ce6:	91 81       	ldd	r25, Z+1	; 0x01
    4ce8:	01 97       	sbiw	r24, 0x01	; 1
    4cea:	f1 f7       	brne	.-4      	; 0x4ce8 <LCD_voidInit+0xf14>
    4cec:	fe 01       	movw	r30, r28
    4cee:	e7 5b       	subi	r30, 0xB7	; 183
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf6:	de 01       	movw	r26, r28
    4cf8:	a5 5b       	subi	r26, 0xB5	; 181
    4cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e5 5b       	subi	r30, 0xB5	; 181
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 81       	ld	r24, Z
    4d04:	91 81       	ldd	r25, Z+1	; 0x01
    4d06:	01 97       	sbiw	r24, 0x01	; 1
    4d08:	11 96       	adiw	r26, 0x01	; 1
    4d0a:	9c 93       	st	X, r25
    4d0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e5 5b       	subi	r30, 0xB5	; 181
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	80 81       	ld	r24, Z
    4d16:	91 81       	ldd	r25, Z+1	; 0x01
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	d1 f6       	brne	.-76     	; 0x4cd0 <LCD_voidInit+0xefc>
    4d1c:	27 c0       	rjmp	.+78     	; 0x4d6c <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1e:	8e 01       	movw	r16, r28
    4d20:	05 5b       	subi	r16, 0xB5	; 181
    4d22:	1f 4f       	sbci	r17, 0xFF	; 255
    4d24:	fe 01       	movw	r30, r28
    4d26:	e3 5b       	subi	r30, 0xB3	; 179
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	60 81       	ld	r22, Z
    4d2c:	71 81       	ldd	r23, Z+1	; 0x01
    4d2e:	82 81       	ldd	r24, Z+2	; 0x02
    4d30:	93 81       	ldd	r25, Z+3	; 0x03
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	f8 01       	movw	r30, r16
    4d3c:	91 83       	std	Z+1, r25	; 0x01
    4d3e:	80 83       	st	Z, r24
    4d40:	de 01       	movw	r26, r28
    4d42:	a9 5b       	subi	r26, 0xB9	; 185
    4d44:	bf 4f       	sbci	r27, 0xFF	; 255
    4d46:	fe 01       	movw	r30, r28
    4d48:	e5 5b       	subi	r30, 0xB5	; 181
    4d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4c:	80 81       	ld	r24, Z
    4d4e:	91 81       	ldd	r25, Z+1	; 0x01
    4d50:	8d 93       	st	X+, r24
    4d52:	9c 93       	st	X, r25
    4d54:	fe 01       	movw	r30, r28
    4d56:	e9 5b       	subi	r30, 0xB9	; 185
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	80 81       	ld	r24, Z
    4d5c:	91 81       	ldd	r25, Z+1	; 0x01
    4d5e:	01 97       	sbiw	r24, 0x01	; 1
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <LCD_voidInit+0xf8a>
    4d62:	fe 01       	movw	r30, r28
    4d64:	e9 5b       	subi	r30, 0xB9	; 185
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	91 83       	std	Z+1, r25	; 0x01
    4d6a:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	ea 53       	subi	r30, 0x3A	; 58
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	80 81       	ld	r24, Z
    4d74:	28 2f       	mov	r18, r24
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	c9 01       	movw	r24, r18
    4d7a:	88 0f       	add	r24, r24
    4d7c:	99 1f       	adc	r25, r25
    4d7e:	82 0f       	add	r24, r18
    4d80:	93 1f       	adc	r25, r19
    4d82:	88 0f       	add	r24, r24
    4d84:	99 1f       	adc	r25, r25
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	e8 54       	subi	r30, 0x48	; 72
    4d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d90:	80 81       	ld	r24, Z
    4d92:	86 95       	lsr	r24
    4d94:	86 95       	lsr	r24
    4d96:	81 70       	andi	r24, 0x01	; 1
    4d98:	88 2f       	mov	r24, r24
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	00 24       	eor	r0, r0
    4d9e:	96 95       	lsr	r25
    4da0:	87 95       	ror	r24
    4da2:	07 94       	ror	r0
    4da4:	96 95       	lsr	r25
    4da6:	87 95       	ror	r24
    4da8:	07 94       	ror	r0
    4daa:	98 2f       	mov	r25, r24
    4dac:	80 2d       	mov	r24, r0
    4dae:	48 2f       	mov	r20, r24
    4db0:	40 68       	ori	r20, 0x80	; 128
    4db2:	fe 01       	movw	r30, r28
    4db4:	ea 53       	subi	r30, 0x3A	; 58
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	80 81       	ld	r24, Z
    4dba:	28 2f       	mov	r18, r24
    4dbc:	30 e0       	ldi	r19, 0x00	; 0
    4dbe:	c9 01       	movw	r24, r18
    4dc0:	88 0f       	add	r24, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	82 0f       	add	r24, r18
    4dc6:	93 1f       	adc	r25, r19
    4dc8:	88 0f       	add	r24, r24
    4dca:	99 1f       	adc	r25, r25
    4dcc:	88 0f       	add	r24, r24
    4dce:	99 1f       	adc	r25, r25
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	e8 54       	subi	r30, 0x48	; 72
    4dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd6:	80 81       	ld	r24, Z
    4dd8:	86 95       	lsr	r24
    4dda:	86 95       	lsr	r24
    4ddc:	86 95       	lsr	r24
    4dde:	81 70       	andi	r24, 0x01	; 1
    4de0:	88 2f       	mov	r24, r24
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	88 0f       	add	r24, r24
    4de6:	99 1f       	adc	r25, r25
    4de8:	82 95       	swap	r24
    4dea:	92 95       	swap	r25
    4dec:	90 7f       	andi	r25, 0xF0	; 240
    4dee:	98 27       	eor	r25, r24
    4df0:	80 7f       	andi	r24, 0xF0	; 240
    4df2:	98 27       	eor	r25, r24
    4df4:	48 2b       	or	r20, r24
    4df6:	fe 01       	movw	r30, r28
    4df8:	ea 53       	subi	r30, 0x3A	; 58
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 81       	ld	r24, Z
    4dfe:	28 2f       	mov	r18, r24
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	c9 01       	movw	r24, r18
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	82 0f       	add	r24, r18
    4e0a:	93 1f       	adc	r25, r19
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	88 0f       	add	r24, r24
    4e12:	99 1f       	adc	r25, r25
    4e14:	fc 01       	movw	r30, r24
    4e16:	e8 54       	subi	r30, 0x48	; 72
    4e18:	fe 4f       	sbci	r31, 0xFE	; 254
    4e1a:	80 81       	ld	r24, Z
    4e1c:	82 95       	swap	r24
    4e1e:	8f 70       	andi	r24, 0x0F	; 15
    4e20:	81 70       	andi	r24, 0x01	; 1
    4e22:	88 2f       	mov	r24, r24
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	82 95       	swap	r24
    4e28:	92 95       	swap	r25
    4e2a:	90 7f       	andi	r25, 0xF0	; 240
    4e2c:	98 27       	eor	r25, r24
    4e2e:	80 7f       	andi	r24, 0xF0	; 240
    4e30:	98 27       	eor	r25, r24
    4e32:	84 2b       	or	r24, r20
    4e34:	fe 01       	movw	r30, r28
    4e36:	eb 53       	subi	r30, 0x3B	; 59
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	ea 53       	subi	r30, 0x3A	; 58
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	de 01       	movw	r26, r28
    4e44:	ab 53       	subi	r26, 0x3B	; 59
    4e46:	bf 4f       	sbci	r27, 0xFF	; 255
    4e48:	80 81       	ld	r24, Z
    4e4a:	6c 91       	ld	r22, X
    4e4c:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4e50:	fe 01       	movw	r30, r28
    4e52:	ed 5b       	subi	r30, 0xBD	; 189
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	a0 e8       	ldi	r26, 0x80	; 128
    4e5c:	bf e3       	ldi	r27, 0x3F	; 63
    4e5e:	80 83       	st	Z, r24
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	a2 83       	std	Z+2, r26	; 0x02
    4e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e66:	8e 01       	movw	r16, r28
    4e68:	01 5c       	subi	r16, 0xC1	; 193
    4e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	ed 5b       	subi	r30, 0xBD	; 189
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	20 e0       	ldi	r18, 0x00	; 0
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	4a ef       	ldi	r20, 0xFA	; 250
    4e80:	54 e4       	ldi	r21, 0x44	; 68
    4e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	f8 01       	movw	r30, r16
    4e8c:	80 83       	st	Z, r24
    4e8e:	91 83       	std	Z+1, r25	; 0x01
    4e90:	a2 83       	std	Z+2, r26	; 0x02
    4e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e94:	fe 01       	movw	r30, r28
    4e96:	ff 96       	adiw	r30, 0x3f	; 63
    4e98:	60 81       	ld	r22, Z
    4e9a:	71 81       	ldd	r23, Z+1	; 0x01
    4e9c:	82 81       	ldd	r24, Z+2	; 0x02
    4e9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	40 e8       	ldi	r20, 0x80	; 128
    4ea6:	5f e3       	ldi	r21, 0x3F	; 63
    4ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eac:	88 23       	and	r24, r24
    4eae:	2c f4       	brge	.+10     	; 0x4eba <LCD_voidInit+0x10e6>
		__ticks = 1;
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	9e af       	std	Y+62, r25	; 0x3e
    4eb6:	8d af       	std	Y+61, r24	; 0x3d
    4eb8:	46 c0       	rjmp	.+140    	; 0x4f46 <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    4eba:	fe 01       	movw	r30, r28
    4ebc:	ff 96       	adiw	r30, 0x3f	; 63
    4ebe:	60 81       	ld	r22, Z
    4ec0:	71 81       	ldd	r23, Z+1	; 0x01
    4ec2:	82 81       	ldd	r24, Z+2	; 0x02
    4ec4:	93 81       	ldd	r25, Z+3	; 0x03
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	3f ef       	ldi	r19, 0xFF	; 255
    4eca:	4f e7       	ldi	r20, 0x7F	; 127
    4ecc:	57 e4       	ldi	r21, 0x47	; 71
    4ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ed2:	18 16       	cp	r1, r24
    4ed4:	64 f5       	brge	.+88     	; 0x4f2e <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	ed 5b       	subi	r30, 0xBD	; 189
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	60 81       	ld	r22, Z
    4ede:	71 81       	ldd	r23, Z+1	; 0x01
    4ee0:	82 81       	ldd	r24, Z+2	; 0x02
    4ee2:	93 81       	ldd	r25, Z+3	; 0x03
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	40 e2       	ldi	r20, 0x20	; 32
    4eea:	51 e4       	ldi	r21, 0x41	; 65
    4eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	bc 01       	movw	r22, r24
    4ef6:	cd 01       	movw	r24, r26
    4ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4efc:	dc 01       	movw	r26, r24
    4efe:	cb 01       	movw	r24, r22
    4f00:	9e af       	std	Y+62, r25	; 0x3e
    4f02:	8d af       	std	Y+61, r24	; 0x3d
    4f04:	0f c0       	rjmp	.+30     	; 0x4f24 <LCD_voidInit+0x1150>
    4f06:	88 ec       	ldi	r24, 0xC8	; 200
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	9c af       	std	Y+60, r25	; 0x3c
    4f0c:	8b af       	std	Y+59, r24	; 0x3b
    4f0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f10:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	f1 f7       	brne	.-4      	; 0x4f12 <LCD_voidInit+0x113e>
    4f16:	9c af       	std	Y+60, r25	; 0x3c
    4f18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f1e:	01 97       	sbiw	r24, 0x01	; 1
    4f20:	9e af       	std	Y+62, r25	; 0x3e
    4f22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f24:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f26:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f28:	00 97       	sbiw	r24, 0x00	; 0
    4f2a:	69 f7       	brne	.-38     	; 0x4f06 <LCD_voidInit+0x1132>
    4f2c:	16 c0       	rjmp	.+44     	; 0x4f5a <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2e:	fe 01       	movw	r30, r28
    4f30:	ff 96       	adiw	r30, 0x3f	; 63
    4f32:	60 81       	ld	r22, Z
    4f34:	71 81       	ldd	r23, Z+1	; 0x01
    4f36:	82 81       	ldd	r24, Z+2	; 0x02
    4f38:	93 81       	ldd	r25, Z+3	; 0x03
    4f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	cb 01       	movw	r24, r22
    4f42:	9e af       	std	Y+62, r25	; 0x3e
    4f44:	8d af       	std	Y+61, r24	; 0x3d
    4f46:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f48:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f4a:	9a af       	std	Y+58, r25	; 0x3a
    4f4c:	89 af       	std	Y+57, r24	; 0x39
    4f4e:	89 ad       	ldd	r24, Y+57	; 0x39
    4f50:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f52:	01 97       	sbiw	r24, 0x01	; 1
    4f54:	f1 f7       	brne	.-4      	; 0x4f52 <LCD_voidInit+0x117e>
    4f56:	9a af       	std	Y+58, r25	; 0x3a
    4f58:	89 af       	std	Y+57, r24	; 0x39
				 _delay_ms(1);
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ea 53       	subi	r30, 0x3A	; 58
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 81       	ld	r24, Z
    4f62:	60 e0       	ldi	r22, 0x00	; 0
    4f64:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    4f68:	80 e0       	ldi	r24, 0x00	; 0
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	a0 e8       	ldi	r26, 0x80	; 128
    4f6e:	bf e3       	ldi	r27, 0x3F	; 63
    4f70:	8d ab       	std	Y+53, r24	; 0x35
    4f72:	9e ab       	std	Y+54, r25	; 0x36
    4f74:	af ab       	std	Y+55, r26	; 0x37
    4f76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f78:	6d a9       	ldd	r22, Y+53	; 0x35
    4f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    4f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    4f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	4a ef       	ldi	r20, 0xFA	; 250
    4f86:	54 e4       	ldi	r21, 0x44	; 68
    4f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8c:	dc 01       	movw	r26, r24
    4f8e:	cb 01       	movw	r24, r22
    4f90:	89 ab       	std	Y+49, r24	; 0x31
    4f92:	9a ab       	std	Y+50, r25	; 0x32
    4f94:	ab ab       	std	Y+51, r26	; 0x33
    4f96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f98:	69 a9       	ldd	r22, Y+49	; 0x31
    4f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    4f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    4f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e8       	ldi	r20, 0x80	; 128
    4fa6:	5f e3       	ldi	r21, 0x3F	; 63
    4fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fac:	88 23       	and	r24, r24
    4fae:	2c f4       	brge	.+10     	; 0x4fba <LCD_voidInit+0x11e6>
		__ticks = 1;
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	98 ab       	std	Y+48, r25	; 0x30
    4fb6:	8f a7       	std	Y+47, r24	; 0x2f
    4fb8:	3f c0       	rjmp	.+126    	; 0x5038 <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    4fba:	69 a9       	ldd	r22, Y+49	; 0x31
    4fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    4fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    4fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	3f ef       	ldi	r19, 0xFF	; 255
    4fc6:	4f e7       	ldi	r20, 0x7F	; 127
    4fc8:	57 e4       	ldi	r21, 0x47	; 71
    4fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fce:	18 16       	cp	r1, r24
    4fd0:	4c f5       	brge	.+82     	; 0x5024 <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    4fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    4fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    4fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    4fda:	20 e0       	ldi	r18, 0x00	; 0
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	40 e2       	ldi	r20, 0x20	; 32
    4fe0:	51 e4       	ldi	r21, 0x41	; 65
    4fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	bc 01       	movw	r22, r24
    4fec:	cd 01       	movw	r24, r26
    4fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff2:	dc 01       	movw	r26, r24
    4ff4:	cb 01       	movw	r24, r22
    4ff6:	98 ab       	std	Y+48, r25	; 0x30
    4ff8:	8f a7       	std	Y+47, r24	; 0x2f
    4ffa:	0f c0       	rjmp	.+30     	; 0x501a <LCD_voidInit+0x1246>
    4ffc:	88 ec       	ldi	r24, 0xC8	; 200
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	9e a7       	std	Y+46, r25	; 0x2e
    5002:	8d a7       	std	Y+45, r24	; 0x2d
    5004:	8d a5       	ldd	r24, Y+45	; 0x2d
    5006:	9e a5       	ldd	r25, Y+46	; 0x2e
    5008:	01 97       	sbiw	r24, 0x01	; 1
    500a:	f1 f7       	brne	.-4      	; 0x5008 <LCD_voidInit+0x1234>
    500c:	9e a7       	std	Y+46, r25	; 0x2e
    500e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5010:	8f a5       	ldd	r24, Y+47	; 0x2f
    5012:	98 a9       	ldd	r25, Y+48	; 0x30
    5014:	01 97       	sbiw	r24, 0x01	; 1
    5016:	98 ab       	std	Y+48, r25	; 0x30
    5018:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    501a:	8f a5       	ldd	r24, Y+47	; 0x2f
    501c:	98 a9       	ldd	r25, Y+48	; 0x30
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	69 f7       	brne	.-38     	; 0x4ffc <LCD_voidInit+0x1228>
    5022:	14 c0       	rjmp	.+40     	; 0x504c <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5024:	69 a9       	ldd	r22, Y+49	; 0x31
    5026:	7a a9       	ldd	r23, Y+50	; 0x32
    5028:	8b a9       	ldd	r24, Y+51	; 0x33
    502a:	9c a9       	ldd	r25, Y+52	; 0x34
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	98 ab       	std	Y+48, r25	; 0x30
    5036:	8f a7       	std	Y+47, r24	; 0x2f
    5038:	8f a5       	ldd	r24, Y+47	; 0x2f
    503a:	98 a9       	ldd	r25, Y+48	; 0x30
    503c:	9c a7       	std	Y+44, r25	; 0x2c
    503e:	8b a7       	std	Y+43, r24	; 0x2b
    5040:	8b a5       	ldd	r24, Y+43	; 0x2b
    5042:	9c a5       	ldd	r25, Y+44	; 0x2c
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <LCD_voidInit+0x1270>
    5048:	9c a7       	std	Y+44, r25	; 0x2c
    504a:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
    504c:	fe 01       	movw	r30, r28
    504e:	ea 53       	subi	r30, 0x3A	; 58
    5050:	ff 4f       	sbci	r31, 0xFF	; 255
    5052:	80 81       	ld	r24, Z
    5054:	60 e1       	ldi	r22, 0x10	; 16
    5056:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	a0 e8       	ldi	r26, 0x80	; 128
    5060:	bf e3       	ldi	r27, 0x3F	; 63
    5062:	8f a3       	std	Y+39, r24	; 0x27
    5064:	98 a7       	std	Y+40, r25	; 0x28
    5066:	a9 a7       	std	Y+41, r26	; 0x29
    5068:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    506a:	6f a1       	ldd	r22, Y+39	; 0x27
    506c:	78 a5       	ldd	r23, Y+40	; 0x28
    506e:	89 a5       	ldd	r24, Y+41	; 0x29
    5070:	9a a5       	ldd	r25, Y+42	; 0x2a
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	4a ef       	ldi	r20, 0xFA	; 250
    5078:	54 e4       	ldi	r21, 0x44	; 68
    507a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507e:	dc 01       	movw	r26, r24
    5080:	cb 01       	movw	r24, r22
    5082:	8b a3       	std	Y+35, r24	; 0x23
    5084:	9c a3       	std	Y+36, r25	; 0x24
    5086:	ad a3       	std	Y+37, r26	; 0x25
    5088:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    508a:	6b a1       	ldd	r22, Y+35	; 0x23
    508c:	7c a1       	ldd	r23, Y+36	; 0x24
    508e:	8d a1       	ldd	r24, Y+37	; 0x25
    5090:	9e a1       	ldd	r25, Y+38	; 0x26
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e8       	ldi	r20, 0x80	; 128
    5098:	5f e3       	ldi	r21, 0x3F	; 63
    509a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    509e:	88 23       	and	r24, r24
    50a0:	2c f4       	brge	.+10     	; 0x50ac <LCD_voidInit+0x12d8>
		__ticks = 1;
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	9a a3       	std	Y+34, r25	; 0x22
    50a8:	89 a3       	std	Y+33, r24	; 0x21
    50aa:	3f c0       	rjmp	.+126    	; 0x512a <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    50ac:	6b a1       	ldd	r22, Y+35	; 0x23
    50ae:	7c a1       	ldd	r23, Y+36	; 0x24
    50b0:	8d a1       	ldd	r24, Y+37	; 0x25
    50b2:	9e a1       	ldd	r25, Y+38	; 0x26
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	3f ef       	ldi	r19, 0xFF	; 255
    50b8:	4f e7       	ldi	r20, 0x7F	; 127
    50ba:	57 e4       	ldi	r21, 0x47	; 71
    50bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50c0:	18 16       	cp	r1, r24
    50c2:	4c f5       	brge	.+82     	; 0x5116 <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c4:	6f a1       	ldd	r22, Y+39	; 0x27
    50c6:	78 a5       	ldd	r23, Y+40	; 0x28
    50c8:	89 a5       	ldd	r24, Y+41	; 0x29
    50ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	40 e2       	ldi	r20, 0x20	; 32
    50d2:	51 e4       	ldi	r21, 0x41	; 65
    50d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	bc 01       	movw	r22, r24
    50de:	cd 01       	movw	r24, r26
    50e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	9a a3       	std	Y+34, r25	; 0x22
    50ea:	89 a3       	std	Y+33, r24	; 0x21
    50ec:	0f c0       	rjmp	.+30     	; 0x510c <LCD_voidInit+0x1338>
    50ee:	88 ec       	ldi	r24, 0xC8	; 200
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	98 a3       	std	Y+32, r25	; 0x20
    50f4:	8f 8f       	std	Y+31, r24	; 0x1f
    50f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50f8:	98 a1       	ldd	r25, Y+32	; 0x20
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	f1 f7       	brne	.-4      	; 0x50fa <LCD_voidInit+0x1326>
    50fe:	98 a3       	std	Y+32, r25	; 0x20
    5100:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5102:	89 a1       	ldd	r24, Y+33	; 0x21
    5104:	9a a1       	ldd	r25, Y+34	; 0x22
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	9a a3       	std	Y+34, r25	; 0x22
    510a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510c:	89 a1       	ldd	r24, Y+33	; 0x21
    510e:	9a a1       	ldd	r25, Y+34	; 0x22
    5110:	00 97       	sbiw	r24, 0x00	; 0
    5112:	69 f7       	brne	.-38     	; 0x50ee <LCD_voidInit+0x131a>
    5114:	14 c0       	rjmp	.+40     	; 0x513e <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5116:	6b a1       	ldd	r22, Y+35	; 0x23
    5118:	7c a1       	ldd	r23, Y+36	; 0x24
    511a:	8d a1       	ldd	r24, Y+37	; 0x25
    511c:	9e a1       	ldd	r25, Y+38	; 0x26
    511e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5122:	dc 01       	movw	r26, r24
    5124:	cb 01       	movw	r24, r22
    5126:	9a a3       	std	Y+34, r25	; 0x22
    5128:	89 a3       	std	Y+33, r24	; 0x21
    512a:	89 a1       	ldd	r24, Y+33	; 0x21
    512c:	9a a1       	ldd	r25, Y+34	; 0x22
    512e:	9e 8f       	std	Y+30, r25	; 0x1e
    5130:	8d 8f       	std	Y+29, r24	; 0x1d
    5132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5134:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5136:	01 97       	sbiw	r24, 0x01	; 1
    5138:	f1 f7       	brne	.-4      	; 0x5136 <LCD_voidInit+0x1362>
    513a:	9e 8f       	std	Y+30, r25	; 0x1e
    513c:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    513e:	fe 01       	movw	r30, r28
    5140:	ea 53       	subi	r30, 0x3A	; 58
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	80 81       	ld	r24, Z
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	a0 e8       	ldi	r26, 0x80	; 128
    5152:	bf e3       	ldi	r27, 0x3F	; 63
    5154:	89 8f       	std	Y+25, r24	; 0x19
    5156:	9a 8f       	std	Y+26, r25	; 0x1a
    5158:	ab 8f       	std	Y+27, r26	; 0x1b
    515a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    515c:	69 8d       	ldd	r22, Y+25	; 0x19
    515e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5164:	20 e0       	ldi	r18, 0x00	; 0
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	4a ef       	ldi	r20, 0xFA	; 250
    516a:	54 e4       	ldi	r21, 0x44	; 68
    516c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	8d 8b       	std	Y+21, r24	; 0x15
    5176:	9e 8b       	std	Y+22, r25	; 0x16
    5178:	af 8b       	std	Y+23, r26	; 0x17
    517a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    517c:	6d 89       	ldd	r22, Y+21	; 0x15
    517e:	7e 89       	ldd	r23, Y+22	; 0x16
    5180:	8f 89       	ldd	r24, Y+23	; 0x17
    5182:	98 8d       	ldd	r25, Y+24	; 0x18
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e8       	ldi	r20, 0x80	; 128
    518a:	5f e3       	ldi	r21, 0x3F	; 63
    518c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5190:	88 23       	and	r24, r24
    5192:	2c f4       	brge	.+10     	; 0x519e <LCD_voidInit+0x13ca>
		__ticks = 1;
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	9c 8b       	std	Y+20, r25	; 0x14
    519a:	8b 8b       	std	Y+19, r24	; 0x13
    519c:	3f c0       	rjmp	.+126    	; 0x521c <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    519e:	6d 89       	ldd	r22, Y+21	; 0x15
    51a0:	7e 89       	ldd	r23, Y+22	; 0x16
    51a2:	8f 89       	ldd	r24, Y+23	; 0x17
    51a4:	98 8d       	ldd	r25, Y+24	; 0x18
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	3f ef       	ldi	r19, 0xFF	; 255
    51aa:	4f e7       	ldi	r20, 0x7F	; 127
    51ac:	57 e4       	ldi	r21, 0x47	; 71
    51ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51b2:	18 16       	cp	r1, r24
    51b4:	4c f5       	brge	.+82     	; 0x5208 <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b6:	69 8d       	ldd	r22, Y+25	; 0x19
    51b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	40 e2       	ldi	r20, 0x20	; 32
    51c4:	51 e4       	ldi	r21, 0x41	; 65
    51c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ca:	dc 01       	movw	r26, r24
    51cc:	cb 01       	movw	r24, r22
    51ce:	bc 01       	movw	r22, r24
    51d0:	cd 01       	movw	r24, r26
    51d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	9c 8b       	std	Y+20, r25	; 0x14
    51dc:	8b 8b       	std	Y+19, r24	; 0x13
    51de:	0f c0       	rjmp	.+30     	; 0x51fe <LCD_voidInit+0x142a>
    51e0:	88 ec       	ldi	r24, 0xC8	; 200
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	9a 8b       	std	Y+18, r25	; 0x12
    51e6:	89 8b       	std	Y+17, r24	; 0x11
    51e8:	89 89       	ldd	r24, Y+17	; 0x11
    51ea:	9a 89       	ldd	r25, Y+18	; 0x12
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	f1 f7       	brne	.-4      	; 0x51ec <LCD_voidInit+0x1418>
    51f0:	9a 8b       	std	Y+18, r25	; 0x12
    51f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51f4:	8b 89       	ldd	r24, Y+19	; 0x13
    51f6:	9c 89       	ldd	r25, Y+20	; 0x14
    51f8:	01 97       	sbiw	r24, 0x01	; 1
    51fa:	9c 8b       	std	Y+20, r25	; 0x14
    51fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5200:	9c 89       	ldd	r25, Y+20	; 0x14
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	69 f7       	brne	.-38     	; 0x51e0 <LCD_voidInit+0x140c>
    5206:	14 c0       	rjmp	.+40     	; 0x5230 <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5208:	6d 89       	ldd	r22, Y+21	; 0x15
    520a:	7e 89       	ldd	r23, Y+22	; 0x16
    520c:	8f 89       	ldd	r24, Y+23	; 0x17
    520e:	98 8d       	ldd	r25, Y+24	; 0x18
    5210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5214:	dc 01       	movw	r26, r24
    5216:	cb 01       	movw	r24, r22
    5218:	9c 8b       	std	Y+20, r25	; 0x14
    521a:	8b 8b       	std	Y+19, r24	; 0x13
    521c:	8b 89       	ldd	r24, Y+19	; 0x13
    521e:	9c 89       	ldd	r25, Y+20	; 0x14
    5220:	98 8b       	std	Y+16, r25	; 0x10
    5222:	8f 87       	std	Y+15, r24	; 0x0f
    5224:	8f 85       	ldd	r24, Y+15	; 0x0f
    5226:	98 89       	ldd	r25, Y+16	; 0x10
    5228:	01 97       	sbiw	r24, 0x01	; 1
    522a:	f1 f7       	brne	.-4      	; 0x5228 <LCD_voidInit+0x1454>
    522c:	98 8b       	std	Y+16, r25	; 0x10
    522e:	8f 87       	std	Y+15, r24	; 0x0f
			    _delay_ms(1);
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
    5230:	fe 01       	movw	r30, r28
    5232:	ea 53       	subi	r30, 0x3A	; 58
    5234:	ff 4f       	sbci	r31, 0xFF	; 255
    5236:	80 81       	ld	r24, Z
    5238:	28 2f       	mov	r18, r24
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	c9 01       	movw	r24, r18
    523e:	88 0f       	add	r24, r24
    5240:	99 1f       	adc	r25, r25
    5242:	82 0f       	add	r24, r18
    5244:	93 1f       	adc	r25, r19
    5246:	88 0f       	add	r24, r24
    5248:	99 1f       	adc	r25, r25
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	fc 01       	movw	r30, r24
    5250:	e8 54       	subi	r30, 0x48	; 72
    5252:	fe 4f       	sbci	r31, 0xFE	; 254
    5254:	80 81       	ld	r24, Z
    5256:	82 95       	swap	r24
    5258:	86 95       	lsr	r24
    525a:	86 95       	lsr	r24
    525c:	83 70       	andi	r24, 0x03	; 3
    525e:	81 70       	andi	r24, 0x01	; 1
    5260:	88 2f       	mov	r24, r24
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	88 0f       	add	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	82 95       	swap	r24
    526a:	92 95       	swap	r25
    526c:	90 7f       	andi	r25, 0xF0	; 240
    526e:	98 27       	eor	r25, r24
    5270:	80 7f       	andi	r24, 0xF0	; 240
    5272:	98 27       	eor	r25, r24
    5274:	48 2f       	mov	r20, r24
    5276:	40 64       	ori	r20, 0x40	; 64
    5278:	fe 01       	movw	r30, r28
    527a:	ea 53       	subi	r30, 0x3A	; 58
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	80 81       	ld	r24, Z
    5280:	28 2f       	mov	r18, r24
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	c9 01       	movw	r24, r18
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	82 0f       	add	r24, r18
    528c:	93 1f       	adc	r25, r19
    528e:	88 0f       	add	r24, r24
    5290:	99 1f       	adc	r25, r25
    5292:	88 0f       	add	r24, r24
    5294:	99 1f       	adc	r25, r25
    5296:	fc 01       	movw	r30, r24
    5298:	e8 54       	subi	r30, 0x48	; 72
    529a:	fe 4f       	sbci	r31, 0xFE	; 254
    529c:	80 81       	ld	r24, Z
    529e:	88 1f       	adc	r24, r24
    52a0:	88 27       	eor	r24, r24
    52a2:	88 1f       	adc	r24, r24
    52a4:	88 2f       	mov	r24, r24
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	82 95       	swap	r24
    52aa:	92 95       	swap	r25
    52ac:	90 7f       	andi	r25, 0xF0	; 240
    52ae:	98 27       	eor	r25, r24
    52b0:	80 7f       	andi	r24, 0xF0	; 240
    52b2:	98 27       	eor	r25, r24
    52b4:	84 2b       	or	r24, r20
    52b6:	fe 01       	movw	r30, r28
    52b8:	eb 53       	subi	r30, 0x3B	; 59
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    52be:	fe 01       	movw	r30, r28
    52c0:	ea 53       	subi	r30, 0x3A	; 58
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	de 01       	movw	r26, r28
    52c6:	ab 53       	subi	r26, 0x3B	; 59
    52c8:	bf 4f       	sbci	r27, 0xFF	; 255
    52ca:	80 81       	ld	r24, Z
    52cc:	6c 91       	ld	r22, X
    52ce:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	a0 e8       	ldi	r26, 0x80	; 128
    52d8:	bf e3       	ldi	r27, 0x3F	; 63
    52da:	8b 87       	std	Y+11, r24	; 0x0b
    52dc:	9c 87       	std	Y+12, r25	; 0x0c
    52de:	ad 87       	std	Y+13, r26	; 0x0d
    52e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	4a ef       	ldi	r20, 0xFA	; 250
    52f0:	54 e4       	ldi	r21, 0x44	; 68
    52f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	8f 83       	std	Y+7, r24	; 0x07
    52fc:	98 87       	std	Y+8, r25	; 0x08
    52fe:	a9 87       	std	Y+9, r26	; 0x09
    5300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5302:	6f 81       	ldd	r22, Y+7	; 0x07
    5304:	78 85       	ldd	r23, Y+8	; 0x08
    5306:	89 85       	ldd	r24, Y+9	; 0x09
    5308:	9a 85       	ldd	r25, Y+10	; 0x0a
    530a:	20 e0       	ldi	r18, 0x00	; 0
    530c:	30 e0       	ldi	r19, 0x00	; 0
    530e:	40 e8       	ldi	r20, 0x80	; 128
    5310:	5f e3       	ldi	r21, 0x3F	; 63
    5312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5316:	88 23       	and	r24, r24
    5318:	2c f4       	brge	.+10     	; 0x5324 <LCD_voidInit+0x1550>
		__ticks = 1;
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	9e 83       	std	Y+6, r25	; 0x06
    5320:	8d 83       	std	Y+5, r24	; 0x05
    5322:	3f c0       	rjmp	.+126    	; 0x53a2 <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    5324:	6f 81       	ldd	r22, Y+7	; 0x07
    5326:	78 85       	ldd	r23, Y+8	; 0x08
    5328:	89 85       	ldd	r24, Y+9	; 0x09
    532a:	9a 85       	ldd	r25, Y+10	; 0x0a
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	3f ef       	ldi	r19, 0xFF	; 255
    5330:	4f e7       	ldi	r20, 0x7F	; 127
    5332:	57 e4       	ldi	r21, 0x47	; 71
    5334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5338:	18 16       	cp	r1, r24
    533a:	4c f5       	brge	.+82     	; 0x538e <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    533c:	6b 85       	ldd	r22, Y+11	; 0x0b
    533e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5340:	8d 85       	ldd	r24, Y+13	; 0x0d
    5342:	9e 85       	ldd	r25, Y+14	; 0x0e
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	40 e2       	ldi	r20, 0x20	; 32
    534a:	51 e4       	ldi	r21, 0x41	; 65
    534c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	bc 01       	movw	r22, r24
    5356:	cd 01       	movw	r24, r26
    5358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
    5364:	0f c0       	rjmp	.+30     	; 0x5384 <LCD_voidInit+0x15b0>
    5366:	88 ec       	ldi	r24, 0xC8	; 200
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	9c 83       	std	Y+4, r25	; 0x04
    536c:	8b 83       	std	Y+3, r24	; 0x03
    536e:	8b 81       	ldd	r24, Y+3	; 0x03
    5370:	9c 81       	ldd	r25, Y+4	; 0x04
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <LCD_voidInit+0x159e>
    5376:	9c 83       	std	Y+4, r25	; 0x04
    5378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    537a:	8d 81       	ldd	r24, Y+5	; 0x05
    537c:	9e 81       	ldd	r25, Y+6	; 0x06
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	9e 83       	std	Y+6, r25	; 0x06
    5382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5384:	8d 81       	ldd	r24, Y+5	; 0x05
    5386:	9e 81       	ldd	r25, Y+6	; 0x06
    5388:	00 97       	sbiw	r24, 0x00	; 0
    538a:	69 f7       	brne	.-38     	; 0x5366 <LCD_voidInit+0x1592>
    538c:	14 c0       	rjmp	.+40     	; 0x53b6 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    538e:	6f 81       	ldd	r22, Y+7	; 0x07
    5390:	78 85       	ldd	r23, Y+8	; 0x08
    5392:	89 85       	ldd	r24, Y+9	; 0x09
    5394:	9a 85       	ldd	r25, Y+10	; 0x0a
    5396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539a:	dc 01       	movw	r26, r24
    539c:	cb 01       	movw	r24, r22
    539e:	9e 83       	std	Y+6, r25	; 0x06
    53a0:	8d 83       	std	Y+5, r24	; 0x05
    53a2:	8d 81       	ldd	r24, Y+5	; 0x05
    53a4:	9e 81       	ldd	r25, Y+6	; 0x06
    53a6:	9a 83       	std	Y+2, r25	; 0x02
    53a8:	89 83       	std	Y+1, r24	; 0x01
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	01 97       	sbiw	r24, 0x01	; 1
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <LCD_voidInit+0x15da>
    53b2:	9a 83       	std	Y+2, r25	; 0x02
    53b4:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void) 
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    53b6:	de 01       	movw	r26, r28
    53b8:	aa 53       	subi	r26, 0x3A	; 58
    53ba:	bf 4f       	sbci	r27, 0xFF	; 255
    53bc:	fe 01       	movw	r30, r28
    53be:	ea 53       	subi	r30, 0x3A	; 58
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	80 81       	ld	r24, Z
    53c4:	8f 5f       	subi	r24, 0xFF	; 255
    53c6:	8c 93       	st	X, r24
    53c8:	fe 01       	movw	r30, r28
    53ca:	ea 53       	subi	r30, 0x3A	; 58
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	80 81       	ld	r24, Z
    53d0:	82 30       	cpi	r24, 0x02	; 2
    53d2:	10 f4       	brcc	.+4      	; 0x53d8 <LCD_voidInit+0x1604>
    53d4:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <LCD_voidInit+0x26>
		
		
		
		
	}
}
    53d8:	ca 53       	subi	r28, 0x3A	; 58
    53da:	df 4f       	sbci	r29, 0xFF	; 255
    53dc:	0f b6       	in	r0, 0x3f	; 63
    53de:	f8 94       	cli
    53e0:	de bf       	out	0x3e, r29	; 62
    53e2:	0f be       	out	0x3f, r0	; 63
    53e4:	cd bf       	out	0x3d, r28	; 61
    53e6:	cf 91       	pop	r28
    53e8:	df 91       	pop	r29
    53ea:	1f 91       	pop	r17
    53ec:	0f 91       	pop	r16
    53ee:	08 95       	ret

000053f0 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    53f0:	df 93       	push	r29
    53f2:	cf 93       	push	r28
    53f4:	00 d0       	rcall	.+0      	; 0x53f6 <LCD_enuWriteCmd+0x6>
    53f6:	0f 92       	push	r0
    53f8:	cd b7       	in	r28, 0x3d	; 61
    53fa:	de b7       	in	r29, 0x3e	; 62
    53fc:	8a 83       	std	Y+2, r24	; 0x02
    53fe:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    5400:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    5402:	8a 81       	ldd	r24, Y+2	; 0x02
    5404:	82 30       	cpi	r24, 0x02	; 2
    5406:	c8 f4       	brcc	.+50     	; 0x543a <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8LOW);
    5408:	8a 81       	ldd	r24, Y+2	; 0x02
    540a:	28 2f       	mov	r18, r24
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	c9 01       	movw	r24, r18
    5410:	88 0f       	add	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	82 0f       	add	r24, r18
    5416:	93 1f       	adc	r25, r19
    5418:	88 0f       	add	r24, r24
    541a:	99 1f       	adc	r25, r25
    541c:	88 0f       	add	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	fc 01       	movw	r30, r24
    5422:	e7 54       	subi	r30, 0x47	; 71
    5424:	fe 4f       	sbci	r31, 0xFE	; 254
    5426:	80 81       	ld	r24, Z
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
    5430:	6b 81       	ldd	r22, Y+3	; 0x03
    5432:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <LCD_enuHelp>
    5436:	89 83       	std	Y+1, r24	; 0x01
    5438:	02 c0       	rjmp	.+4      	; 0x543e <LCD_enuWriteCmd+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    543a:	82 e0       	ldi	r24, 0x02	; 2
    543c:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    543e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	cf 91       	pop	r28
    5448:	df 91       	pop	r29
    544a:	08 95       	ret

0000544c <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    544c:	df 93       	push	r29
    544e:	cf 93       	push	r28
    5450:	00 d0       	rcall	.+0      	; 0x5452 <LCD_enuWriteChar+0x6>
    5452:	0f 92       	push	r0
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
    5458:	8a 83       	std	Y+2, r24	; 0x02
    545a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    545c:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    545e:	8a 81       	ldd	r24, Y+2	; 0x02
    5460:	82 30       	cpi	r24, 0x02	; 2
    5462:	c8 f4       	brcc	.+50     	; 0x5496 <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8HIGH);
    5464:	8a 81       	ldd	r24, Y+2	; 0x02
    5466:	28 2f       	mov	r18, r24
    5468:	30 e0       	ldi	r19, 0x00	; 0
    546a:	c9 01       	movw	r24, r18
    546c:	88 0f       	add	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	82 0f       	add	r24, r18
    5472:	93 1f       	adc	r25, r19
    5474:	88 0f       	add	r24, r24
    5476:	99 1f       	adc	r25, r25
    5478:	88 0f       	add	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	fc 01       	movw	r30, r24
    547e:	e7 54       	subi	r30, 0x47	; 71
    5480:	fe 4f       	sbci	r31, 0xFE	; 254
    5482:	80 81       	ld	r24, Z
    5484:	61 e0       	ldi	r22, 0x01	; 1
    5486:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8DataCpy );
    548a:	8a 81       	ldd	r24, Y+2	; 0x02
    548c:	6b 81       	ldd	r22, Y+3	; 0x03
    548e:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <LCD_enuHelp>
    5492:	89 83       	std	Y+1, r24	; 0x01
    5494:	02 c0       	rjmp	.+4      	; 0x549a <LCD_enuWriteChar+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    5496:	82 e0       	ldi	r24, 0x02	; 2
    5498:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    549a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    549c:	0f 90       	pop	r0
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	cf 91       	pop	r28
    54a4:	df 91       	pop	r29
    54a6:	08 95       	ret

000054a8 <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
    54a8:	df 93       	push	r29
    54aa:	cf 93       	push	r28
    54ac:	00 d0       	rcall	.+0      	; 0x54ae <LCD_enuHelp+0x6>
    54ae:	00 d0       	rcall	.+0      	; 0x54b0 <LCD_enuHelp+0x8>
    54b0:	cd b7       	in	r28, 0x3d	; 61
    54b2:	de b7       	in	r29, 0x3e	; 62
    54b4:	8b 83       	std	Y+3, r24	; 0x03
    54b6:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    54b8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
    54bc:	28 2f       	mov	r18, r24
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	c9 01       	movw	r24, r18
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	82 0f       	add	r24, r18
    54c8:	93 1f       	adc	r25, r19
    54ca:	88 0f       	add	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	88 0f       	add	r24, r24
    54d0:	99 1f       	adc	r25, r25
    54d2:	fc 01       	movw	r30, r24
    54d4:	e5 54       	subi	r30, 0x45	; 69
    54d6:	fe 4f       	sbci	r31, 0xFE	; 254
    54d8:	80 81       	ld	r24, Z
    54da:	61 e0       	ldi	r22, 0x01	; 1
    54dc:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
    54e0:	8b 81       	ldd	r24, Y+3	; 0x03
    54e2:	28 2f       	mov	r18, r24
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	c9 01       	movw	r24, r18
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	82 0f       	add	r24, r18
    54ee:	93 1f       	adc	r25, r19
    54f0:	88 0f       	add	r24, r24
    54f2:	99 1f       	adc	r25, r25
    54f4:	01 96       	adiw	r24, 0x01	; 1
    54f6:	88 0f       	add	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	fc 01       	movw	r30, r24
    54fc:	e8 54       	subi	r30, 0x48	; 72
    54fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5500:	80 81       	ld	r24, Z
    5502:	60 e0       	ldi	r22, 0x00	; 0
    5504:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    5508:	8b 81       	ldd	r24, Y+3	; 0x03
    550a:	28 2f       	mov	r18, r24
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	c9 01       	movw	r24, r18
    5510:	88 0f       	add	r24, r24
    5512:	99 1f       	adc	r25, r25
    5514:	82 0f       	add	r24, r18
    5516:	93 1f       	adc	r25, r19
    5518:	88 0f       	add	r24, r24
    551a:	99 1f       	adc	r25, r25
    551c:	88 0f       	add	r24, r24
    551e:	99 1f       	adc	r25, r25
    5520:	fc 01       	movw	r30, r24
    5522:	e8 54       	subi	r30, 0x48	; 72
    5524:	fe 4f       	sbci	r31, 0xFE	; 254
    5526:	80 81       	ld	r24, Z
    5528:	82 95       	swap	r24
    552a:	86 95       	lsr	r24
    552c:	87 70       	andi	r24, 0x07	; 7
    552e:	81 70       	andi	r24, 0x01	; 1
    5530:	81 30       	cpi	r24, 0x01	; 1
    5532:	89 f5       	brne	.+98     	; 0x5596 <LCD_enuHelp+0xee>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    5534:	19 82       	std	Y+1, r1	; 0x01
    5536:	2b c0       	rjmp	.+86     	; 0x558e <LCD_enuHelp+0xe6>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    5538:	8b 81       	ldd	r24, Y+3	; 0x03
    553a:	28 2f       	mov	r18, r24
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	48 2f       	mov	r20, r24
    5542:	50 e0       	ldi	r21, 0x00	; 0
    5544:	c9 01       	movw	r24, r18
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	82 0f       	add	r24, r18
    554c:	93 1f       	adc	r25, r19
    554e:	88 0f       	add	r24, r24
    5550:	99 1f       	adc	r25, r25
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	84 0f       	add	r24, r20
    5558:	95 1f       	adc	r25, r21
    555a:	fc 01       	movw	r30, r24
    555c:	e4 54       	subi	r30, 0x44	; 68
    555e:	fe 4f       	sbci	r31, 0xFE	; 254
    5560:	40 81       	ld	r20, Z
    5562:	8c 81       	ldd	r24, Y+4	; 0x04
    5564:	28 2f       	mov	r18, r24
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	89 81       	ldd	r24, Y+1	; 0x01
    556a:	88 2f       	mov	r24, r24
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	b9 01       	movw	r22, r18
    5570:	02 c0       	rjmp	.+4      	; 0x5576 <LCD_enuHelp+0xce>
    5572:	75 95       	asr	r23
    5574:	67 95       	ror	r22
    5576:	8a 95       	dec	r24
    5578:	e2 f7       	brpl	.-8      	; 0x5572 <LCD_enuHelp+0xca>
    557a:	cb 01       	movw	r24, r22
    557c:	98 2f       	mov	r25, r24
    557e:	91 70       	andi	r25, 0x01	; 1
    5580:	84 2f       	mov	r24, r20
    5582:	69 2f       	mov	r22, r25
    5584:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    5588:	89 81       	ldd	r24, Y+1	; 0x01
    558a:	8f 5f       	subi	r24, 0xFF	; 255
    558c:	89 83       	std	Y+1, r24	; 0x01
    558e:	89 81       	ldd	r24, Y+1	; 0x01
    5590:	88 30       	cpi	r24, 0x08	; 8
    5592:	90 f2       	brcs	.-92     	; 0x5538 <LCD_enuHelp+0x90>
    5594:	4a c0       	rjmp	.+148    	; 0x562a <LCD_enuHelp+0x182>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    5596:	8b 81       	ldd	r24, Y+3	; 0x03
    5598:	28 2f       	mov	r18, r24
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	c9 01       	movw	r24, r18
    559e:	88 0f       	add	r24, r24
    55a0:	99 1f       	adc	r25, r25
    55a2:	82 0f       	add	r24, r18
    55a4:	93 1f       	adc	r25, r19
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	fc 01       	movw	r30, r24
    55b0:	e8 54       	subi	r30, 0x48	; 72
    55b2:	fe 4f       	sbci	r31, 0xFE	; 254
    55b4:	80 81       	ld	r24, Z
    55b6:	82 95       	swap	r24
    55b8:	86 95       	lsr	r24
    55ba:	87 70       	andi	r24, 0x07	; 7
    55bc:	81 70       	andi	r24, 0x01	; 1
    55be:	88 23       	and	r24, r24
    55c0:	91 f5       	brne	.+100    	; 0x5626 <LCD_enuHelp+0x17e>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    55c2:	84 e0       	ldi	r24, 0x04	; 4
    55c4:	89 83       	std	Y+1, r24	; 0x01
    55c6:	2b c0       	rjmp	.+86     	; 0x561e <LCD_enuHelp+0x176>
			{
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    55c8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ca:	28 2f       	mov	r18, r24
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
    55d0:	48 2f       	mov	r20, r24
    55d2:	50 e0       	ldi	r21, 0x00	; 0
    55d4:	c9 01       	movw	r24, r18
    55d6:	88 0f       	add	r24, r24
    55d8:	99 1f       	adc	r25, r25
    55da:	82 0f       	add	r24, r18
    55dc:	93 1f       	adc	r25, r19
    55de:	88 0f       	add	r24, r24
    55e0:	99 1f       	adc	r25, r25
    55e2:	88 0f       	add	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	84 0f       	add	r24, r20
    55e8:	95 1f       	adc	r25, r21
    55ea:	fc 01       	movw	r30, r24
    55ec:	e4 54       	subi	r30, 0x44	; 68
    55ee:	fe 4f       	sbci	r31, 0xFE	; 254
    55f0:	40 81       	ld	r20, Z
    55f2:	8c 81       	ldd	r24, Y+4	; 0x04
    55f4:	28 2f       	mov	r18, r24
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	88 2f       	mov	r24, r24
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	b9 01       	movw	r22, r18
    5600:	02 c0       	rjmp	.+4      	; 0x5606 <LCD_enuHelp+0x15e>
    5602:	75 95       	asr	r23
    5604:	67 95       	ror	r22
    5606:	8a 95       	dec	r24
    5608:	e2 f7       	brpl	.-8      	; 0x5602 <LCD_enuHelp+0x15a>
    560a:	cb 01       	movw	r24, r22
    560c:	98 2f       	mov	r25, r24
    560e:	91 70       	andi	r25, 0x01	; 1
    5610:	84 2f       	mov	r24, r20
    5612:	69 2f       	mov	r22, r25
    5614:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    5618:	89 81       	ldd	r24, Y+1	; 0x01
    561a:	8f 5f       	subi	r24, 0xFF	; 255
    561c:	89 83       	std	Y+1, r24	; 0x01
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	88 30       	cpi	r24, 0x08	; 8
    5622:	90 f2       	brcs	.-92     	; 0x55c8 <LCD_enuHelp+0x120>
    5624:	02 c0       	rjmp	.+4      	; 0x562a <LCD_enuHelp+0x182>
			}
			
		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
    5626:	84 e0       	ldi	r24, 0x04	; 4
    5628:	8a 83       	std	Y+2, r24	; 0x02
		}
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch     ,DIO_u8LOW);
    562a:	8b 81       	ldd	r24, Y+3	; 0x03
    562c:	28 2f       	mov	r18, r24
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	c9 01       	movw	r24, r18
    5632:	88 0f       	add	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	82 0f       	add	r24, r18
    5638:	93 1f       	adc	r25, r19
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	88 0f       	add	r24, r24
    5640:	99 1f       	adc	r25, r25
    5642:	fc 01       	movw	r30, r24
    5644:	e5 54       	subi	r30, 0x45	; 69
    5646:	fe 4f       	sbci	r31, 0xFE	; 254
    5648:	80 81       	ld	r24, Z
    564a:	60 e0       	ldi	r22, 0x00	; 0
    564c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	
	return enuErrorStateLoc ;
    5650:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5652:	0f 90       	pop	r0
    5654:	0f 90       	pop	r0
    5656:	0f 90       	pop	r0
    5658:	0f 90       	pop	r0
    565a:	cf 91       	pop	r28
    565c:	df 91       	pop	r29
    565e:	08 95       	ret

00005660 <LCD_enuWriteString>:


tenuErrorStatus LCD_enuWriteString (uint8 u8LcdNumCpy , uint8  *pu8DataCpy , uint8 size )
{
    5660:	df 93       	push	r29
    5662:	cf 93       	push	r28
    5664:	00 d0       	rcall	.+0      	; 0x5666 <LCD_enuWriteString+0x6>
    5666:	00 d0       	rcall	.+0      	; 0x5668 <LCD_enuWriteString+0x8>
    5668:	00 d0       	rcall	.+0      	; 0x566a <LCD_enuWriteString+0xa>
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
    566e:	8b 83       	std	Y+3, r24	; 0x03
    5670:	7d 83       	std	Y+5, r23	; 0x05
    5672:	6c 83       	std	Y+4, r22	; 0x04
    5674:	4e 83       	std	Y+6, r20	; 0x06

	tenuErrorStatus enuErrorStateLoc = E_OK ;
    5676:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;

	for(u8CntrLoc = 0 ; u8CntrLoc <= size ; u8CntrLoc++)
    5678:	19 82       	std	Y+1, r1	; 0x01
    567a:	10 c0       	rjmp	.+32     	; 0x569c <LCD_enuWriteString+0x3c>
	{
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[u8CntrLoc]);
    567c:	89 81       	ldd	r24, Y+1	; 0x01
    567e:	28 2f       	mov	r18, r24
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	8c 81       	ldd	r24, Y+4	; 0x04
    5684:	9d 81       	ldd	r25, Y+5	; 0x05
    5686:	fc 01       	movw	r30, r24
    5688:	e2 0f       	add	r30, r18
    568a:	f3 1f       	adc	r31, r19
    568c:	90 81       	ld	r25, Z
    568e:	8b 81       	ldd	r24, Y+3	; 0x03
    5690:	69 2f       	mov	r22, r25
    5692:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
{

	tenuErrorStatus enuErrorStateLoc = E_OK ;
	uint8 u8CntrLoc;

	for(u8CntrLoc = 0 ; u8CntrLoc <= size ; u8CntrLoc++)
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	8f 5f       	subi	r24, 0xFF	; 255
    569a:	89 83       	std	Y+1, r24	; 0x01
    569c:	99 81       	ldd	r25, Y+1	; 0x01
    569e:	8e 81       	ldd	r24, Y+6	; 0x06
    56a0:	89 17       	cp	r24, r25
    56a2:	60 f7       	brcc	.-40     	; 0x567c <LCD_enuWriteString+0x1c>
	{
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[u8CntrLoc]);
	}


	return enuErrorStateLoc ;
    56a4:	8a 81       	ldd	r24, Y+2	; 0x02

}
    56a6:	26 96       	adiw	r28, 0x06	; 6
    56a8:	0f b6       	in	r0, 0x3f	; 63
    56aa:	f8 94       	cli
    56ac:	de bf       	out	0x3e, r29	; 62
    56ae:	0f be       	out	0x3f, r0	; 63
    56b0:	cd bf       	out	0x3d, r28	; 61
    56b2:	cf 91       	pop	r28
    56b4:	df 91       	pop	r29
    56b6:	08 95       	ret

000056b8 <LCD_enuWritenumber>:

void LCD_enuWritenumber(uint8 u8LcdNumCpy ,float32  pu8DataCpy)
{
    56b8:	0f 93       	push	r16
    56ba:	1f 93       	push	r17
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	cd b7       	in	r28, 0x3d	; 61
    56c2:	de b7       	in	r29, 0x3e	; 62
    56c4:	cf 56       	subi	r28, 0x6F	; 111
    56c6:	d0 40       	sbci	r29, 0x00	; 0
    56c8:	0f b6       	in	r0, 0x3f	; 63
    56ca:	f8 94       	cli
    56cc:	de bf       	out	0x3e, r29	; 62
    56ce:	0f be       	out	0x3f, r0	; 63
    56d0:	cd bf       	out	0x3d, r28	; 61
    56d2:	fe 01       	movw	r30, r28
    56d4:	e5 59       	subi	r30, 0x95	; 149
    56d6:	ff 4f       	sbci	r31, 0xFF	; 255
    56d8:	80 83       	st	Z, r24
    56da:	fe 01       	movw	r30, r28
    56dc:	e4 59       	subi	r30, 0x94	; 148
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	40 83       	st	Z, r20
    56e2:	51 83       	std	Z+1, r21	; 0x01
    56e4:	62 83       	std	Z+2, r22	; 0x02
    56e6:	73 83       	std	Z+3, r23	; 0x03
	uint8 array[100];
	uint8 cntr = 0 ;
    56e8:	1e 82       	std	Y+6, r1	; 0x06
	sint8 loopcntr;
	float32 temp;

    if(pu8DataCpy < 0)
    56ea:	fe 01       	movw	r30, r28
    56ec:	e4 59       	subi	r30, 0x94	; 148
    56ee:	ff 4f       	sbci	r31, 0xFF	; 255
    56f0:	60 81       	ld	r22, Z
    56f2:	71 81       	ldd	r23, Z+1	; 0x01
    56f4:	82 81       	ldd	r24, Z+2	; 0x02
    56f6:	93 81       	ldd	r25, Z+3	; 0x03
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	40 e0       	ldi	r20, 0x00	; 0
    56fe:	50 e0       	ldi	r21, 0x00	; 0
    5700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5704:	88 23       	and	r24, r24
    5706:	94 f5       	brge	.+100    	; 0x576c <LCD_enuWritenumber+0xb4>
    {
         LCD_enuWriteChar(u8LcdNumCpy , '-');
    5708:	fe 01       	movw	r30, r28
    570a:	e5 59       	subi	r30, 0x95	; 149
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	80 81       	ld	r24, Z
    5710:	6d e2       	ldi	r22, 0x2D	; 45
    5712:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
         temp = 0 - pu8DataCpy;
    5716:	fe 01       	movw	r30, r28
    5718:	e4 59       	subi	r30, 0x94	; 148
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	60 e0       	ldi	r22, 0x00	; 0
    571e:	70 e0       	ldi	r23, 0x00	; 0
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	20 81       	ld	r18, Z
    5726:	31 81       	ldd	r19, Z+1	; 0x01
    5728:	42 81       	ldd	r20, Z+2	; 0x02
    572a:	53 81       	ldd	r21, Z+3	; 0x03
    572c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5730:	dc 01       	movw	r26, r24
    5732:	cb 01       	movw	r24, r22
    5734:	89 83       	std	Y+1, r24	; 0x01
    5736:	9a 83       	std	Y+2, r25	; 0x02
    5738:	ab 83       	std	Y+3, r26	; 0x03
    573a:	bc 83       	std	Y+4, r27	; 0x04
         pu8DataCpy = 0 - pu8DataCpy ;
    573c:	8e 01       	movw	r16, r28
    573e:	04 59       	subi	r16, 0x94	; 148
    5740:	1f 4f       	sbci	r17, 0xFF	; 255
    5742:	fe 01       	movw	r30, r28
    5744:	e4 59       	subi	r30, 0x94	; 148
    5746:	ff 4f       	sbci	r31, 0xFF	; 255
    5748:	60 e0       	ldi	r22, 0x00	; 0
    574a:	70 e0       	ldi	r23, 0x00	; 0
    574c:	80 e0       	ldi	r24, 0x00	; 0
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	20 81       	ld	r18, Z
    5752:	31 81       	ldd	r19, Z+1	; 0x01
    5754:	42 81       	ldd	r20, Z+2	; 0x02
    5756:	53 81       	ldd	r21, Z+3	; 0x03
    5758:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    575c:	dc 01       	movw	r26, r24
    575e:	cb 01       	movw	r24, r22
    5760:	f8 01       	movw	r30, r16
    5762:	80 83       	st	Z, r24
    5764:	91 83       	std	Z+1, r25	; 0x01
    5766:	a2 83       	std	Z+2, r26	; 0x02
    5768:	b3 83       	std	Z+3, r27	; 0x03
    576a:	0b c0       	rjmp	.+22     	; 0x5782 <LCD_enuWritenumber+0xca>
    }
    else
    {
    	temp = pu8DataCpy ;
    576c:	fe 01       	movw	r30, r28
    576e:	e4 59       	subi	r30, 0x94	; 148
    5770:	ff 4f       	sbci	r31, 0xFF	; 255
    5772:	80 81       	ld	r24, Z
    5774:	91 81       	ldd	r25, Z+1	; 0x01
    5776:	a2 81       	ldd	r26, Z+2	; 0x02
    5778:	b3 81       	ldd	r27, Z+3	; 0x03
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	9a 83       	std	Y+2, r25	; 0x02
    577e:	ab 83       	std	Y+3, r26	; 0x03
    5780:	bc 83       	std	Y+4, r27	; 0x04
    }

	do{
		array[cntr] = (int)(temp)%10 ;
    5782:	8e 81       	ldd	r24, Y+6	; 0x06
    5784:	08 2f       	mov	r16, r24
    5786:	10 e0       	ldi	r17, 0x00	; 0
    5788:	69 81       	ldd	r22, Y+1	; 0x01
    578a:	7a 81       	ldd	r23, Y+2	; 0x02
    578c:	8b 81       	ldd	r24, Y+3	; 0x03
    578e:	9c 81       	ldd	r25, Y+4	; 0x04
    5790:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5794:	dc 01       	movw	r26, r24
    5796:	cb 01       	movw	r24, r22
    5798:	2a e0       	ldi	r18, 0x0A	; 10
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	b9 01       	movw	r22, r18
    579e:	0e 94 4b 39 	call	0x7296	; 0x7296 <__divmodhi4>
    57a2:	28 2f       	mov	r18, r24
    57a4:	ce 01       	movw	r24, r28
    57a6:	07 96       	adiw	r24, 0x07	; 7
    57a8:	fc 01       	movw	r30, r24
    57aa:	e0 0f       	add	r30, r16
    57ac:	f1 1f       	adc	r31, r17
    57ae:	20 83       	st	Z, r18
		array[cntr] = array[cntr] + '0' ;
    57b0:	8e 81       	ldd	r24, Y+6	; 0x06
    57b2:	48 2f       	mov	r20, r24
    57b4:	50 e0       	ldi	r21, 0x00	; 0
    57b6:	8e 81       	ldd	r24, Y+6	; 0x06
    57b8:	28 2f       	mov	r18, r24
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	ce 01       	movw	r24, r28
    57be:	07 96       	adiw	r24, 0x07	; 7
    57c0:	fc 01       	movw	r30, r24
    57c2:	e2 0f       	add	r30, r18
    57c4:	f3 1f       	adc	r31, r19
    57c6:	80 81       	ld	r24, Z
    57c8:	28 2f       	mov	r18, r24
    57ca:	20 5d       	subi	r18, 0xD0	; 208
    57cc:	ce 01       	movw	r24, r28
    57ce:	07 96       	adiw	r24, 0x07	; 7
    57d0:	fc 01       	movw	r30, r24
    57d2:	e4 0f       	add	r30, r20
    57d4:	f5 1f       	adc	r31, r21
    57d6:	20 83       	st	Z, r18
		temp = temp/10;
    57d8:	69 81       	ldd	r22, Y+1	; 0x01
    57da:	7a 81       	ldd	r23, Y+2	; 0x02
    57dc:	8b 81       	ldd	r24, Y+3	; 0x03
    57de:	9c 81       	ldd	r25, Y+4	; 0x04
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	40 e2       	ldi	r20, 0x20	; 32
    57e6:	51 e4       	ldi	r21, 0x41	; 65
    57e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57ec:	dc 01       	movw	r26, r24
    57ee:	cb 01       	movw	r24, r22
    57f0:	89 83       	std	Y+1, r24	; 0x01
    57f2:	9a 83       	std	Y+2, r25	; 0x02
    57f4:	ab 83       	std	Y+3, r26	; 0x03
    57f6:	bc 83       	std	Y+4, r27	; 0x04
		cntr++;
    57f8:	8e 81       	ldd	r24, Y+6	; 0x06
    57fa:	8f 5f       	subi	r24, 0xFF	; 255
    57fc:	8e 83       	std	Y+6, r24	; 0x06
	}while( (int)temp !=0);
    57fe:	69 81       	ldd	r22, Y+1	; 0x01
    5800:	7a 81       	ldd	r23, Y+2	; 0x02
    5802:	8b 81       	ldd	r24, Y+3	; 0x03
    5804:	9c 81       	ldd	r25, Y+4	; 0x04
    5806:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    580a:	dc 01       	movw	r26, r24
    580c:	cb 01       	movw	r24, r22
    580e:	00 97       	sbiw	r24, 0x00	; 0
    5810:	09 f0       	breq	.+2      	; 0x5814 <LCD_enuWritenumber+0x15c>
    5812:	b7 cf       	rjmp	.-146    	; 0x5782 <LCD_enuWritenumber+0xca>

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    5814:	8e 81       	ldd	r24, Y+6	; 0x06
    5816:	81 50       	subi	r24, 0x01	; 1
    5818:	8d 83       	std	Y+5, r24	; 0x05
    581a:	15 c0       	rjmp	.+42     	; 0x5846 <LCD_enuWritenumber+0x18e>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
    581c:	8d 81       	ldd	r24, Y+5	; 0x05
    581e:	28 2f       	mov	r18, r24
    5820:	33 27       	eor	r19, r19
    5822:	27 fd       	sbrc	r18, 7
    5824:	30 95       	com	r19
    5826:	ce 01       	movw	r24, r28
    5828:	07 96       	adiw	r24, 0x07	; 7
    582a:	fc 01       	movw	r30, r24
    582c:	e2 0f       	add	r30, r18
    582e:	f3 1f       	adc	r31, r19
    5830:	90 81       	ld	r25, Z
    5832:	fe 01       	movw	r30, r28
    5834:	e5 59       	subi	r30, 0x95	; 149
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	80 81       	ld	r24, Z
    583a:	69 2f       	mov	r22, r25
    583c:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
		array[cntr] = array[cntr] + '0' ;
		temp = temp/10;
		cntr++;
	}while( (int)temp !=0);

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    5840:	8d 81       	ldd	r24, Y+5	; 0x05
    5842:	81 50       	subi	r24, 0x01	; 1
    5844:	8d 83       	std	Y+5, r24	; 0x05
    5846:	8d 81       	ldd	r24, Y+5	; 0x05
    5848:	88 23       	and	r24, r24
    584a:	44 f7       	brge	.-48     	; 0x581c <LCD_enuWritenumber+0x164>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
	}


	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){
    584c:	fe 01       	movw	r30, r28
    584e:	e4 59       	subi	r30, 0x94	; 148
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	60 81       	ld	r22, Z
    5854:	71 81       	ldd	r23, Z+1	; 0x01
    5856:	82 81       	ldd	r24, Z+2	; 0x02
    5858:	93 81       	ldd	r25, Z+3	; 0x03
    585a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	aa 27       	eor	r26, r26
    5864:	97 fd       	sbrc	r25, 7
    5866:	a0 95       	com	r26
    5868:	ba 2f       	mov	r27, r26
    586a:	bc 01       	movw	r22, r24
    586c:	cd 01       	movw	r24, r26
    586e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5872:	9b 01       	movw	r18, r22
    5874:	ac 01       	movw	r20, r24
    5876:	fe 01       	movw	r30, r28
    5878:	e4 59       	subi	r30, 0x94	; 148
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	60 81       	ld	r22, Z
    587e:	71 81       	ldd	r23, Z+1	; 0x01
    5880:	82 81       	ldd	r24, Z+2	; 0x02
    5882:	93 81       	ldd	r25, Z+3	; 0x03
    5884:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5888:	dc 01       	movw	r26, r24
    588a:	cb 01       	movw	r24, r22
    588c:	bc 01       	movw	r22, r24
    588e:	cd 01       	movw	r24, r26
    5890:	2f e6       	ldi	r18, 0x6F	; 111
    5892:	32 e1       	ldi	r19, 0x12	; 18
    5894:	43 e8       	ldi	r20, 0x83	; 131
    5896:	5a e3       	ldi	r21, 0x3A	; 58
    5898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    589c:	18 16       	cp	r1, r24
    589e:	0c f0       	brlt	.+2      	; 0x58a2 <LCD_enuWritenumber+0x1ea>
    58a0:	79 c0       	rjmp	.+242    	; 0x5994 <LCD_enuWritenumber+0x2dc>

		LCD_enuWriteChar(u8LcdNumCpy , '.');
    58a2:	fe 01       	movw	r30, r28
    58a4:	e5 59       	subi	r30, 0x95	; 149
    58a6:	ff 4f       	sbci	r31, 0xFF	; 255
    58a8:	80 81       	ld	r24, Z
    58aa:	6e e2       	ldi	r22, 0x2E	; 46
    58ac:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    58b0:	1d 82       	std	Y+5, r1	; 0x05
    58b2:	6c c0       	rjmp	.+216    	; 0x598c <LCD_enuWritenumber+0x2d4>
			pu8DataCpy = pu8DataCpy - (int)pu8DataCpy;
    58b4:	fe 01       	movw	r30, r28
    58b6:	e4 59       	subi	r30, 0x94	; 148
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	60 81       	ld	r22, Z
    58bc:	71 81       	ldd	r23, Z+1	; 0x01
    58be:	82 81       	ldd	r24, Z+2	; 0x02
    58c0:	93 81       	ldd	r25, Z+3	; 0x03
    58c2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    58c6:	dc 01       	movw	r26, r24
    58c8:	cb 01       	movw	r24, r22
    58ca:	aa 27       	eor	r26, r26
    58cc:	97 fd       	sbrc	r25, 7
    58ce:	a0 95       	com	r26
    58d0:	ba 2f       	mov	r27, r26
    58d2:	bc 01       	movw	r22, r24
    58d4:	cd 01       	movw	r24, r26
    58d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    58da:	9b 01       	movw	r18, r22
    58dc:	ac 01       	movw	r20, r24
    58de:	8e 01       	movw	r16, r28
    58e0:	04 59       	subi	r16, 0x94	; 148
    58e2:	1f 4f       	sbci	r17, 0xFF	; 255
    58e4:	fe 01       	movw	r30, r28
    58e6:	e4 59       	subi	r30, 0x94	; 148
    58e8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ea:	60 81       	ld	r22, Z
    58ec:	71 81       	ldd	r23, Z+1	; 0x01
    58ee:	82 81       	ldd	r24, Z+2	; 0x02
    58f0:	93 81       	ldd	r25, Z+3	; 0x03
    58f2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	f8 01       	movw	r30, r16
    58fc:	80 83       	st	Z, r24
    58fe:	91 83       	std	Z+1, r25	; 0x01
    5900:	a2 83       	std	Z+2, r26	; 0x02
    5902:	b3 83       	std	Z+3, r27	; 0x03
			pu8DataCpy = pu8DataCpy*10 ;
    5904:	8e 01       	movw	r16, r28
    5906:	04 59       	subi	r16, 0x94	; 148
    5908:	1f 4f       	sbci	r17, 0xFF	; 255
    590a:	fe 01       	movw	r30, r28
    590c:	e4 59       	subi	r30, 0x94	; 148
    590e:	ff 4f       	sbci	r31, 0xFF	; 255
    5910:	60 81       	ld	r22, Z
    5912:	71 81       	ldd	r23, Z+1	; 0x01
    5914:	82 81       	ldd	r24, Z+2	; 0x02
    5916:	93 81       	ldd	r25, Z+3	; 0x03
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	40 e2       	ldi	r20, 0x20	; 32
    591e:	51 e4       	ldi	r21, 0x41	; 65
    5920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	f8 01       	movw	r30, r16
    592a:	80 83       	st	Z, r24
    592c:	91 83       	std	Z+1, r25	; 0x01
    592e:	a2 83       	std	Z+2, r26	; 0x02
    5930:	b3 83       	std	Z+3, r27	; 0x03
			temp = (int)pu8DataCpy + '0';
    5932:	fe 01       	movw	r30, r28
    5934:	e4 59       	subi	r30, 0x94	; 148
    5936:	ff 4f       	sbci	r31, 0xFF	; 255
    5938:	60 81       	ld	r22, Z
    593a:	71 81       	ldd	r23, Z+1	; 0x01
    593c:	82 81       	ldd	r24, Z+2	; 0x02
    593e:	93 81       	ldd	r25, Z+3	; 0x03
    5940:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5944:	dc 01       	movw	r26, r24
    5946:	cb 01       	movw	r24, r22
    5948:	c0 96       	adiw	r24, 0x30	; 48
    594a:	aa 27       	eor	r26, r26
    594c:	97 fd       	sbrc	r25, 7
    594e:	a0 95       	com	r26
    5950:	ba 2f       	mov	r27, r26
    5952:	bc 01       	movw	r22, r24
    5954:	cd 01       	movw	r24, r26
    5956:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	89 83       	std	Y+1, r24	; 0x01
    5960:	9a 83       	std	Y+2, r25	; 0x02
    5962:	ab 83       	std	Y+3, r26	; 0x03
    5964:	bc 83       	std	Y+4, r27	; 0x04
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
    5966:	69 81       	ldd	r22, Y+1	; 0x01
    5968:	7a 81       	ldd	r23, Y+2	; 0x02
    596a:	8b 81       	ldd	r24, Y+3	; 0x03
    596c:	9c 81       	ldd	r25, Y+4	; 0x04
    596e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	98 2f       	mov	r25, r24
    5978:	fe 01       	movw	r30, r28
    597a:	e5 59       	subi	r30, 0x95	; 149
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 81       	ld	r24, Z
    5980:	69 2f       	mov	r22, r25
    5982:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>

	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){

		LCD_enuWriteChar(u8LcdNumCpy , '.');

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    5986:	8d 81       	ldd	r24, Y+5	; 0x05
    5988:	8f 5f       	subi	r24, 0xFF	; 255
    598a:	8d 83       	std	Y+5, r24	; 0x05
    598c:	8d 81       	ldd	r24, Y+5	; 0x05
    598e:	84 30       	cpi	r24, 0x04	; 4
    5990:	0c f4       	brge	.+2      	; 0x5994 <LCD_enuWritenumber+0x2dc>
    5992:	90 cf       	rjmp	.-224    	; 0x58b4 <LCD_enuWritenumber+0x1fc>
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
		}

	}

}
    5994:	c1 59       	subi	r28, 0x91	; 145
    5996:	df 4f       	sbci	r29, 0xFF	; 255
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	f8 94       	cli
    599c:	de bf       	out	0x3e, r29	; 62
    599e:	0f be       	out	0x3f, r0	; 63
    59a0:	cd bf       	out	0x3d, r28	; 61
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	1f 91       	pop	r17
    59a8:	0f 91       	pop	r16
    59aa:	08 95       	ret

000059ac <LCD_enuCreateCustChar>:



tenuErrorStatus LCD_enuCreateCustChar (uint8 u8LcdNumCpy , uint8 *pu8PatternCpy , uint8 u8LocationCpy) 
{
    59ac:	df 93       	push	r29
    59ae:	cf 93       	push	r28
    59b0:	00 d0       	rcall	.+0      	; 0x59b2 <LCD_enuCreateCustChar+0x6>
    59b2:	00 d0       	rcall	.+0      	; 0x59b4 <LCD_enuCreateCustChar+0x8>
    59b4:	00 d0       	rcall	.+0      	; 0x59b6 <LCD_enuCreateCustChar+0xa>
    59b6:	cd b7       	in	r28, 0x3d	; 61
    59b8:	de b7       	in	r29, 0x3e	; 62
    59ba:	8b 83       	std	Y+3, r24	; 0x03
    59bc:	7d 83       	std	Y+5, r23	; 0x05
    59be:	6c 83       	std	Y+4, r22	; 0x04
    59c0:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    59c2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    59c4:	8b 81       	ldd	r24, Y+3	; 0x03
    59c6:	82 30       	cpi	r24, 0x02	; 2
    59c8:	40 f5       	brcc	.+80     	; 0x5a1a <LCD_enuCreateCustChar+0x6e>
    59ca:	8e 81       	ldd	r24, Y+6	; 0x06
    59cc:	89 30       	cpi	r24, 0x09	; 9
    59ce:	28 f5       	brcc	.+74     	; 0x5a1a <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
    59d0:	8e 81       	ldd	r24, Y+6	; 0x06
    59d2:	88 2f       	mov	r24, r24
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	08 96       	adiw	r24, 0x08	; 8
    59d8:	88 0f       	add	r24, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	88 0f       	add	r24, r24
    59de:	99 1f       	adc	r25, r25
    59e0:	88 0f       	add	r24, r24
    59e2:	99 1f       	adc	r25, r25
    59e4:	98 2f       	mov	r25, r24
    59e6:	8b 81       	ldd	r24, Y+3	; 0x03
    59e8:	69 2f       	mov	r22, r25
    59ea:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    59ee:	19 82       	std	Y+1, r1	; 0x01
    59f0:	10 c0       	rjmp	.+32     	; 0x5a12 <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy ,pu8PatternCpy[u8CntrLoc] );
    59f2:	89 81       	ldd	r24, Y+1	; 0x01
    59f4:	28 2f       	mov	r18, r24
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	8c 81       	ldd	r24, Y+4	; 0x04
    59fa:	9d 81       	ldd	r25, Y+5	; 0x05
    59fc:	fc 01       	movw	r30, r24
    59fe:	e2 0f       	add	r30, r18
    5a00:	f3 1f       	adc	r31, r19
    5a02:	90 81       	ld	r25, Z
    5a04:	8b 81       	ldd	r24, Y+3	; 0x03
    5a06:	69 2f       	mov	r22, r25
    5a08:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	8f 5f       	subi	r24, 0xFF	; 255
    5a10:	89 83       	std	Y+1, r24	; 0x01
    5a12:	89 81       	ldd	r24, Y+1	; 0x01
    5a14:	88 30       	cpi	r24, 0x08	; 8
    5a16:	68 f3       	brcs	.-38     	; 0x59f2 <LCD_enuCreateCustChar+0x46>
    5a18:	02 c0       	rjmp	.+4      	; 0x5a1e <LCD_enuCreateCustChar+0x72>
		}
		
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    5a1a:	82 e0       	ldi	r24, 0x02	; 2
    5a1c:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return enuErrorStateLoc ;
    5a1e:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    5a20:	26 96       	adiw	r28, 0x06	; 6
    5a22:	0f b6       	in	r0, 0x3f	; 63
    5a24:	f8 94       	cli
    5a26:	de bf       	out	0x3e, r29	; 62
    5a28:	0f be       	out	0x3f, r0	; 63
    5a2a:	cd bf       	out	0x3d, r28	; 61
    5a2c:	cf 91       	pop	r28
    5a2e:	df 91       	pop	r29
    5a30:	08 95       	ret

00005a32 <KEYPAD_voidInit>:
#include "KEYPAD_int.h"
#include "KEYPAD_config.h"
#include "KEYPAD_priv.h"

void KEYPAD_voidInit()
{
    5a32:	df 93       	push	r29
    5a34:	cf 93       	push	r28
    5a36:	cd b7       	in	r28, 0x3d	; 61
    5a38:	de b7       	in	r29, 0x3e	; 62
	/** activate pull up resistor column / inputs 	  */
	DIO_enuWritePin(KEYPAD_U8_COLUMN_1 ,DIO_u8HIGH );
    5a3a:	83 e1       	ldi	r24, 0x13	; 19
    5a3c:	61 e0       	ldi	r22, 0x01	; 1
    5a3e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_2 ,DIO_u8HIGH );
    5a42:	84 e1       	ldi	r24, 0x14	; 20
    5a44:	61 e0       	ldi	r22, 0x01	; 1
    5a46:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_3 ,DIO_u8HIGH );
    5a4a:	85 e1       	ldi	r24, 0x15	; 21
    5a4c:	61 e0       	ldi	r22, 0x01	; 1
    5a4e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_4 ,DIO_u8HIGH );
    5a52:	86 e1       	ldi	r24, 0x16	; 22
    5a54:	61 e0       	ldi	r22, 0x01	; 1
    5a56:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

	/** OUTPUT		 1	  */
	DIO_enuWritePin(KEYPAD_U8_ROW_1 ,DIO_u8HIGH );
    5a5a:	87 e1       	ldi	r24, 0x17	; 23
    5a5c:	61 e0       	ldi	r22, 0x01	; 1
    5a5e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_2 ,DIO_u8HIGH );
    5a62:	88 e1       	ldi	r24, 0x18	; 24
    5a64:	61 e0       	ldi	r22, 0x01	; 1
    5a66:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_3 ,DIO_u8HIGH );
    5a6a:	89 e1       	ldi	r24, 0x19	; 25
    5a6c:	61 e0       	ldi	r22, 0x01	; 1
    5a6e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_4 ,DIO_u8HIGH );
    5a72:	8a e1       	ldi	r24, 0x1A	; 26
    5a74:	61 e0       	ldi	r22, 0x01	; 1
    5a76:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

}
    5a7a:	cf 91       	pop	r28
    5a7c:	df 91       	pop	r29
    5a7e:	08 95       	ret

00005a80 <KEYPAD_uint8GetPressedKey>:

uint8 KEYPAD_uint8GetPressedKey(void)
{
    5a80:	df 93       	push	r29
    5a82:	cf 93       	push	r28
    5a84:	cd b7       	in	r28, 0x3d	; 61
    5a86:	de b7       	in	r29, 0x3e	; 62
    5a88:	2e 97       	sbiw	r28, 0x0e	; 14
    5a8a:	0f b6       	in	r0, 0x3f	; 63
    5a8c:	f8 94       	cli
    5a8e:	de bf       	out	0x3e, r29	; 62
    5a90:	0f be       	out	0x3f, r0	; 63
    5a92:	cd bf       	out	0x3d, r28	; 61
	uint8 u8one,u8two,u8three,u8four;
	uint8 LOC_uint8preesed = 0XFF;
    5a94:	8f ef       	ldi	r24, 0xFF	; 255
    5a96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LOC_uint8ColumnValue ;
	/**   !comment : send row sequence  1  */

	DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8LOW);
    5a98:	87 e1       	ldi	r24, 0x17	; 23
    5a9a:	60 e0       	ldi	r22, 0x00	; 0
    5a9c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    5aa0:	88 e1       	ldi	r24, 0x18	; 24
    5aa2:	61 e0       	ldi	r22, 0x01	; 1
    5aa4:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5aa8:	89 e1       	ldi	r24, 0x19	; 25
    5aaa:	61 e0       	ldi	r22, 0x01	; 1
    5aac:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5ab0:	8a e1       	ldi	r24, 0x1A	; 26
    5ab2:	61 e0       	ldi	r22, 0x01	; 1
    5ab4:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

	/**   !comment : Read columns  */
	DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5ab8:	9e 01       	movw	r18, r28
    5aba:	2d 5f       	subi	r18, 0xFD	; 253
    5abc:	3f 4f       	sbci	r19, 0xFF	; 255
    5abe:	83 e1       	ldi	r24, 0x13	; 19
    5ac0:	b9 01       	movw	r22, r18
    5ac2:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5ac6:	9e 01       	movw	r18, r28
    5ac8:	2c 5f       	subi	r18, 0xFC	; 252
    5aca:	3f 4f       	sbci	r19, 0xFF	; 255
    5acc:	84 e1       	ldi	r24, 0x14	; 20
    5ace:	b9 01       	movw	r22, r18
    5ad0:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5ad4:	9e 01       	movw	r18, r28
    5ad6:	2b 5f       	subi	r18, 0xFB	; 251
    5ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    5ada:	85 e1       	ldi	r24, 0x15	; 21
    5adc:	b9 01       	movw	r22, r18
    5ade:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5ae2:	9e 01       	movw	r18, r28
    5ae4:	2a 5f       	subi	r18, 0xFA	; 250
    5ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ae8:	86 e1       	ldi	r24, 0x16	; 22
    5aea:	b9 01       	movw	r22, r18
    5aec:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>


	LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5af0:	8c 81       	ldd	r24, Y+4	; 0x04
    5af2:	88 2f       	mov	r24, r24
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	88 0f       	add	r24, r24
    5af8:	99 1f       	adc	r25, r25
    5afa:	98 2f       	mov	r25, r24
    5afc:	8b 81       	ldd	r24, Y+3	; 0x03
    5afe:	29 2f       	mov	r18, r25
    5b00:	28 2b       	or	r18, r24
    5b02:	8d 81       	ldd	r24, Y+5	; 0x05
    5b04:	88 2f       	mov	r24, r24
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	88 0f       	add	r24, r24
    5b0a:	99 1f       	adc	r25, r25
    5b0c:	88 0f       	add	r24, r24
    5b0e:	99 1f       	adc	r25, r25
    5b10:	28 2b       	or	r18, r24
    5b12:	8e 81       	ldd	r24, Y+6	; 0x06
    5b14:	88 2f       	mov	r24, r24
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	88 0f       	add	r24, r24
    5b1a:	99 1f       	adc	r25, r25
    5b1c:	88 0f       	add	r24, r24
    5b1e:	99 1f       	adc	r25, r25
    5b20:	88 0f       	add	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	82 2b       	or	r24, r18
    5b26:	89 83       	std	Y+1, r24	; 0x01




	switch(LOC_uint8ColumnValue)
    5b28:	89 81       	ldd	r24, Y+1	; 0x01
    5b2a:	28 2f       	mov	r18, r24
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	3e 87       	std	Y+14, r19	; 0x0e
    5b30:	2d 87       	std	Y+13, r18	; 0x0d
    5b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b36:	8b 30       	cpi	r24, 0x0B	; 11
    5b38:	91 05       	cpc	r25, r1
    5b3a:	d9 f0       	breq	.+54     	; 0x5b72 <KEYPAD_uint8GetPressedKey+0xf2>
    5b3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5b3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5b40:	2c 30       	cpi	r18, 0x0C	; 12
    5b42:	31 05       	cpc	r19, r1
    5b44:	34 f4       	brge	.+12     	; 0x5b52 <KEYPAD_uint8GetPressedKey+0xd2>
    5b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b4a:	87 30       	cpi	r24, 0x07	; 7
    5b4c:	91 05       	cpc	r25, r1
    5b4e:	a1 f0       	breq	.+40     	; 0x5b78 <KEYPAD_uint8GetPressedKey+0xf8>
    5b50:	16 c0       	rjmp	.+44     	; 0x5b7e <KEYPAD_uint8GetPressedKey+0xfe>
    5b52:	2d 85       	ldd	r18, Y+13	; 0x0d
    5b54:	3e 85       	ldd	r19, Y+14	; 0x0e
    5b56:	2d 30       	cpi	r18, 0x0D	; 13
    5b58:	31 05       	cpc	r19, r1
    5b5a:	41 f0       	breq	.+16     	; 0x5b6c <KEYPAD_uint8GetPressedKey+0xec>
    5b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b60:	8e 30       	cpi	r24, 0x0E	; 14
    5b62:	91 05       	cpc	r25, r1
    5b64:	61 f4       	brne	.+24     	; 0x5b7e <KEYPAD_uint8GetPressedKey+0xfe>
	{
	case 0b00001110: LOC_uint8preesed = '7' ;
    5b66:	87 e3       	ldi	r24, 0x37	; 55
    5b68:	8a 83       	std	Y+2, r24	; 0x02
    5b6a:	0b c0       	rjmp	.+22     	; 0x5b82 <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00001101: LOC_uint8preesed = '8' ;
    5b6c:	88 e3       	ldi	r24, 0x38	; 56
    5b6e:	8a 83       	std	Y+2, r24	; 0x02
    5b70:	08 c0       	rjmp	.+16     	; 0x5b82 <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00001011: LOC_uint8preesed = '9' ;
    5b72:	89 e3       	ldi	r24, 0x39	; 57
    5b74:	8a 83       	std	Y+2, r24	; 0x02
    5b76:	05 c0       	rjmp	.+10     	; 0x5b82 <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00000111: LOC_uint8preesed = '/' ;
    5b78:	8f e2       	ldi	r24, 0x2F	; 47
    5b7a:	8a 83       	std	Y+2, r24	; 0x02
    5b7c:	02 c0       	rjmp	.+4      	; 0x5b82 <KEYPAD_uint8GetPressedKey+0x102>
	break;

	default : LOC_uint8preesed = 0XFF ;
    5b7e:	8f ef       	ldi	r24, 0xFF	; 255
    5b80:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(LOC_uint8preesed == 0XFF)
    5b82:	8a 81       	ldd	r24, Y+2	; 0x02
    5b84:	8f 3f       	cpi	r24, 0xFF	; 255
    5b86:	09 f0       	breq	.+2      	; 0x5b8a <KEYPAD_uint8GetPressedKey+0x10a>
    5b88:	75 c0       	rjmp	.+234    	; 0x5c74 <KEYPAD_uint8GetPressedKey+0x1f4>
	{
		/**   !comment : send row sequence  2  */

		DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8HIGH);
    5b8a:	87 e1       	ldi	r24, 0x17	; 23
    5b8c:	61 e0       	ldi	r22, 0x01	; 1
    5b8e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8LOW);
    5b92:	88 e1       	ldi	r24, 0x18	; 24
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5b9a:	89 e1       	ldi	r24, 0x19	; 25
    5b9c:	61 e0       	ldi	r22, 0x01	; 1
    5b9e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5ba2:	8a e1       	ldi	r24, 0x1A	; 26
    5ba4:	61 e0       	ldi	r22, 0x01	; 1
    5ba6:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

		/**   !comment : Read columns  */

		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5baa:	9e 01       	movw	r18, r28
    5bac:	2d 5f       	subi	r18, 0xFD	; 253
    5bae:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb0:	83 e1       	ldi	r24, 0x13	; 19
    5bb2:	b9 01       	movw	r22, r18
    5bb4:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5bb8:	9e 01       	movw	r18, r28
    5bba:	2c 5f       	subi	r18, 0xFC	; 252
    5bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5bbe:	84 e1       	ldi	r24, 0x14	; 20
    5bc0:	b9 01       	movw	r22, r18
    5bc2:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5bc6:	9e 01       	movw	r18, r28
    5bc8:	2b 5f       	subi	r18, 0xFB	; 251
    5bca:	3f 4f       	sbci	r19, 0xFF	; 255
    5bcc:	85 e1       	ldi	r24, 0x15	; 21
    5bce:	b9 01       	movw	r22, r18
    5bd0:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5bd4:	9e 01       	movw	r18, r28
    5bd6:	2a 5f       	subi	r18, 0xFA	; 250
    5bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bda:	86 e1       	ldi	r24, 0x16	; 22
    5bdc:	b9 01       	movw	r22, r18
    5bde:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5be2:	8c 81       	ldd	r24, Y+4	; 0x04
    5be4:	88 2f       	mov	r24, r24
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	88 0f       	add	r24, r24
    5bea:	99 1f       	adc	r25, r25
    5bec:	98 2f       	mov	r25, r24
    5bee:	8b 81       	ldd	r24, Y+3	; 0x03
    5bf0:	29 2f       	mov	r18, r25
    5bf2:	28 2b       	or	r18, r24
    5bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bf6:	88 2f       	mov	r24, r24
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	88 0f       	add	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	88 0f       	add	r24, r24
    5c00:	99 1f       	adc	r25, r25
    5c02:	28 2b       	or	r18, r24
    5c04:	8e 81       	ldd	r24, Y+6	; 0x06
    5c06:	88 2f       	mov	r24, r24
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	88 0f       	add	r24, r24
    5c0c:	99 1f       	adc	r25, r25
    5c0e:	88 0f       	add	r24, r24
    5c10:	99 1f       	adc	r25, r25
    5c12:	88 0f       	add	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	82 2b       	or	r24, r18
    5c18:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    5c1a:	89 81       	ldd	r24, Y+1	; 0x01
    5c1c:	28 2f       	mov	r18, r24
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	3c 87       	std	Y+12, r19	; 0x0c
    5c22:	2b 87       	std	Y+11, r18	; 0x0b
    5c24:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c26:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c28:	8b 30       	cpi	r24, 0x0B	; 11
    5c2a:	91 05       	cpc	r25, r1
    5c2c:	d9 f0       	breq	.+54     	; 0x5c64 <KEYPAD_uint8GetPressedKey+0x1e4>
    5c2e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c30:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c32:	2c 30       	cpi	r18, 0x0C	; 12
    5c34:	31 05       	cpc	r19, r1
    5c36:	34 f4       	brge	.+12     	; 0x5c44 <KEYPAD_uint8GetPressedKey+0x1c4>
    5c38:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c3c:	87 30       	cpi	r24, 0x07	; 7
    5c3e:	91 05       	cpc	r25, r1
    5c40:	a1 f0       	breq	.+40     	; 0x5c6a <KEYPAD_uint8GetPressedKey+0x1ea>
    5c42:	16 c0       	rjmp	.+44     	; 0x5c70 <KEYPAD_uint8GetPressedKey+0x1f0>
    5c44:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c46:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c48:	2d 30       	cpi	r18, 0x0D	; 13
    5c4a:	31 05       	cpc	r19, r1
    5c4c:	41 f0       	breq	.+16     	; 0x5c5e <KEYPAD_uint8GetPressedKey+0x1de>
    5c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c50:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c52:	8e 30       	cpi	r24, 0x0E	; 14
    5c54:	91 05       	cpc	r25, r1
    5c56:	61 f4       	brne	.+24     	; 0x5c70 <KEYPAD_uint8GetPressedKey+0x1f0>
		{
		case 0b00001110: LOC_uint8preesed = '4' ;
    5c58:	84 e3       	ldi	r24, 0x34	; 52
    5c5a:	8a 83       	std	Y+2, r24	; 0x02
    5c5c:	0b c0       	rjmp	.+22     	; 0x5c74 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00001101: LOC_uint8preesed = '5' ;
    5c5e:	85 e3       	ldi	r24, 0x35	; 53
    5c60:	8a 83       	std	Y+2, r24	; 0x02
    5c62:	08 c0       	rjmp	.+16     	; 0x5c74 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00001011: LOC_uint8preesed = '6' ;
    5c64:	86 e3       	ldi	r24, 0x36	; 54
    5c66:	8a 83       	std	Y+2, r24	; 0x02
    5c68:	05 c0       	rjmp	.+10     	; 0x5c74 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00000111: LOC_uint8preesed = '*' ;
    5c6a:	8a e2       	ldi	r24, 0x2A	; 42
    5c6c:	8a 83       	std	Y+2, r24	; 0x02
    5c6e:	02 c0       	rjmp	.+4      	; 0x5c74 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		default : LOC_uint8preesed = 0XFF ;
    5c70:	8f ef       	ldi	r24, 0xFF	; 255
    5c72:	8a 83       	std	Y+2, r24	; 0x02
		}

	}
	if(LOC_uint8preesed == 0XFF)
    5c74:	8a 81       	ldd	r24, Y+2	; 0x02
    5c76:	8f 3f       	cpi	r24, 0xFF	; 255
    5c78:	09 f0       	breq	.+2      	; 0x5c7c <KEYPAD_uint8GetPressedKey+0x1fc>
    5c7a:	75 c0       	rjmp	.+234    	; 0x5d66 <KEYPAD_uint8GetPressedKey+0x2e6>
	{
		/**   !comment : send row sequence  3  */

		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5c7c:	8a e1       	ldi	r24, 0x1A	; 26
    5c7e:	61 e0       	ldi	r22, 0x01	; 1
    5c80:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    5c84:	88 e1       	ldi	r24, 0x18	; 24
    5c86:	61 e0       	ldi	r22, 0x01	; 1
    5c88:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8LOW);
    5c8c:	89 e1       	ldi	r24, 0x19	; 25
    5c8e:	60 e0       	ldi	r22, 0x00	; 0
    5c90:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5c94:	8a e1       	ldi	r24, 0x1A	; 26
    5c96:	61 e0       	ldi	r22, 0x01	; 1
    5c98:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

		/**   !comment : Read columns  */
		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5c9c:	9e 01       	movw	r18, r28
    5c9e:	2d 5f       	subi	r18, 0xFD	; 253
    5ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca2:	83 e1       	ldi	r24, 0x13	; 19
    5ca4:	b9 01       	movw	r22, r18
    5ca6:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5caa:	9e 01       	movw	r18, r28
    5cac:	2c 5f       	subi	r18, 0xFC	; 252
    5cae:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb0:	84 e1       	ldi	r24, 0x14	; 20
    5cb2:	b9 01       	movw	r22, r18
    5cb4:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5cb8:	9e 01       	movw	r18, r28
    5cba:	2b 5f       	subi	r18, 0xFB	; 251
    5cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cbe:	85 e1       	ldi	r24, 0x15	; 21
    5cc0:	b9 01       	movw	r22, r18
    5cc2:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5cc6:	9e 01       	movw	r18, r28
    5cc8:	2a 5f       	subi	r18, 0xFA	; 250
    5cca:	3f 4f       	sbci	r19, 0xFF	; 255
    5ccc:	86 e1       	ldi	r24, 0x16	; 22
    5cce:	b9 01       	movw	r22, r18
    5cd0:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    5cd6:	88 2f       	mov	r24, r24
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	88 0f       	add	r24, r24
    5cdc:	99 1f       	adc	r25, r25
    5cde:	98 2f       	mov	r25, r24
    5ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce2:	29 2f       	mov	r18, r25
    5ce4:	28 2b       	or	r18, r24
    5ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce8:	88 2f       	mov	r24, r24
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	88 0f       	add	r24, r24
    5cee:	99 1f       	adc	r25, r25
    5cf0:	88 0f       	add	r24, r24
    5cf2:	99 1f       	adc	r25, r25
    5cf4:	28 2b       	or	r18, r24
    5cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    5cf8:	88 2f       	mov	r24, r24
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	88 0f       	add	r24, r24
    5cfe:	99 1f       	adc	r25, r25
    5d00:	88 0f       	add	r24, r24
    5d02:	99 1f       	adc	r25, r25
    5d04:	88 0f       	add	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	82 2b       	or	r24, r18
    5d0a:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    5d0c:	89 81       	ldd	r24, Y+1	; 0x01
    5d0e:	28 2f       	mov	r18, r24
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	3a 87       	std	Y+10, r19	; 0x0a
    5d14:	29 87       	std	Y+9, r18	; 0x09
    5d16:	89 85       	ldd	r24, Y+9	; 0x09
    5d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d1a:	8b 30       	cpi	r24, 0x0B	; 11
    5d1c:	91 05       	cpc	r25, r1
    5d1e:	d9 f0       	breq	.+54     	; 0x5d56 <KEYPAD_uint8GetPressedKey+0x2d6>
    5d20:	29 85       	ldd	r18, Y+9	; 0x09
    5d22:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d24:	2c 30       	cpi	r18, 0x0C	; 12
    5d26:	31 05       	cpc	r19, r1
    5d28:	34 f4       	brge	.+12     	; 0x5d36 <KEYPAD_uint8GetPressedKey+0x2b6>
    5d2a:	89 85       	ldd	r24, Y+9	; 0x09
    5d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d2e:	87 30       	cpi	r24, 0x07	; 7
    5d30:	91 05       	cpc	r25, r1
    5d32:	a1 f0       	breq	.+40     	; 0x5d5c <KEYPAD_uint8GetPressedKey+0x2dc>
    5d34:	16 c0       	rjmp	.+44     	; 0x5d62 <KEYPAD_uint8GetPressedKey+0x2e2>
    5d36:	29 85       	ldd	r18, Y+9	; 0x09
    5d38:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d3a:	2d 30       	cpi	r18, 0x0D	; 13
    5d3c:	31 05       	cpc	r19, r1
    5d3e:	41 f0       	breq	.+16     	; 0x5d50 <KEYPAD_uint8GetPressedKey+0x2d0>
    5d40:	89 85       	ldd	r24, Y+9	; 0x09
    5d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d44:	8e 30       	cpi	r24, 0x0E	; 14
    5d46:	91 05       	cpc	r25, r1
    5d48:	61 f4       	brne	.+24     	; 0x5d62 <KEYPAD_uint8GetPressedKey+0x2e2>
		{


		case 0b00001110: LOC_uint8preesed = '1' ;
    5d4a:	81 e3       	ldi	r24, 0x31	; 49
    5d4c:	8a 83       	std	Y+2, r24	; 0x02
    5d4e:	0b c0       	rjmp	.+22     	; 0x5d66 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00001101: LOC_uint8preesed = '2' ;
    5d50:	82 e3       	ldi	r24, 0x32	; 50
    5d52:	8a 83       	std	Y+2, r24	; 0x02
    5d54:	08 c0       	rjmp	.+16     	; 0x5d66 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00001011: LOC_uint8preesed = '3' ;
    5d56:	83 e3       	ldi	r24, 0x33	; 51
    5d58:	8a 83       	std	Y+2, r24	; 0x02
    5d5a:	05 c0       	rjmp	.+10     	; 0x5d66 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00000111: LOC_uint8preesed = '-' ;
    5d5c:	8d e2       	ldi	r24, 0x2D	; 45
    5d5e:	8a 83       	std	Y+2, r24	; 0x02
    5d60:	02 c0       	rjmp	.+4      	; 0x5d66 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		default : LOC_uint8preesed = 0XFF ;
    5d62:	8f ef       	ldi	r24, 0xFF	; 255
    5d64:	8a 83       	std	Y+2, r24	; 0x02
		}

	}
	if(LOC_uint8preesed == 0XFF)
    5d66:	8a 81       	ldd	r24, Y+2	; 0x02
    5d68:	8f 3f       	cpi	r24, 0xFF	; 255
    5d6a:	09 f0       	breq	.+2      	; 0x5d6e <KEYPAD_uint8GetPressedKey+0x2ee>
    5d6c:	75 c0       	rjmp	.+234    	; 0x5e58 <KEYPAD_uint8GetPressedKey+0x3d8>
	{

		/**   !comment : send row sequence  4  */

		DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8HIGH);
    5d6e:	87 e1       	ldi	r24, 0x17	; 23
    5d70:	61 e0       	ldi	r22, 0x01	; 1
    5d72:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    5d76:	88 e1       	ldi	r24, 0x18	; 24
    5d78:	61 e0       	ldi	r22, 0x01	; 1
    5d7a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5d7e:	89 e1       	ldi	r24, 0x19	; 25
    5d80:	61 e0       	ldi	r22, 0x01	; 1
    5d82:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8LOW);
    5d86:	8a e1       	ldi	r24, 0x1A	; 26
    5d88:	60 e0       	ldi	r22, 0x00	; 0
    5d8a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>

		/**   !comment : Read columns  */

		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5d8e:	9e 01       	movw	r18, r28
    5d90:	2d 5f       	subi	r18, 0xFD	; 253
    5d92:	3f 4f       	sbci	r19, 0xFF	; 255
    5d94:	83 e1       	ldi	r24, 0x13	; 19
    5d96:	b9 01       	movw	r22, r18
    5d98:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5d9c:	9e 01       	movw	r18, r28
    5d9e:	2c 5f       	subi	r18, 0xFC	; 252
    5da0:	3f 4f       	sbci	r19, 0xFF	; 255
    5da2:	84 e1       	ldi	r24, 0x14	; 20
    5da4:	b9 01       	movw	r22, r18
    5da6:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5daa:	9e 01       	movw	r18, r28
    5dac:	2b 5f       	subi	r18, 0xFB	; 251
    5dae:	3f 4f       	sbci	r19, 0xFF	; 255
    5db0:	85 e1       	ldi	r24, 0x15	; 21
    5db2:	b9 01       	movw	r22, r18
    5db4:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5db8:	9e 01       	movw	r18, r28
    5dba:	2a 5f       	subi	r18, 0xFA	; 250
    5dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5dbe:	86 e1       	ldi	r24, 0x16	; 22
    5dc0:	b9 01       	movw	r22, r18
    5dc2:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    5dc8:	88 2f       	mov	r24, r24
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	88 0f       	add	r24, r24
    5dce:	99 1f       	adc	r25, r25
    5dd0:	98 2f       	mov	r25, r24
    5dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    5dd4:	29 2f       	mov	r18, r25
    5dd6:	28 2b       	or	r18, r24
    5dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dda:	88 2f       	mov	r24, r24
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	88 0f       	add	r24, r24
    5de0:	99 1f       	adc	r25, r25
    5de2:	88 0f       	add	r24, r24
    5de4:	99 1f       	adc	r25, r25
    5de6:	28 2b       	or	r18, r24
    5de8:	8e 81       	ldd	r24, Y+6	; 0x06
    5dea:	88 2f       	mov	r24, r24
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	88 0f       	add	r24, r24
    5df0:	99 1f       	adc	r25, r25
    5df2:	88 0f       	add	r24, r24
    5df4:	99 1f       	adc	r25, r25
    5df6:	88 0f       	add	r24, r24
    5df8:	99 1f       	adc	r25, r25
    5dfa:	82 2b       	or	r24, r18
    5dfc:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	28 2f       	mov	r18, r24
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	38 87       	std	Y+8, r19	; 0x08
    5e06:	2f 83       	std	Y+7, r18	; 0x07
    5e08:	8f 81       	ldd	r24, Y+7	; 0x07
    5e0a:	98 85       	ldd	r25, Y+8	; 0x08
    5e0c:	8b 30       	cpi	r24, 0x0B	; 11
    5e0e:	91 05       	cpc	r25, r1
    5e10:	d9 f0       	breq	.+54     	; 0x5e48 <KEYPAD_uint8GetPressedKey+0x3c8>
    5e12:	2f 81       	ldd	r18, Y+7	; 0x07
    5e14:	38 85       	ldd	r19, Y+8	; 0x08
    5e16:	2c 30       	cpi	r18, 0x0C	; 12
    5e18:	31 05       	cpc	r19, r1
    5e1a:	34 f4       	brge	.+12     	; 0x5e28 <KEYPAD_uint8GetPressedKey+0x3a8>
    5e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    5e1e:	98 85       	ldd	r25, Y+8	; 0x08
    5e20:	87 30       	cpi	r24, 0x07	; 7
    5e22:	91 05       	cpc	r25, r1
    5e24:	a1 f0       	breq	.+40     	; 0x5e4e <KEYPAD_uint8GetPressedKey+0x3ce>
    5e26:	16 c0       	rjmp	.+44     	; 0x5e54 <KEYPAD_uint8GetPressedKey+0x3d4>
    5e28:	2f 81       	ldd	r18, Y+7	; 0x07
    5e2a:	38 85       	ldd	r19, Y+8	; 0x08
    5e2c:	2d 30       	cpi	r18, 0x0D	; 13
    5e2e:	31 05       	cpc	r19, r1
    5e30:	41 f0       	breq	.+16     	; 0x5e42 <KEYPAD_uint8GetPressedKey+0x3c2>
    5e32:	8f 81       	ldd	r24, Y+7	; 0x07
    5e34:	98 85       	ldd	r25, Y+8	; 0x08
    5e36:	8e 30       	cpi	r24, 0x0E	; 14
    5e38:	91 05       	cpc	r25, r1
    5e3a:	61 f4       	brne	.+24     	; 0x5e54 <KEYPAD_uint8GetPressedKey+0x3d4>
		{
		case 0b00001110: LOC_uint8preesed = '.' ;
    5e3c:	8e e2       	ldi	r24, 0x2E	; 46
    5e3e:	8a 83       	std	Y+2, r24	; 0x02
    5e40:	0b c0       	rjmp	.+22     	; 0x5e58 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00001101: LOC_uint8preesed = '0' ;
    5e42:	80 e3       	ldi	r24, 0x30	; 48
    5e44:	8a 83       	std	Y+2, r24	; 0x02
    5e46:	08 c0       	rjmp	.+16     	; 0x5e58 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00001011: LOC_uint8preesed = '=' ;
    5e48:	8d e3       	ldi	r24, 0x3D	; 61
    5e4a:	8a 83       	std	Y+2, r24	; 0x02
    5e4c:	05 c0       	rjmp	.+10     	; 0x5e58 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00000111: LOC_uint8preesed = '+' ;
    5e4e:	8b e2       	ldi	r24, 0x2B	; 43
    5e50:	8a 83       	std	Y+2, r24	; 0x02
    5e52:	02 c0       	rjmp	.+4      	; 0x5e58 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		default : LOC_uint8preesed = 0xff ;
    5e54:	8f ef       	ldi	r24, 0xFF	; 255
    5e56:	8a 83       	std	Y+2, r24	; 0x02
		}

	}

	return LOC_uint8preesed ;
    5e58:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5e5a:	2e 96       	adiw	r28, 0x0e	; 14
    5e5c:	0f b6       	in	r0, 0x3f	; 63
    5e5e:	f8 94       	cli
    5e60:	de bf       	out	0x3e, r29	; 62
    5e62:	0f be       	out	0x3f, r0	; 63
    5e64:	cd bf       	out	0x3d, r28	; 61
    5e66:	cf 91       	pop	r28
    5e68:	df 91       	pop	r29
    5e6a:	08 95       	ret

00005e6c <EEPROM_voidWrite>:
#include "../../MCAL/I2C/I2C.h"
#include "../../MCAL/I2C/I2C_priv.h"
#include "../EXT_EEPROM/EEPROM_cfg.h"

void EEPROM_voidWrite(uint8 u8AddressCpy , uint8 u8DataCpy)
{
    5e6c:	df 93       	push	r29
    5e6e:	cf 93       	push	r28
    5e70:	00 d0       	rcall	.+0      	; 0x5e72 <EEPROM_voidWrite+0x6>
    5e72:	0f 92       	push	r0
    5e74:	cd b7       	in	r28, 0x3d	; 61
    5e76:	de b7       	in	r29, 0x3e	; 62
    5e78:	8a 83       	std	Y+2, r24	; 0x02
    5e7a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CurrentStatus = 0;
    5e7c:	19 82       	std	Y+1, r1	; 0x01
	TWI_voidStart();
    5e7e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TWI_voidStart>
	u8CurrentStatus = TWI_u8Get_Status();
    5e82:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5e86:	89 83       	std	Y+1, r24	; 0x01
	{
		if(u8CurrentStatus == MASTER_START_CONDITION_TRANSMITTED)
    5e88:	89 81       	ldd	r24, Y+1	; 0x01
    5e8a:	88 30       	cpi	r24, 0x08	; 8
    5e8c:	b9 f4       	brne	.+46     	; 0x5ebc <EEPROM_voidWrite+0x50>
		{
			// Masking SLA + W , so CLR Last Bit
			TWI_voidWrite(EEPROM_ADDRESS|EEPROM_WRITE);
    5e8e:	88 ea       	ldi	r24, 0xA8	; 168
    5e90:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
		}
		else
		{
			return ;
		}
		u8CurrentStatus = TWI_u8Get_Status();
    5e94:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5e98:	89 83       	std	Y+1, r24	; 0x01
		{
			if(u8CurrentStatus == MASTER_SLA_W_TRASMITTED_ACK_RECEIVED)
    5e9a:	89 81       	ldd	r24, Y+1	; 0x01
    5e9c:	88 31       	cpi	r24, 0x18	; 24
    5e9e:	71 f4       	brne	.+28     	; 0x5ebc <EEPROM_voidWrite+0x50>
			{
					/*Write Address In EEPROM*/
					TWI_voidWrite(u8AddressCpy);
    5ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
					u8CurrentStatus = TWI_u8Get_Status();
    5ea6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5eaa:	89 83       	std	Y+1, r24	; 0x01
					if(u8CurrentStatus ==MASTER_DATA_TRANSMITTED_ACK_RECEIVED)
    5eac:	89 81       	ldd	r24, Y+1	; 0x01
    5eae:	88 32       	cpi	r24, 0x28	; 40
    5eb0:	29 f4       	brne	.+10     	; 0x5ebc <EEPROM_voidWrite+0x50>
					{
						/*If ACK Received, We Send the date to be written*/
						TWI_voidWrite(u8DataCpy);
    5eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    5eb4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
						TWI_voidStop();
    5eb8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TWI_voidStop>
			}
		}


	}
}
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    5ec0:	0f 90       	pop	r0
    5ec2:	cf 91       	pop	r28
    5ec4:	df 91       	pop	r29
    5ec6:	08 95       	ret

00005ec8 <EEPROM_voidRead>:

void EEPROM_voidRead(uint8 u8AddressCpy, uint8 *u8DataCpy)
{
    5ec8:	df 93       	push	r29
    5eca:	cf 93       	push	r28
    5ecc:	00 d0       	rcall	.+0      	; 0x5ece <EEPROM_voidRead+0x6>
    5ece:	00 d0       	rcall	.+0      	; 0x5ed0 <EEPROM_voidRead+0x8>
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	8a 83       	std	Y+2, r24	; 0x02
    5ed6:	7c 83       	std	Y+4, r23	; 0x04
    5ed8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CurrentStatus = 0;
    5eda:	19 82       	std	Y+1, r1	; 0x01
    /* Send the Start Bit */
    TWI_voidStart();
    5edc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TWI_voidStart>
    u8CurrentStatus = TWI_u8Get_Status();
    5ee0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5ee4:	89 83       	std	Y+1, r24	; 0x01

    {
    	if(u8CurrentStatus == MASTER_START_CONDITION_TRANSMITTED)
    5ee6:	89 81       	ldd	r24, Y+1	; 0x01
    5ee8:	88 30       	cpi	r24, 0x08	; 8
    5eea:	61 f5       	brne	.+88     	; 0x5f44 <EEPROM_voidRead+0x7c>
    	{
    		// Masking SLA + W , so CLR Last Bit
    		TWI_voidWrite(EEPROM_ADDRESS|EEPROM_WRITE);
    5eec:	88 ea       	ldi	r24, 0xA8	; 168
    5eee:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
    	else
    	{
    		return;
    	}
    }
    u8CurrentStatus = TWI_u8Get_Status();
    5ef2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5ef6:	89 83       	std	Y+1, r24	; 0x01

	{
		if(u8CurrentStatus == MASTER_SLA_W_TRASMITTED_ACK_RECEIVED)
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	88 31       	cpi	r24, 0x18	; 24
    5efc:	19 f5       	brne	.+70     	; 0x5f44 <EEPROM_voidRead+0x7c>
		{
				/*Write Address In EEPROM*/
				TWI_voidWrite(u8AddressCpy);
    5efe:	8a 81       	ldd	r24, Y+2	; 0x02
    5f00:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>
				u8CurrentStatus = TWI_u8Get_Status();
    5f04:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5f08:	89 83       	std	Y+1, r24	; 0x01
				if(u8CurrentStatus ==MASTER_DATA_TRANSMITTED_ACK_RECEIVED)
    5f0a:	89 81       	ldd	r24, Y+1	; 0x01
    5f0c:	88 32       	cpi	r24, 0x28	; 40
    5f0e:	d1 f4       	brne	.+52     	; 0x5f44 <EEPROM_voidRead+0x7c>
				{
					/*If ACK Received, We Send Repeated Start*/


					u8CurrentStatus = TWI_u8Get_Status();
    5f10:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5f14:	89 83       	std	Y+1, r24	; 0x01

					if(u8CurrentStatus == MASTER_DATA_TRANSMITTED_ACK_RECEIVED)
    5f16:	89 81       	ldd	r24, Y+1	; 0x01
    5f18:	88 32       	cpi	r24, 0x28	; 40
    5f1a:	a1 f4       	brne	.+40     	; 0x5f44 <EEPROM_voidRead+0x7c>
					{
						TWI_voidStop();
    5f1c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TWI_voidStop>
						TWI_voidStart();
    5f20:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TWI_voidStart>
						// Masking SLA + R , so CLR Last Bit

						 TWI_voidWrite(EEPROM_ADDRESS|EEPROM_READ);
    5f24:	89 ea       	ldi	r24, 0xA9	; 169
    5f26:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TWI_voidWrite>

						 u8CurrentStatus = TWI_u8Get_Status();
    5f2a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TWI_u8Get_Status>
    5f2e:	89 83       	std	Y+1, r24	; 0x01

						 if(u8CurrentStatus == MASTER_SLA_R_TRANSMITTED_ACK_RECEIVED)
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	80 34       	cpi	r24, 0x40	; 64
    5f34:	39 f4       	brne	.+14     	; 0x5f44 <EEPROM_voidRead+0x7c>
						 {

							 *u8DataCpy = TWI_u8Read_NACK();
    5f36:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <TWI_u8Read_NACK>
    5f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    5f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    5f3e:	80 83       	st	Z, r24
							 TWI_voidStop();
    5f40:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TWI_voidStop>
		{
			return;
		}
	}

}
    5f44:	0f 90       	pop	r0
    5f46:	0f 90       	pop	r0
    5f48:	0f 90       	pop	r0
    5f4a:	0f 90       	pop	r0
    5f4c:	cf 91       	pop	r28
    5f4e:	df 91       	pop	r29
    5f50:	08 95       	ret

00005f52 <DC_Motor_voidInit>:
#include "DC_Motor_priv.h"

uint8 init = 0;

void DC_Motor_voidInit(void)
{
    5f52:	df 93       	push	r29
    5f54:	cf 93       	push	r28
    5f56:	00 d0       	rcall	.+0      	; 0x5f58 <DC_Motor_voidInit+0x6>
    5f58:	0f 92       	push	r0
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	init = 1;
    5f5e:	81 e0       	ldi	r24, 0x01	; 1
    5f60:	80 93 19 02 	sts	0x0219, r24
	for (u8CntrLoc = 0 ; u8CntrLoc < DC_Motor_MAX_NUM ; u8CntrLoc++)
    5f64:	19 82       	std	Y+1, r1	; 0x01
    5f66:	c3 c0       	rjmp	.+390    	; 0x60ee <DC_Motor_voidInit+0x19c>
	{
		switch( (DC_Motor_astrPinMapping[u8CntrLoc].u8PinNumbers) )
    5f68:	89 81       	ldd	r24, Y+1	; 0x01
    5f6a:	28 2f       	mov	r18, r24
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	c9 01       	movw	r24, r18
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	82 0f       	add	r24, r18
    5f76:	93 1f       	adc	r25, r19
    5f78:	88 0f       	add	r24, r24
    5f7a:	99 1f       	adc	r25, r25
    5f7c:	fc 01       	movw	r30, r24
    5f7e:	e0 53       	subi	r30, 0x30	; 48
    5f80:	fe 4f       	sbci	r31, 0xFE	; 254
    5f82:	80 81       	ld	r24, Z
    5f84:	28 2f       	mov	r18, r24
    5f86:	30 e0       	ldi	r19, 0x00	; 0
    5f88:	3b 83       	std	Y+3, r19	; 0x03
    5f8a:	2a 83       	std	Y+2, r18	; 0x02
    5f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f90:	81 30       	cpi	r24, 0x01	; 1
    5f92:	91 05       	cpc	r25, r1
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <DC_Motor_voidInit+0x46>
    5f96:	46 c0       	rjmp	.+140    	; 0x6024 <DC_Motor_voidInit+0xd2>
    5f98:	2a 81       	ldd	r18, Y+2	; 0x02
    5f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    5f9c:	22 30       	cpi	r18, 0x02	; 2
    5f9e:	31 05       	cpc	r19, r1
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <DC_Motor_voidInit+0x52>
    5fa2:	93 c0       	rjmp	.+294    	; 0x60ca <DC_Motor_voidInit+0x178>
		{
		case DC_Motor_intSupply:
			if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map >= DIO_u8PIN_0  &&
    5fa4:	89 81       	ldd	r24, Y+1	; 0x01
    5fa6:	28 2f       	mov	r18, r24
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
    5faa:	c9 01       	movw	r24, r18
    5fac:	88 0f       	add	r24, r24
    5fae:	99 1f       	adc	r25, r25
    5fb0:	82 0f       	add	r24, r18
    5fb2:	93 1f       	adc	r25, r19
    5fb4:	88 0f       	add	r24, r24
    5fb6:	99 1f       	adc	r25, r25
    5fb8:	fc 01       	movw	r30, r24
    5fba:	ed 52       	subi	r30, 0x2D	; 45
    5fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    5fbe:	80 81       	ld	r24, Z
    5fc0:	80 32       	cpi	r24, 0x20	; 32
    5fc2:	00 f5       	brcc	.+64     	; 0x6004 <DC_Motor_voidInit+0xb2>
    5fc4:	89 81       	ldd	r24, Y+1	; 0x01
    5fc6:	28 2f       	mov	r18, r24
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	c9 01       	movw	r24, r18
    5fcc:	88 0f       	add	r24, r24
    5fce:	99 1f       	adc	r25, r25
    5fd0:	82 0f       	add	r24, r18
    5fd2:	93 1f       	adc	r25, r19
    5fd4:	88 0f       	add	r24, r24
    5fd6:	99 1f       	adc	r25, r25
    5fd8:	fc 01       	movw	r30, r24
    5fda:	ec 52       	subi	r30, 0x2C	; 44
    5fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    5fde:	80 81       	ld	r24, Z
    5fe0:	80 32       	cpi	r24, 0x20	; 32
    5fe2:	80 f4       	brcc	.+32     	; 0x6004 <DC_Motor_voidInit+0xb2>


				}
				else
				{
					DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5fe4:	89 81       	ldd	r24, Y+1	; 0x01
    5fe6:	28 2f       	mov	r18, r24
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	c9 01       	movw	r24, r18
    5fec:	88 0f       	add	r24, r24
    5fee:	99 1f       	adc	r25, r25
    5ff0:	82 0f       	add	r24, r18
    5ff2:	93 1f       	adc	r25, r19
    5ff4:	88 0f       	add	r24, r24
    5ff6:	99 1f       	adc	r25, r25
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	eb 52       	subi	r30, 0x2B	; 43
    5ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ffe:	84 e0       	ldi	r24, 0x04	; 4
    6000:	80 83       	st	Z, r24
    6002:	72 c0       	rjmp	.+228    	; 0x60e8 <DC_Motor_voidInit+0x196>
				}
			}
			else
			{
				DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    6004:	89 81       	ldd	r24, Y+1	; 0x01
    6006:	28 2f       	mov	r18, r24
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	c9 01       	movw	r24, r18
    600c:	88 0f       	add	r24, r24
    600e:	99 1f       	adc	r25, r25
    6010:	82 0f       	add	r24, r18
    6012:	93 1f       	adc	r25, r19
    6014:	88 0f       	add	r24, r24
    6016:	99 1f       	adc	r25, r25
    6018:	fc 01       	movw	r30, r24
    601a:	eb 52       	subi	r30, 0x2B	; 43
    601c:	fe 4f       	sbci	r31, 0xFE	; 254
    601e:	82 e0       	ldi	r24, 0x02	; 2
    6020:	80 83       	st	Z, r24
    6022:	62 c0       	rjmp	.+196    	; 0x60e8 <DC_Motor_voidInit+0x196>
			}
		break;

		case DC_Motor_extSupply:
			if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap >= DIO_u8PIN_0  &&
    6024:	89 81       	ldd	r24, Y+1	; 0x01
    6026:	28 2f       	mov	r18, r24
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	c9 01       	movw	r24, r18
    602c:	88 0f       	add	r24, r24
    602e:	99 1f       	adc	r25, r25
    6030:	82 0f       	add	r24, r18
    6032:	93 1f       	adc	r25, r19
    6034:	88 0f       	add	r24, r24
    6036:	99 1f       	adc	r25, r25
    6038:	fc 01       	movw	r30, r24
    603a:	ed 52       	subi	r30, 0x2D	; 45
    603c:	fe 4f       	sbci	r31, 0xFE	; 254
    603e:	80 81       	ld	r24, Z
    6040:	80 32       	cpi	r24, 0x20	; 32
    6042:	98 f5       	brcc	.+102    	; 0x60aa <DC_Motor_voidInit+0x158>

					DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap <= DIO_u8PIN_31)
			{
				if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8extHIGH ||
    6044:	89 81       	ldd	r24, Y+1	; 0x01
    6046:	28 2f       	mov	r18, r24
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	c9 01       	movw	r24, r18
    604c:	88 0f       	add	r24, r24
    604e:	99 1f       	adc	r25, r25
    6050:	82 0f       	add	r24, r18
    6052:	93 1f       	adc	r25, r19
    6054:	01 96       	adiw	r24, 0x01	; 1
    6056:	88 0f       	add	r24, r24
    6058:	99 1f       	adc	r25, r25
    605a:	fc 01       	movw	r30, r24
    605c:	e0 53       	subi	r30, 0x30	; 48
    605e:	fe 4f       	sbci	r31, 0xFE	; 254
    6060:	80 81       	ld	r24, Z
    6062:	8a 3c       	cpi	r24, 0xCA	; 202
    6064:	09 f4       	brne	.+2      	; 0x6068 <DC_Motor_voidInit+0x116>
    6066:	40 c0       	rjmp	.+128    	; 0x60e8 <DC_Motor_voidInit+0x196>
    6068:	89 81       	ldd	r24, Y+1	; 0x01
    606a:	28 2f       	mov	r18, r24
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	c9 01       	movw	r24, r18
    6070:	88 0f       	add	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	82 0f       	add	r24, r18
    6076:	93 1f       	adc	r25, r19
    6078:	01 96       	adiw	r24, 0x01	; 1
    607a:	88 0f       	add	r24, r24
    607c:	99 1f       	adc	r25, r25
    607e:	fc 01       	movw	r30, r24
    6080:	e0 53       	subi	r30, 0x30	; 48
    6082:	fe 4f       	sbci	r31, 0xFE	; 254
    6084:	80 81       	ld	r24, Z
    6086:	85 3c       	cpi	r24, 0xC5	; 197
    6088:	79 f1       	breq	.+94     	; 0x60e8 <DC_Motor_voidInit+0x196>
				{
					//no error
				}
				else
				{
					DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    608a:	89 81       	ldd	r24, Y+1	; 0x01
    608c:	28 2f       	mov	r18, r24
    608e:	30 e0       	ldi	r19, 0x00	; 0
    6090:	c9 01       	movw	r24, r18
    6092:	88 0f       	add	r24, r24
    6094:	99 1f       	adc	r25, r25
    6096:	82 0f       	add	r24, r18
    6098:	93 1f       	adc	r25, r19
    609a:	88 0f       	add	r24, r24
    609c:	99 1f       	adc	r25, r25
    609e:	fc 01       	movw	r30, r24
    60a0:	eb 52       	subi	r30, 0x2B	; 43
    60a2:	fe 4f       	sbci	r31, 0xFE	; 254
    60a4:	84 e0       	ldi	r24, 0x04	; 4
    60a6:	80 83       	st	Z, r24
    60a8:	1f c0       	rjmp	.+62     	; 0x60e8 <DC_Motor_voidInit+0x196>
				}
			}
			else
			{
				DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	28 2f       	mov	r18, r24
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	c9 01       	movw	r24, r18
    60b2:	88 0f       	add	r24, r24
    60b4:	99 1f       	adc	r25, r25
    60b6:	82 0f       	add	r24, r18
    60b8:	93 1f       	adc	r25, r19
    60ba:	88 0f       	add	r24, r24
    60bc:	99 1f       	adc	r25, r25
    60be:	fc 01       	movw	r30, r24
    60c0:	eb 52       	subi	r30, 0x2B	; 43
    60c2:	fe 4f       	sbci	r31, 0xFE	; 254
    60c4:	82 e0       	ldi	r24, 0x02	; 2
    60c6:	80 83       	st	Z, r24
    60c8:	0f c0       	rjmp	.+30     	; 0x60e8 <DC_Motor_voidInit+0x196>
			}

		break;

		default:
			DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    60ca:	89 81       	ldd	r24, Y+1	; 0x01
    60cc:	28 2f       	mov	r18, r24
    60ce:	30 e0       	ldi	r19, 0x00	; 0
    60d0:	c9 01       	movw	r24, r18
    60d2:	88 0f       	add	r24, r24
    60d4:	99 1f       	adc	r25, r25
    60d6:	82 0f       	add	r24, r18
    60d8:	93 1f       	adc	r25, r19
    60da:	88 0f       	add	r24, r24
    60dc:	99 1f       	adc	r25, r25
    60de:	fc 01       	movw	r30, r24
    60e0:	eb 52       	subi	r30, 0x2B	; 43
    60e2:	fe 4f       	sbci	r31, 0xFE	; 254
    60e4:	84 e0       	ldi	r24, 0x04	; 4
    60e6:	80 83       	st	Z, r24

void DC_Motor_voidInit(void)
{
	uint8 u8CntrLoc ;
	init = 1;
	for (u8CntrLoc = 0 ; u8CntrLoc < DC_Motor_MAX_NUM ; u8CntrLoc++)
    60e8:	89 81       	ldd	r24, Y+1	; 0x01
    60ea:	8f 5f       	subi	r24, 0xFF	; 255
    60ec:	89 83       	std	Y+1, r24	; 0x01
    60ee:	89 81       	ldd	r24, Y+1	; 0x01
    60f0:	82 30       	cpi	r24, 0x02	; 2
    60f2:	08 f4       	brcc	.+2      	; 0x60f6 <DC_Motor_voidInit+0x1a4>
    60f4:	39 cf       	rjmp	.-398    	; 0x5f68 <DC_Motor_voidInit+0x16>
		break;
		}

	}

}
    60f6:	0f 90       	pop	r0
    60f8:	0f 90       	pop	r0
    60fa:	0f 90       	pop	r0
    60fc:	cf 91       	pop	r28
    60fe:	df 91       	pop	r29
    6100:	08 95       	ret

00006102 <DC_Motor_enuState>:
tenuErrorStatus DC_Motor_enuState (uint8 u8DC_MotorNumCpy , uint8 u8Mode)
{
    6102:	df 93       	push	r29
    6104:	cf 93       	push	r28
    6106:	cd b7       	in	r28, 0x3d	; 61
    6108:	de b7       	in	r29, 0x3e	; 62
    610a:	2b 97       	sbiw	r28, 0x0b	; 11
    610c:	0f b6       	in	r0, 0x3f	; 63
    610e:	f8 94       	cli
    6110:	de bf       	out	0x3e, r29	; 62
    6112:	0f be       	out	0x3f, r0	; 63
    6114:	cd bf       	out	0x3d, r28	; 61
    6116:	8a 83       	std	Y+2, r24	; 0x02
    6118:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus DC_ErrorState = E_OK;
    611a:	19 82       	std	Y+1, r1	; 0x01

	switch (u8Mode) {
    611c:	8b 81       	ldd	r24, Y+3	; 0x03
    611e:	28 2f       	mov	r18, r24
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	3b 87       	std	Y+11, r19	; 0x0b
    6124:	2a 87       	std	Y+10, r18	; 0x0a
    6126:	8a 85       	ldd	r24, Y+10	; 0x0a
    6128:	9b 85       	ldd	r25, Y+11	; 0x0b
    612a:	86 36       	cpi	r24, 0x66	; 102
    612c:	91 05       	cpc	r25, r1
    612e:	09 f4       	brne	.+2      	; 0x6132 <DC_Motor_enuState+0x30>
    6130:	f5 c1       	rjmp	.+1002   	; 0x651c <DC_Motor_enuState+0x41a>
    6132:	2a 85       	ldd	r18, Y+10	; 0x0a
    6134:	3b 85       	ldd	r19, Y+11	; 0x0b
    6136:	2a 3a       	cpi	r18, 0xAA	; 170
    6138:	31 05       	cpc	r19, r1
    613a:	39 f0       	breq	.+14     	; 0x614a <DC_Motor_enuState+0x48>
    613c:	8a 85       	ldd	r24, Y+10	; 0x0a
    613e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6140:	85 35       	cpi	r24, 0x55	; 85
    6142:	91 05       	cpc	r25, r1
    6144:	09 f4       	brne	.+2      	; 0x6148 <DC_Motor_enuState+0x46>
    6146:	f5 c0       	rjmp	.+490    	; 0x6332 <DC_Motor_enuState+0x230>
    6148:	73 c2       	rjmp	.+1254   	; 0x6630 <DC_Motor_enuState+0x52e>
		case DC_Motor_forward:
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    614a:	8a 81       	ldd	r24, Y+2	; 0x02
    614c:	28 2f       	mov	r18, r24
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	c9 01       	movw	r24, r18
    6152:	88 0f       	add	r24, r24
    6154:	99 1f       	adc	r25, r25
    6156:	82 0f       	add	r24, r18
    6158:	93 1f       	adc	r25, r19
    615a:	88 0f       	add	r24, r24
    615c:	99 1f       	adc	r25, r25
    615e:	fc 01       	movw	r30, r24
    6160:	e0 53       	subi	r30, 0x30	; 48
    6162:	fe 4f       	sbci	r31, 0xFE	; 254
    6164:	80 81       	ld	r24, Z
    6166:	28 2f       	mov	r18, r24
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	39 87       	std	Y+9, r19	; 0x09
    616c:	28 87       	std	Y+8, r18	; 0x08
    616e:	88 85       	ldd	r24, Y+8	; 0x08
    6170:	99 85       	ldd	r25, Y+9	; 0x09
    6172:	81 30       	cpi	r24, 0x01	; 1
    6174:	91 05       	cpc	r25, r1
    6176:	09 f4       	brne	.+2      	; 0x617a <DC_Motor_enuState+0x78>
    6178:	6f c0       	rjmp	.+222    	; 0x6258 <DC_Motor_enuState+0x156>
    617a:	28 85       	ldd	r18, Y+8	; 0x08
    617c:	39 85       	ldd	r19, Y+9	; 0x09
    617e:	22 30       	cpi	r18, 0x02	; 2
    6180:	31 05       	cpc	r19, r1
    6182:	09 f0       	breq	.+2      	; 0x6186 <DC_Motor_enuState+0x84>
    6184:	57 c2       	rjmp	.+1198   	; 0x6634 <DC_Motor_enuState+0x532>
			{
				case DC_Motor_intSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8POS)
    6186:	8a 81       	ldd	r24, Y+2	; 0x02
    6188:	28 2f       	mov	r18, r24
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	c9 01       	movw	r24, r18
    618e:	88 0f       	add	r24, r24
    6190:	99 1f       	adc	r25, r25
    6192:	82 0f       	add	r24, r18
    6194:	93 1f       	adc	r25, r19
    6196:	88 0f       	add	r24, r24
    6198:	99 1f       	adc	r25, r25
    619a:	fc 01       	movw	r30, r24
    619c:	ef 52       	subi	r30, 0x2F	; 47
    619e:	fe 4f       	sbci	r31, 0xFE	; 254
    61a0:	80 81       	ld	r24, Z
    61a2:	88 23       	and	r24, r24
    61a4:	19 f5       	brne	.+70     	; 0x61ec <DC_Motor_enuState+0xea>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH);
    61a6:	8a 81       	ldd	r24, Y+2	; 0x02
    61a8:	28 2f       	mov	r18, r24
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	c9 01       	movw	r24, r18
    61ae:	88 0f       	add	r24, r24
    61b0:	99 1f       	adc	r25, r25
    61b2:	82 0f       	add	r24, r18
    61b4:	93 1f       	adc	r25, r19
    61b6:	88 0f       	add	r24, r24
    61b8:	99 1f       	adc	r25, r25
    61ba:	fc 01       	movw	r30, r24
    61bc:	ed 52       	subi	r30, 0x2D	; 45
    61be:	fe 4f       	sbci	r31, 0xFE	; 254
    61c0:	80 81       	ld	r24, Z
    61c2:	61 e0       	ldi	r22, 0x01	; 1
    61c4:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    61c8:	8a 81       	ldd	r24, Y+2	; 0x02
    61ca:	28 2f       	mov	r18, r24
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	c9 01       	movw	r24, r18
    61d0:	88 0f       	add	r24, r24
    61d2:	99 1f       	adc	r25, r25
    61d4:	82 0f       	add	r24, r18
    61d6:	93 1f       	adc	r25, r19
    61d8:	88 0f       	add	r24, r24
    61da:	99 1f       	adc	r25, r25
    61dc:	fc 01       	movw	r30, r24
    61de:	ec 52       	subi	r30, 0x2C	; 44
    61e0:	fe 4f       	sbci	r31, 0xFE	; 254
    61e2:	80 81       	ld	r24, Z
    61e4:	60 e0       	ldi	r22, 0x00	; 0
    61e6:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    61ea:	24 c2       	rjmp	.+1096   	; 0x6634 <DC_Motor_enuState+0x532>
					}
					else if (DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8NEG)
    61ec:	8a 81       	ldd	r24, Y+2	; 0x02
    61ee:	28 2f       	mov	r18, r24
    61f0:	30 e0       	ldi	r19, 0x00	; 0
    61f2:	c9 01       	movw	r24, r18
    61f4:	88 0f       	add	r24, r24
    61f6:	99 1f       	adc	r25, r25
    61f8:	82 0f       	add	r24, r18
    61fa:	93 1f       	adc	r25, r19
    61fc:	88 0f       	add	r24, r24
    61fe:	99 1f       	adc	r25, r25
    6200:	fc 01       	movw	r30, r24
    6202:	ef 52       	subi	r30, 0x2F	; 47
    6204:	fe 4f       	sbci	r31, 0xFE	; 254
    6206:	80 81       	ld	r24, Z
    6208:	8f 3f       	cpi	r24, 0xFF	; 255
    620a:	19 f5       	brne	.+70     	; 0x6252 <DC_Motor_enuState+0x150>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    620c:	8a 81       	ldd	r24, Y+2	; 0x02
    620e:	28 2f       	mov	r18, r24
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	c9 01       	movw	r24, r18
    6214:	88 0f       	add	r24, r24
    6216:	99 1f       	adc	r25, r25
    6218:	82 0f       	add	r24, r18
    621a:	93 1f       	adc	r25, r19
    621c:	88 0f       	add	r24, r24
    621e:	99 1f       	adc	r25, r25
    6220:	fc 01       	movw	r30, r24
    6222:	ed 52       	subi	r30, 0x2D	; 45
    6224:	fe 4f       	sbci	r31, 0xFE	; 254
    6226:	80 81       	ld	r24, Z
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8HIGH);
    622e:	8a 81       	ldd	r24, Y+2	; 0x02
    6230:	28 2f       	mov	r18, r24
    6232:	30 e0       	ldi	r19, 0x00	; 0
    6234:	c9 01       	movw	r24, r18
    6236:	88 0f       	add	r24, r24
    6238:	99 1f       	adc	r25, r25
    623a:	82 0f       	add	r24, r18
    623c:	93 1f       	adc	r25, r19
    623e:	88 0f       	add	r24, r24
    6240:	99 1f       	adc	r25, r25
    6242:	fc 01       	movw	r30, r24
    6244:	ec 52       	subi	r30, 0x2C	; 44
    6246:	fe 4f       	sbci	r31, 0xFE	; 254
    6248:	80 81       	ld	r24, Z
    624a:	61 e0       	ldi	r22, 0x01	; 1
    624c:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    6250:	f1 c1       	rjmp	.+994    	; 0x6634 <DC_Motor_enuState+0x532>

					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6252:	84 e0       	ldi	r24, 0x04	; 4
    6254:	89 83       	std	Y+1, r24	; 0x01
    6256:	ee c1       	rjmp	.+988    	; 0x6634 <DC_Motor_enuState+0x532>
				}
				break;

				case DC_Motor_extSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    6258:	8a 81       	ldd	r24, Y+2	; 0x02
    625a:	28 2f       	mov	r18, r24
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	c9 01       	movw	r24, r18
    6260:	88 0f       	add	r24, r24
    6262:	99 1f       	adc	r25, r25
    6264:	82 0f       	add	r24, r18
    6266:	93 1f       	adc	r25, r19
    6268:	88 0f       	add	r24, r24
    626a:	99 1f       	adc	r25, r25
    626c:	fc 01       	movw	r30, r24
    626e:	ef 52       	subi	r30, 0x2F	; 47
    6270:	fe 4f       	sbci	r31, 0xFE	; 254
    6272:	80 81       	ld	r24, Z
    6274:	8a 3c       	cpi	r24, 0xCA	; 202
    6276:	31 f5       	brne	.+76     	; 0x62c4 <DC_Motor_enuState+0x1c2>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8NEG)
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	28 2f       	mov	r18, r24
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	c9 01       	movw	r24, r18
    6280:	88 0f       	add	r24, r24
    6282:	99 1f       	adc	r25, r25
    6284:	82 0f       	add	r24, r18
    6286:	93 1f       	adc	r25, r19
    6288:	01 96       	adiw	r24, 0x01	; 1
    628a:	88 0f       	add	r24, r24
    628c:	99 1f       	adc	r25, r25
    628e:	fc 01       	movw	r30, r24
    6290:	e0 53       	subi	r30, 0x30	; 48
    6292:	fe 4f       	sbci	r31, 0xFE	; 254
    6294:	80 81       	ld	r24, Z
    6296:	8f 3f       	cpi	r24, 0xFF	; 255
    6298:	91 f4       	brne	.+36     	; 0x62be <DC_Motor_enuState+0x1bc>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    629a:	8a 81       	ldd	r24, Y+2	; 0x02
    629c:	28 2f       	mov	r18, r24
    629e:	30 e0       	ldi	r19, 0x00	; 0
    62a0:	c9 01       	movw	r24, r18
    62a2:	88 0f       	add	r24, r24
    62a4:	99 1f       	adc	r25, r25
    62a6:	82 0f       	add	r24, r18
    62a8:	93 1f       	adc	r25, r19
    62aa:	88 0f       	add	r24, r24
    62ac:	99 1f       	adc	r25, r25
    62ae:	fc 01       	movw	r30, r24
    62b0:	ed 52       	subi	r30, 0x2D	; 45
    62b2:	fe 4f       	sbci	r31, 0xFE	; 254
    62b4:	80 81       	ld	r24, Z
    62b6:	60 e0       	ldi	r22, 0x00	; 0
    62b8:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    62bc:	bb c1       	rjmp	.+886    	; 0x6634 <DC_Motor_enuState+0x532>
						}
						else
						{
							DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    62be:	84 e0       	ldi	r24, 0x04	; 4
    62c0:	89 83       	std	Y+1, r24	; 0x01
    62c2:	b8 c1       	rjmp	.+880    	; 0x6634 <DC_Motor_enuState+0x532>
						}
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    62c4:	8a 81       	ldd	r24, Y+2	; 0x02
    62c6:	28 2f       	mov	r18, r24
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	c9 01       	movw	r24, r18
    62cc:	88 0f       	add	r24, r24
    62ce:	99 1f       	adc	r25, r25
    62d0:	82 0f       	add	r24, r18
    62d2:	93 1f       	adc	r25, r19
    62d4:	88 0f       	add	r24, r24
    62d6:	99 1f       	adc	r25, r25
    62d8:	fc 01       	movw	r30, r24
    62da:	ef 52       	subi	r30, 0x2F	; 47
    62dc:	fe 4f       	sbci	r31, 0xFE	; 254
    62de:	80 81       	ld	r24, Z
    62e0:	85 3c       	cpi	r24, 0xC5	; 197
    62e2:	21 f5       	brne	.+72     	; 0x632c <DC_Motor_enuState+0x22a>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8POS)
    62e4:	8a 81       	ldd	r24, Y+2	; 0x02
    62e6:	28 2f       	mov	r18, r24
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	c9 01       	movw	r24, r18
    62ec:	88 0f       	add	r24, r24
    62ee:	99 1f       	adc	r25, r25
    62f0:	82 0f       	add	r24, r18
    62f2:	93 1f       	adc	r25, r19
    62f4:	01 96       	adiw	r24, 0x01	; 1
    62f6:	88 0f       	add	r24, r24
    62f8:	99 1f       	adc	r25, r25
    62fa:	fc 01       	movw	r30, r24
    62fc:	e0 53       	subi	r30, 0x30	; 48
    62fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6300:	80 81       	ld	r24, Z
    6302:	88 23       	and	r24, r24
    6304:	09 f0       	breq	.+2      	; 0x6308 <DC_Motor_enuState+0x206>
    6306:	96 c1       	rjmp	.+812    	; 0x6634 <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    6308:	8a 81       	ldd	r24, Y+2	; 0x02
    630a:	28 2f       	mov	r18, r24
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	c9 01       	movw	r24, r18
    6310:	88 0f       	add	r24, r24
    6312:	99 1f       	adc	r25, r25
    6314:	82 0f       	add	r24, r18
    6316:	93 1f       	adc	r25, r19
    6318:	88 0f       	add	r24, r24
    631a:	99 1f       	adc	r25, r25
    631c:	fc 01       	movw	r30, r24
    631e:	ed 52       	subi	r30, 0x2D	; 45
    6320:	fe 4f       	sbci	r31, 0xFE	; 254
    6322:	80 81       	ld	r24, Z
    6324:	61 e0       	ldi	r22, 0x01	; 1
    6326:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    632a:	84 c1       	rjmp	.+776    	; 0x6634 <DC_Motor_enuState+0x532>

						}
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    632c:	84 e0       	ldi	r24, 0x04	; 4
    632e:	89 83       	std	Y+1, r24	; 0x01
    6330:	81 c1       	rjmp	.+770    	; 0x6634 <DC_Motor_enuState+0x532>
			}
		break;

		case DC_Motor_backward:
		{
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    6332:	8a 81       	ldd	r24, Y+2	; 0x02
    6334:	28 2f       	mov	r18, r24
    6336:	30 e0       	ldi	r19, 0x00	; 0
    6338:	c9 01       	movw	r24, r18
    633a:	88 0f       	add	r24, r24
    633c:	99 1f       	adc	r25, r25
    633e:	82 0f       	add	r24, r18
    6340:	93 1f       	adc	r25, r19
    6342:	88 0f       	add	r24, r24
    6344:	99 1f       	adc	r25, r25
    6346:	fc 01       	movw	r30, r24
    6348:	e0 53       	subi	r30, 0x30	; 48
    634a:	fe 4f       	sbci	r31, 0xFE	; 254
    634c:	80 81       	ld	r24, Z
    634e:	28 2f       	mov	r18, r24
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	3f 83       	std	Y+7, r19	; 0x07
    6354:	2e 83       	std	Y+6, r18	; 0x06
    6356:	8e 81       	ldd	r24, Y+6	; 0x06
    6358:	9f 81       	ldd	r25, Y+7	; 0x07
    635a:	81 30       	cpi	r24, 0x01	; 1
    635c:	91 05       	cpc	r25, r1
    635e:	09 f4       	brne	.+2      	; 0x6362 <DC_Motor_enuState+0x260>
    6360:	6f c0       	rjmp	.+222    	; 0x6440 <DC_Motor_enuState+0x33e>
    6362:	2e 81       	ldd	r18, Y+6	; 0x06
    6364:	3f 81       	ldd	r19, Y+7	; 0x07
    6366:	22 30       	cpi	r18, 0x02	; 2
    6368:	31 05       	cpc	r19, r1
    636a:	09 f0       	breq	.+2      	; 0x636e <DC_Motor_enuState+0x26c>
    636c:	d4 c0       	rjmp	.+424    	; 0x6516 <DC_Motor_enuState+0x414>
			{
				case DC_Motor_intSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8POS)
    636e:	8a 81       	ldd	r24, Y+2	; 0x02
    6370:	28 2f       	mov	r18, r24
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	c9 01       	movw	r24, r18
    6376:	88 0f       	add	r24, r24
    6378:	99 1f       	adc	r25, r25
    637a:	82 0f       	add	r24, r18
    637c:	93 1f       	adc	r25, r19
    637e:	88 0f       	add	r24, r24
    6380:	99 1f       	adc	r25, r25
    6382:	fc 01       	movw	r30, r24
    6384:	ef 52       	subi	r30, 0x2F	; 47
    6386:	fe 4f       	sbci	r31, 0xFE	; 254
    6388:	80 81       	ld	r24, Z
    638a:	88 23       	and	r24, r24
    638c:	19 f5       	brne	.+70     	; 0x63d4 <DC_Motor_enuState+0x2d2>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    638e:	8a 81       	ldd	r24, Y+2	; 0x02
    6390:	28 2f       	mov	r18, r24
    6392:	30 e0       	ldi	r19, 0x00	; 0
    6394:	c9 01       	movw	r24, r18
    6396:	88 0f       	add	r24, r24
    6398:	99 1f       	adc	r25, r25
    639a:	82 0f       	add	r24, r18
    639c:	93 1f       	adc	r25, r19
    639e:	88 0f       	add	r24, r24
    63a0:	99 1f       	adc	r25, r25
    63a2:	fc 01       	movw	r30, r24
    63a4:	ed 52       	subi	r30, 0x2D	; 45
    63a6:	fe 4f       	sbci	r31, 0xFE	; 254
    63a8:	80 81       	ld	r24, Z
    63aa:	60 e0       	ldi	r22, 0x00	; 0
    63ac:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8HIGH);
    63b0:	8a 81       	ldd	r24, Y+2	; 0x02
    63b2:	28 2f       	mov	r18, r24
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	c9 01       	movw	r24, r18
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	82 0f       	add	r24, r18
    63be:	93 1f       	adc	r25, r19
    63c0:	88 0f       	add	r24, r24
    63c2:	99 1f       	adc	r25, r25
    63c4:	fc 01       	movw	r30, r24
    63c6:	ec 52       	subi	r30, 0x2C	; 44
    63c8:	fe 4f       	sbci	r31, 0xFE	; 254
    63ca:	80 81       	ld	r24, Z
    63cc:	61 e0       	ldi	r22, 0x01	; 1
    63ce:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    63d2:	30 c1       	rjmp	.+608    	; 0x6634 <DC_Motor_enuState+0x532>
					}
					else if (DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8NEG)
    63d4:	8a 81       	ldd	r24, Y+2	; 0x02
    63d6:	28 2f       	mov	r18, r24
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	c9 01       	movw	r24, r18
    63dc:	88 0f       	add	r24, r24
    63de:	99 1f       	adc	r25, r25
    63e0:	82 0f       	add	r24, r18
    63e2:	93 1f       	adc	r25, r19
    63e4:	88 0f       	add	r24, r24
    63e6:	99 1f       	adc	r25, r25
    63e8:	fc 01       	movw	r30, r24
    63ea:	ef 52       	subi	r30, 0x2F	; 47
    63ec:	fe 4f       	sbci	r31, 0xFE	; 254
    63ee:	80 81       	ld	r24, Z
    63f0:	8f 3f       	cpi	r24, 0xFF	; 255
    63f2:	19 f5       	brne	.+70     	; 0x643a <DC_Motor_enuState+0x338>
					{

						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH);
    63f4:	8a 81       	ldd	r24, Y+2	; 0x02
    63f6:	28 2f       	mov	r18, r24
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	c9 01       	movw	r24, r18
    63fc:	88 0f       	add	r24, r24
    63fe:	99 1f       	adc	r25, r25
    6400:	82 0f       	add	r24, r18
    6402:	93 1f       	adc	r25, r19
    6404:	88 0f       	add	r24, r24
    6406:	99 1f       	adc	r25, r25
    6408:	fc 01       	movw	r30, r24
    640a:	ed 52       	subi	r30, 0x2D	; 45
    640c:	fe 4f       	sbci	r31, 0xFE	; 254
    640e:	80 81       	ld	r24, Z
    6410:	61 e0       	ldi	r22, 0x01	; 1
    6412:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    6416:	8a 81       	ldd	r24, Y+2	; 0x02
    6418:	28 2f       	mov	r18, r24
    641a:	30 e0       	ldi	r19, 0x00	; 0
    641c:	c9 01       	movw	r24, r18
    641e:	88 0f       	add	r24, r24
    6420:	99 1f       	adc	r25, r25
    6422:	82 0f       	add	r24, r18
    6424:	93 1f       	adc	r25, r19
    6426:	88 0f       	add	r24, r24
    6428:	99 1f       	adc	r25, r25
    642a:	fc 01       	movw	r30, r24
    642c:	ec 52       	subi	r30, 0x2C	; 44
    642e:	fe 4f       	sbci	r31, 0xFE	; 254
    6430:	80 81       	ld	r24, Z
    6432:	60 e0       	ldi	r22, 0x00	; 0
    6434:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    6438:	fd c0       	rjmp	.+506    	; 0x6634 <DC_Motor_enuState+0x532>
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    643a:	84 e0       	ldi	r24, 0x04	; 4
    643c:	89 83       	std	Y+1, r24	; 0x01
    643e:	fa c0       	rjmp	.+500    	; 0x6634 <DC_Motor_enuState+0x532>
				}
				break;
				case DC_Motor_extSupply:
				{

					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    6440:	8a 81       	ldd	r24, Y+2	; 0x02
    6442:	28 2f       	mov	r18, r24
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	c9 01       	movw	r24, r18
    6448:	88 0f       	add	r24, r24
    644a:	99 1f       	adc	r25, r25
    644c:	82 0f       	add	r24, r18
    644e:	93 1f       	adc	r25, r19
    6450:	88 0f       	add	r24, r24
    6452:	99 1f       	adc	r25, r25
    6454:	fc 01       	movw	r30, r24
    6456:	ef 52       	subi	r30, 0x2F	; 47
    6458:	fe 4f       	sbci	r31, 0xFE	; 254
    645a:	80 81       	ld	r24, Z
    645c:	8a 3c       	cpi	r24, 0xCA	; 202
    645e:	21 f5       	brne	.+72     	; 0x64a8 <DC_Motor_enuState+0x3a6>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8POS)
    6460:	8a 81       	ldd	r24, Y+2	; 0x02
    6462:	28 2f       	mov	r18, r24
    6464:	30 e0       	ldi	r19, 0x00	; 0
    6466:	c9 01       	movw	r24, r18
    6468:	88 0f       	add	r24, r24
    646a:	99 1f       	adc	r25, r25
    646c:	82 0f       	add	r24, r18
    646e:	93 1f       	adc	r25, r19
    6470:	01 96       	adiw	r24, 0x01	; 1
    6472:	88 0f       	add	r24, r24
    6474:	99 1f       	adc	r25, r25
    6476:	fc 01       	movw	r30, r24
    6478:	e0 53       	subi	r30, 0x30	; 48
    647a:	fe 4f       	sbci	r31, 0xFE	; 254
    647c:	80 81       	ld	r24, Z
    647e:	88 23       	and	r24, r24
    6480:	09 f0       	breq	.+2      	; 0x6484 <DC_Motor_enuState+0x382>
    6482:	d8 c0       	rjmp	.+432    	; 0x6634 <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    6484:	8a 81       	ldd	r24, Y+2	; 0x02
    6486:	28 2f       	mov	r18, r24
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	c9 01       	movw	r24, r18
    648c:	88 0f       	add	r24, r24
    648e:	99 1f       	adc	r25, r25
    6490:	82 0f       	add	r24, r18
    6492:	93 1f       	adc	r25, r19
    6494:	88 0f       	add	r24, r24
    6496:	99 1f       	adc	r25, r25
    6498:	fc 01       	movw	r30, r24
    649a:	ed 52       	subi	r30, 0x2D	; 45
    649c:	fe 4f       	sbci	r31, 0xFE	; 254
    649e:	80 81       	ld	r24, Z
    64a0:	60 e0       	ldi	r22, 0x00	; 0
    64a2:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    64a6:	c6 c0       	rjmp	.+396    	; 0x6634 <DC_Motor_enuState+0x532>
						else
						{
							//error
						}
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    64a8:	8a 81       	ldd	r24, Y+2	; 0x02
    64aa:	28 2f       	mov	r18, r24
    64ac:	30 e0       	ldi	r19, 0x00	; 0
    64ae:	c9 01       	movw	r24, r18
    64b0:	88 0f       	add	r24, r24
    64b2:	99 1f       	adc	r25, r25
    64b4:	82 0f       	add	r24, r18
    64b6:	93 1f       	adc	r25, r19
    64b8:	88 0f       	add	r24, r24
    64ba:	99 1f       	adc	r25, r25
    64bc:	fc 01       	movw	r30, r24
    64be:	ef 52       	subi	r30, 0x2F	; 47
    64c0:	fe 4f       	sbci	r31, 0xFE	; 254
    64c2:	80 81       	ld	r24, Z
    64c4:	85 3c       	cpi	r24, 0xC5	; 197
    64c6:	21 f5       	brne	.+72     	; 0x6510 <DC_Motor_enuState+0x40e>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8NEG)
    64c8:	8a 81       	ldd	r24, Y+2	; 0x02
    64ca:	28 2f       	mov	r18, r24
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	c9 01       	movw	r24, r18
    64d0:	88 0f       	add	r24, r24
    64d2:	99 1f       	adc	r25, r25
    64d4:	82 0f       	add	r24, r18
    64d6:	93 1f       	adc	r25, r19
    64d8:	01 96       	adiw	r24, 0x01	; 1
    64da:	88 0f       	add	r24, r24
    64dc:	99 1f       	adc	r25, r25
    64de:	fc 01       	movw	r30, r24
    64e0:	e0 53       	subi	r30, 0x30	; 48
    64e2:	fe 4f       	sbci	r31, 0xFE	; 254
    64e4:	80 81       	ld	r24, Z
    64e6:	8f 3f       	cpi	r24, 0xFF	; 255
    64e8:	09 f0       	breq	.+2      	; 0x64ec <DC_Motor_enuState+0x3ea>
    64ea:	a4 c0       	rjmp	.+328    	; 0x6634 <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    64ec:	8a 81       	ldd	r24, Y+2	; 0x02
    64ee:	28 2f       	mov	r18, r24
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	c9 01       	movw	r24, r18
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	82 0f       	add	r24, r18
    64fa:	93 1f       	adc	r25, r19
    64fc:	88 0f       	add	r24, r24
    64fe:	99 1f       	adc	r25, r25
    6500:	fc 01       	movw	r30, r24
    6502:	ed 52       	subi	r30, 0x2D	; 45
    6504:	fe 4f       	sbci	r31, 0xFE	; 254
    6506:	80 81       	ld	r24, Z
    6508:	61 e0       	ldi	r22, 0x01	; 1
    650a:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    650e:	92 c0       	rjmp	.+292    	; 0x6634 <DC_Motor_enuState+0x532>

						}
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6510:	84 e0       	ldi	r24, 0x04	; 4
    6512:	89 83       	std	Y+1, r24	; 0x01
    6514:	8f c0       	rjmp	.+286    	; 0x6634 <DC_Motor_enuState+0x532>
					}
				}
				break;
				default:
					DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6516:	84 e0       	ldi	r24, 0x04	; 4
    6518:	89 83       	std	Y+1, r24	; 0x01
    651a:	8c c0       	rjmp	.+280    	; 0x6634 <DC_Motor_enuState+0x532>
				}
				break;
		}
		case DC_Motor_off:
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    651c:	8a 81       	ldd	r24, Y+2	; 0x02
    651e:	28 2f       	mov	r18, r24
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	c9 01       	movw	r24, r18
    6524:	88 0f       	add	r24, r24
    6526:	99 1f       	adc	r25, r25
    6528:	82 0f       	add	r24, r18
    652a:	93 1f       	adc	r25, r19
    652c:	88 0f       	add	r24, r24
    652e:	99 1f       	adc	r25, r25
    6530:	fc 01       	movw	r30, r24
    6532:	e0 53       	subi	r30, 0x30	; 48
    6534:	fe 4f       	sbci	r31, 0xFE	; 254
    6536:	80 81       	ld	r24, Z
    6538:	28 2f       	mov	r18, r24
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	3d 83       	std	Y+5, r19	; 0x05
    653e:	2c 83       	std	Y+4, r18	; 0x04
    6540:	8c 81       	ldd	r24, Y+4	; 0x04
    6542:	9d 81       	ldd	r25, Y+5	; 0x05
    6544:	81 30       	cpi	r24, 0x01	; 1
    6546:	91 05       	cpc	r25, r1
    6548:	49 f1       	breq	.+82     	; 0x659c <DC_Motor_enuState+0x49a>
    654a:	2c 81       	ldd	r18, Y+4	; 0x04
    654c:	3d 81       	ldd	r19, Y+5	; 0x05
    654e:	22 30       	cpi	r18, 0x02	; 2
    6550:	31 05       	cpc	r19, r1
    6552:	09 f0       	breq	.+2      	; 0x6556 <DC_Motor_enuState+0x454>
    6554:	6a c0       	rjmp	.+212    	; 0x662a <DC_Motor_enuState+0x528>
			{
				case DC_Motor_intSupply:
				{
					DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    6556:	8a 81       	ldd	r24, Y+2	; 0x02
    6558:	28 2f       	mov	r18, r24
    655a:	30 e0       	ldi	r19, 0x00	; 0
    655c:	c9 01       	movw	r24, r18
    655e:	88 0f       	add	r24, r24
    6560:	99 1f       	adc	r25, r25
    6562:	82 0f       	add	r24, r18
    6564:	93 1f       	adc	r25, r19
    6566:	88 0f       	add	r24, r24
    6568:	99 1f       	adc	r25, r25
    656a:	fc 01       	movw	r30, r24
    656c:	ed 52       	subi	r30, 0x2D	; 45
    656e:	fe 4f       	sbci	r31, 0xFE	; 254
    6570:	80 81       	ld	r24, Z
    6572:	60 e0       	ldi	r22, 0x00	; 0
    6574:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
					DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    6578:	8a 81       	ldd	r24, Y+2	; 0x02
    657a:	28 2f       	mov	r18, r24
    657c:	30 e0       	ldi	r19, 0x00	; 0
    657e:	c9 01       	movw	r24, r18
    6580:	88 0f       	add	r24, r24
    6582:	99 1f       	adc	r25, r25
    6584:	82 0f       	add	r24, r18
    6586:	93 1f       	adc	r25, r19
    6588:	88 0f       	add	r24, r24
    658a:	99 1f       	adc	r25, r25
    658c:	fc 01       	movw	r30, r24
    658e:	ec 52       	subi	r30, 0x2C	; 44
    6590:	fe 4f       	sbci	r31, 0xFE	; 254
    6592:	80 81       	ld	r24, Z
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    659a:	4c c0       	rjmp	.+152    	; 0x6634 <DC_Motor_enuState+0x532>
				}
				break;
				case DC_Motor_extSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    659c:	8a 81       	ldd	r24, Y+2	; 0x02
    659e:	28 2f       	mov	r18, r24
    65a0:	30 e0       	ldi	r19, 0x00	; 0
    65a2:	c9 01       	movw	r24, r18
    65a4:	88 0f       	add	r24, r24
    65a6:	99 1f       	adc	r25, r25
    65a8:	82 0f       	add	r24, r18
    65aa:	93 1f       	adc	r25, r19
    65ac:	88 0f       	add	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	fc 01       	movw	r30, r24
    65b2:	ef 52       	subi	r30, 0x2F	; 47
    65b4:	fe 4f       	sbci	r31, 0xFE	; 254
    65b6:	80 81       	ld	r24, Z
    65b8:	8a 3c       	cpi	r24, 0xCA	; 202
    65ba:	91 f4       	brne	.+36     	; 0x65e0 <DC_Motor_enuState+0x4de>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    65bc:	8a 81       	ldd	r24, Y+2	; 0x02
    65be:	28 2f       	mov	r18, r24
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	c9 01       	movw	r24, r18
    65c4:	88 0f       	add	r24, r24
    65c6:	99 1f       	adc	r25, r25
    65c8:	82 0f       	add	r24, r18
    65ca:	93 1f       	adc	r25, r19
    65cc:	88 0f       	add	r24, r24
    65ce:	99 1f       	adc	r25, r25
    65d0:	fc 01       	movw	r30, r24
    65d2:	ed 52       	subi	r30, 0x2D	; 45
    65d4:	fe 4f       	sbci	r31, 0xFE	; 254
    65d6:	80 81       	ld	r24, Z
    65d8:	61 e0       	ldi	r22, 0x01	; 1
    65da:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    65de:	2a c0       	rjmp	.+84     	; 0x6634 <DC_Motor_enuState+0x532>
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    65e0:	8a 81       	ldd	r24, Y+2	; 0x02
    65e2:	28 2f       	mov	r18, r24
    65e4:	30 e0       	ldi	r19, 0x00	; 0
    65e6:	c9 01       	movw	r24, r18
    65e8:	88 0f       	add	r24, r24
    65ea:	99 1f       	adc	r25, r25
    65ec:	82 0f       	add	r24, r18
    65ee:	93 1f       	adc	r25, r19
    65f0:	88 0f       	add	r24, r24
    65f2:	99 1f       	adc	r25, r25
    65f4:	fc 01       	movw	r30, r24
    65f6:	ef 52       	subi	r30, 0x2F	; 47
    65f8:	fe 4f       	sbci	r31, 0xFE	; 254
    65fa:	80 81       	ld	r24, Z
    65fc:	85 3c       	cpi	r24, 0xC5	; 197
    65fe:	91 f4       	brne	.+36     	; 0x6624 <DC_Motor_enuState+0x522>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    6600:	8a 81       	ldd	r24, Y+2	; 0x02
    6602:	28 2f       	mov	r18, r24
    6604:	30 e0       	ldi	r19, 0x00	; 0
    6606:	c9 01       	movw	r24, r18
    6608:	88 0f       	add	r24, r24
    660a:	99 1f       	adc	r25, r25
    660c:	82 0f       	add	r24, r18
    660e:	93 1f       	adc	r25, r19
    6610:	88 0f       	add	r24, r24
    6612:	99 1f       	adc	r25, r25
    6614:	fc 01       	movw	r30, r24
    6616:	ed 52       	subi	r30, 0x2D	; 45
    6618:	fe 4f       	sbci	r31, 0xFE	; 254
    661a:	80 81       	ld	r24, Z
    661c:	60 e0       	ldi	r22, 0x00	; 0
    661e:	0e 94 bc 11 	call	0x2378	; 0x2378 <DIO_enuWritePin>
    6622:	08 c0       	rjmp	.+16     	; 0x6634 <DC_Motor_enuState+0x532>
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6624:	84 e0       	ldi	r24, 0x04	; 4
    6626:	89 83       	std	Y+1, r24	; 0x01
    6628:	05 c0       	rjmp	.+10     	; 0x6634 <DC_Motor_enuState+0x532>
					}
				}
				break;
				default:
					DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    662a:	84 e0       	ldi	r24, 0x04	; 4
    662c:	89 83       	std	Y+1, r24	; 0x01
    662e:	02 c0       	rjmp	.+4      	; 0x6634 <DC_Motor_enuState+0x532>

			}
			break;

		default:
			DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6630:	84 e0       	ldi	r24, 0x04	; 4
    6632:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	return DC_ErrorState;
    6634:	89 81       	ldd	r24, Y+1	; 0x01
}
    6636:	2b 96       	adiw	r28, 0x0b	; 11
    6638:	0f b6       	in	r0, 0x3f	; 63
    663a:	f8 94       	cli
    663c:	de bf       	out	0x3e, r29	; 62
    663e:	0f be       	out	0x3f, r0	; 63
    6640:	cd bf       	out	0x3d, r28	; 61
    6642:	cf 91       	pop	r28
    6644:	df 91       	pop	r29
    6646:	08 95       	ret

00006648 <button_voidInit>:

#include "BUTTON_cfg.h"
#include "BUTTON_priv.h"

void button_voidInit(void)
{
    6648:	0f 93       	push	r16
    664a:	1f 93       	push	r17
    664c:	df 93       	push	r29
    664e:	cf 93       	push	r28
    6650:	0f 92       	push	r0
    6652:	cd b7       	in	r28, 0x3d	; 61
    6654:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < BUTTON_MAX_NUM ; u8CntrLoc++)
    6656:	19 82       	std	Y+1, r1	; 0x01
    6658:	83 c0       	rjmp	.+262    	; 0x6760 <button_voidInit+0x118>
	{
		if(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap >= DIO_u8PIN_0 &&
    665a:	89 81       	ldd	r24, Y+1	; 0x01
    665c:	28 2f       	mov	r18, r24
    665e:	30 e0       	ldi	r19, 0x00	; 0
    6660:	c9 01       	movw	r24, r18
    6662:	88 0f       	add	r24, r24
    6664:	99 1f       	adc	r25, r25
    6666:	82 0f       	add	r24, r18
    6668:	93 1f       	adc	r25, r19
    666a:	fc 01       	movw	r30, r24
    666c:	e4 52       	subi	r30, 0x24	; 36
    666e:	fe 4f       	sbci	r31, 0xFE	; 254
    6670:	80 81       	ld	r24, Z
    6672:	80 32       	cpi	r24, 0x20	; 32
    6674:	08 f0       	brcs	.+2      	; 0x6678 <button_voidInit+0x30>
    6676:	64 c0       	rjmp	.+200    	; 0x6740 <button_voidInit+0xf8>
		   Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap <= DIO_u8PIN_31	)
		{
			if(Button_astrButtonPinMapping[u8CntrLoc].u8ButtonModeConc == BUTTON_u8PullUp)
    6678:	89 81       	ldd	r24, Y+1	; 0x01
    667a:	28 2f       	mov	r18, r24
    667c:	30 e0       	ldi	r19, 0x00	; 0
    667e:	c9 01       	movw	r24, r18
    6680:	88 0f       	add	r24, r24
    6682:	99 1f       	adc	r25, r25
    6684:	82 0f       	add	r24, r18
    6686:	93 1f       	adc	r25, r19
    6688:	fc 01       	movw	r30, r24
    668a:	e3 52       	subi	r30, 0x23	; 35
    668c:	fe 4f       	sbci	r31, 0xFE	; 254
    668e:	80 81       	ld	r24, Z
    6690:	8a 3a       	cpi	r24, 0xAA	; 170
    6692:	e9 f4       	brne	.+58     	; 0x66ce <button_voidInit+0x86>
			{

				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = DIO_enuPullWrite(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap , DIO_u8HIGH);
    6694:	89 81       	ldd	r24, Y+1	; 0x01
    6696:	08 2f       	mov	r16, r24
    6698:	10 e0       	ldi	r17, 0x00	; 0
    669a:	89 81       	ldd	r24, Y+1	; 0x01
    669c:	28 2f       	mov	r18, r24
    669e:	30 e0       	ldi	r19, 0x00	; 0
    66a0:	c9 01       	movw	r24, r18
    66a2:	88 0f       	add	r24, r24
    66a4:	99 1f       	adc	r25, r25
    66a6:	82 0f       	add	r24, r18
    66a8:	93 1f       	adc	r25, r19
    66aa:	fc 01       	movw	r30, r24
    66ac:	e4 52       	subi	r30, 0x24	; 36
    66ae:	fe 4f       	sbci	r31, 0xFE	; 254
    66b0:	80 81       	ld	r24, Z
    66b2:	61 e0       	ldi	r22, 0x01	; 1
    66b4:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
    66b8:	28 2f       	mov	r18, r24
    66ba:	c8 01       	movw	r24, r16
    66bc:	88 0f       	add	r24, r24
    66be:	99 1f       	adc	r25, r25
    66c0:	80 0f       	add	r24, r16
    66c2:	91 1f       	adc	r25, r17
    66c4:	fc 01       	movw	r30, r24
    66c6:	e2 52       	subi	r30, 0x22	; 34
    66c8:	fe 4f       	sbci	r31, 0xFE	; 254
    66ca:	20 83       	st	Z, r18
    66cc:	46 c0       	rjmp	.+140    	; 0x675a <button_voidInit+0x112>

			}
			else if(Button_astrButtonPinMapping[u8CntrLoc].u8ButtonModeConc == BUTTON_u8PullDown)
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	28 2f       	mov	r18, r24
    66d2:	30 e0       	ldi	r19, 0x00	; 0
    66d4:	c9 01       	movw	r24, r18
    66d6:	88 0f       	add	r24, r24
    66d8:	99 1f       	adc	r25, r25
    66da:	82 0f       	add	r24, r18
    66dc:	93 1f       	adc	r25, r19
    66de:	fc 01       	movw	r30, r24
    66e0:	e3 52       	subi	r30, 0x23	; 35
    66e2:	fe 4f       	sbci	r31, 0xFE	; 254
    66e4:	80 81       	ld	r24, Z
    66e6:	85 35       	cpi	r24, 0x55	; 85
    66e8:	e9 f4       	brne	.+58     	; 0x6724 <button_voidInit+0xdc>
			{
				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = DIO_enuPullWrite(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap , DIO_u8LOW);
    66ea:	89 81       	ldd	r24, Y+1	; 0x01
    66ec:	08 2f       	mov	r16, r24
    66ee:	10 e0       	ldi	r17, 0x00	; 0
    66f0:	89 81       	ldd	r24, Y+1	; 0x01
    66f2:	28 2f       	mov	r18, r24
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	c9 01       	movw	r24, r18
    66f8:	88 0f       	add	r24, r24
    66fa:	99 1f       	adc	r25, r25
    66fc:	82 0f       	add	r24, r18
    66fe:	93 1f       	adc	r25, r19
    6700:	fc 01       	movw	r30, r24
    6702:	e4 52       	subi	r30, 0x24	; 36
    6704:	fe 4f       	sbci	r31, 0xFE	; 254
    6706:	80 81       	ld	r24, Z
    6708:	60 e0       	ldi	r22, 0x00	; 0
    670a:	0e 94 4e 13 	call	0x269c	; 0x269c <DIO_enuPullWrite>
    670e:	28 2f       	mov	r18, r24
    6710:	c8 01       	movw	r24, r16
    6712:	88 0f       	add	r24, r24
    6714:	99 1f       	adc	r25, r25
    6716:	80 0f       	add	r24, r16
    6718:	91 1f       	adc	r25, r17
    671a:	fc 01       	movw	r30, r24
    671c:	e2 52       	subi	r30, 0x22	; 34
    671e:	fe 4f       	sbci	r31, 0xFE	; 254
    6720:	20 83       	st	Z, r18
    6722:	1b c0       	rjmp	.+54     	; 0x675a <button_voidInit+0x112>
			}
			else{
				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6724:	89 81       	ldd	r24, Y+1	; 0x01
    6726:	28 2f       	mov	r18, r24
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	c9 01       	movw	r24, r18
    672c:	88 0f       	add	r24, r24
    672e:	99 1f       	adc	r25, r25
    6730:	82 0f       	add	r24, r18
    6732:	93 1f       	adc	r25, r19
    6734:	fc 01       	movw	r30, r24
    6736:	e2 52       	subi	r30, 0x22	; 34
    6738:	fe 4f       	sbci	r31, 0xFE	; 254
    673a:	84 e0       	ldi	r24, 0x04	; 4
    673c:	80 83       	st	Z, r24
    673e:	0d c0       	rjmp	.+26     	; 0x675a <button_voidInit+0x112>
			}

		}
		else
		{
			Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    6740:	89 81       	ldd	r24, Y+1	; 0x01
    6742:	28 2f       	mov	r18, r24
    6744:	30 e0       	ldi	r19, 0x00	; 0
    6746:	c9 01       	movw	r24, r18
    6748:	88 0f       	add	r24, r24
    674a:	99 1f       	adc	r25, r25
    674c:	82 0f       	add	r24, r18
    674e:	93 1f       	adc	r25, r19
    6750:	fc 01       	movw	r30, r24
    6752:	e2 52       	subi	r30, 0x22	; 34
    6754:	fe 4f       	sbci	r31, 0xFE	; 254
    6756:	82 e0       	ldi	r24, 0x02	; 2
    6758:	80 83       	st	Z, r24
#include "BUTTON_priv.h"

void button_voidInit(void)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < BUTTON_MAX_NUM ; u8CntrLoc++)
    675a:	89 81       	ldd	r24, Y+1	; 0x01
    675c:	8f 5f       	subi	r24, 0xFF	; 255
    675e:	89 83       	std	Y+1, r24	; 0x01
    6760:	89 81       	ldd	r24, Y+1	; 0x01
    6762:	85 30       	cpi	r24, 0x05	; 5
    6764:	08 f4       	brcc	.+2      	; 0x6768 <button_voidInit+0x120>
    6766:	79 cf       	rjmp	.-270    	; 0x665a <button_voidInit+0x12>
			Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
		}

	}

}
    6768:	0f 90       	pop	r0
    676a:	cf 91       	pop	r28
    676c:	df 91       	pop	r29
    676e:	1f 91       	pop	r17
    6770:	0f 91       	pop	r16
    6772:	08 95       	ret

00006774 <Button_enuPressedValue>:


tenuErrorStatus Button_enuPressedValue(uint8 u8ButtonNumCpy , uint8 * u8ButtonValueCpy)
{
    6774:	df 93       	push	r29
    6776:	cf 93       	push	r28
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	27 97       	sbiw	r28, 0x07	; 7
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	f8 94       	cli
    6782:	de bf       	out	0x3e, r29	; 62
    6784:	0f be       	out	0x3f, r0	; 63
    6786:	cd bf       	out	0x3d, r28	; 61
    6788:	8a 83       	std	Y+2, r24	; 0x02
    678a:	7c 83       	std	Y+4, r23	; 0x04
    678c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus BTN_ErrorState = E_OK;
    678e:	19 82       	std	Y+1, r1	; 0x01
	if(u8ButtonValueCpy != NULL_PTR)
    6790:	8b 81       	ldd	r24, Y+3	; 0x03
    6792:	9c 81       	ldd	r25, Y+4	; 0x04
    6794:	00 97       	sbiw	r24, 0x00	; 0
    6796:	09 f4       	brne	.+2      	; 0x679a <Button_enuPressedValue+0x26>
    6798:	4d c0       	rjmp	.+154    	; 0x6834 <Button_enuPressedValue+0xc0>
	{

		if(Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap >= DIO_u8PIN_0 &&
    679a:	8a 81       	ldd	r24, Y+2	; 0x02
    679c:	28 2f       	mov	r18, r24
    679e:	30 e0       	ldi	r19, 0x00	; 0
    67a0:	c9 01       	movw	r24, r18
    67a2:	88 0f       	add	r24, r24
    67a4:	99 1f       	adc	r25, r25
    67a6:	82 0f       	add	r24, r18
    67a8:	93 1f       	adc	r25, r19
    67aa:	fc 01       	movw	r30, r24
    67ac:	e4 52       	subi	r30, 0x24	; 36
    67ae:	fe 4f       	sbci	r31, 0xFE	; 254
    67b0:	80 81       	ld	r24, Z
    67b2:	80 32       	cpi	r24, 0x20	; 32
    67b4:	e0 f5       	brcc	.+120    	; 0x682e <Button_enuPressedValue+0xba>
		   Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap <= DIO_u8PIN_31	)
		{

			BTN_ErrorState = DIO_enuReadPin(Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap , u8ButtonValueCpy);
    67b6:	8a 81       	ldd	r24, Y+2	; 0x02
    67b8:	28 2f       	mov	r18, r24
    67ba:	30 e0       	ldi	r19, 0x00	; 0
    67bc:	c9 01       	movw	r24, r18
    67be:	88 0f       	add	r24, r24
    67c0:	99 1f       	adc	r25, r25
    67c2:	82 0f       	add	r24, r18
    67c4:	93 1f       	adc	r25, r19
    67c6:	fc 01       	movw	r30, r24
    67c8:	e4 52       	subi	r30, 0x24	; 36
    67ca:	fe 4f       	sbci	r31, 0xFE	; 254
    67cc:	80 81       	ld	r24, Z
    67ce:	2b 81       	ldd	r18, Y+3	; 0x03
    67d0:	3c 81       	ldd	r19, Y+4	; 0x04
    67d2:	b9 01       	movw	r22, r18
    67d4:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_enuReadPin>
    67d8:	89 83       	std	Y+1, r24	; 0x01

			switch(Button_astrButtonPinMapping[u8ButtonNumCpy].u8ButtonModeConc)
    67da:	8a 81       	ldd	r24, Y+2	; 0x02
    67dc:	28 2f       	mov	r18, r24
    67de:	30 e0       	ldi	r19, 0x00	; 0
    67e0:	c9 01       	movw	r24, r18
    67e2:	88 0f       	add	r24, r24
    67e4:	99 1f       	adc	r25, r25
    67e6:	82 0f       	add	r24, r18
    67e8:	93 1f       	adc	r25, r19
    67ea:	fc 01       	movw	r30, r24
    67ec:	e3 52       	subi	r30, 0x23	; 35
    67ee:	fe 4f       	sbci	r31, 0xFE	; 254
    67f0:	80 81       	ld	r24, Z
    67f2:	28 2f       	mov	r18, r24
    67f4:	30 e0       	ldi	r19, 0x00	; 0
    67f6:	3f 83       	std	Y+7, r19	; 0x07
    67f8:	2e 83       	std	Y+6, r18	; 0x06
    67fa:	8e 81       	ldd	r24, Y+6	; 0x06
    67fc:	9f 81       	ldd	r25, Y+7	; 0x07
    67fe:	85 35       	cpi	r24, 0x55	; 85
    6800:	91 05       	cpc	r25, r1
    6802:	d1 f0       	breq	.+52     	; 0x6838 <Button_enuPressedValue+0xc4>
    6804:	2e 81       	ldd	r18, Y+6	; 0x06
    6806:	3f 81       	ldd	r19, Y+7	; 0x07
    6808:	2a 3a       	cpi	r18, 0xAA	; 170
    680a:	31 05       	cpc	r19, r1
    680c:	69 f4       	brne	.+26     	; 0x6828 <Button_enuPressedValue+0xb4>
			{

			case BUTTON_u8PullUp:
				*u8ButtonValueCpy = !(*u8ButtonValueCpy);
    680e:	eb 81       	ldd	r30, Y+3	; 0x03
    6810:	fc 81       	ldd	r31, Y+4	; 0x04
    6812:	80 81       	ld	r24, Z
    6814:	1d 82       	std	Y+5, r1	; 0x05
    6816:	88 23       	and	r24, r24
    6818:	11 f4       	brne	.+4      	; 0x681e <Button_enuPressedValue+0xaa>
    681a:	31 e0       	ldi	r19, 0x01	; 1
    681c:	3d 83       	std	Y+5, r19	; 0x05
    681e:	eb 81       	ldd	r30, Y+3	; 0x03
    6820:	fc 81       	ldd	r31, Y+4	; 0x04
    6822:	8d 81       	ldd	r24, Y+5	; 0x05
    6824:	80 83       	st	Z, r24
    6826:	08 c0       	rjmp	.+16     	; 0x6838 <Button_enuPressedValue+0xc4>
			case BUTTON_u8PullDown:
				//keep the same value
			break;

			default:
				BTN_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6828:	84 e0       	ldi	r24, 0x04	; 4
    682a:	89 83       	std	Y+1, r24	; 0x01
    682c:	05 c0       	rjmp	.+10     	; 0x6838 <Button_enuPressedValue+0xc4>
			}

		}
		else
		{
			BTN_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    682e:	82 e0       	ldi	r24, 0x02	; 2
    6830:	89 83       	std	Y+1, r24	; 0x01
    6832:	02 c0       	rjmp	.+4      	; 0x6838 <Button_enuPressedValue+0xc4>
		}

	}
	else
	{
		BTN_ErrorState = E_NOK_PARAM_NULL_POINTER;
    6834:	83 e0       	ldi	r24, 0x03	; 3
    6836:	89 83       	std	Y+1, r24	; 0x01
	}


	return BTN_ErrorState;
    6838:	89 81       	ldd	r24, Y+1	; 0x01
}
    683a:	27 96       	adiw	r28, 0x07	; 7
    683c:	0f b6       	in	r0, 0x3f	; 63
    683e:	f8 94       	cli
    6840:	de bf       	out	0x3e, r29	; 62
    6842:	0f be       	out	0x3f, r0	; 63
    6844:	cd bf       	out	0x3d, r28	; 61
    6846:	cf 91       	pop	r28
    6848:	df 91       	pop	r29
    684a:	08 95       	ret

0000684c <BuzzerON>:


uint8 Temp_u8Channel;

void BuzzerON(void)
{
    684c:	df 93       	push	r29
    684e:	cf 93       	push	r28
    6850:	cd b7       	in	r28, 0x3d	; 61
    6852:	de b7       	in	r29, 0x3e	; 62

	LED_enuToggle(LED_u8NUM_0);
    6854:	80 e0       	ldi	r24, 0x00	; 0
    6856:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <LED_enuToggle>
	TIM0_voidDelayMs(3000);
    685a:	88 eb       	ldi	r24, 0xB8	; 184
    685c:	9b e0       	ldi	r25, 0x0B	; 11
    685e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TIM0_voidDelayMs>

}
    6862:	cf 91       	pop	r28
    6864:	df 91       	pop	r29
    6866:	08 95       	ret

00006868 <BuzzerOFF>:
void BuzzerOFF(void)
{
    6868:	df 93       	push	r29
    686a:	cf 93       	push	r28
    686c:	cd b7       	in	r28, 0x3d	; 61
    686e:	de b7       	in	r29, 0x3e	; 62
	LED_enuWriteValue(Temp_astrChannelMapping[Temp_u8Channel].u8BuzzstrChannel , LED_u8OFF);
    6870:	80 91 31 02 	lds	r24, 0x0231
    6874:	28 2f       	mov	r18, r24
    6876:	30 e0       	ldi	r19, 0x00	; 0
    6878:	c9 01       	movw	r24, r18
    687a:	82 95       	swap	r24
    687c:	92 95       	swap	r25
    687e:	90 7f       	andi	r25, 0xF0	; 240
    6880:	98 27       	eor	r25, r24
    6882:	80 7f       	andi	r24, 0xF0	; 240
    6884:	98 27       	eor	r25, r24
    6886:	82 0f       	add	r24, r18
    6888:	93 1f       	adc	r25, r19
    688a:	fc 01       	movw	r30, r24
    688c:	e2 51       	subi	r30, 0x12	; 18
    688e:	fe 4f       	sbci	r31, 0xFE	; 254
    6890:	80 81       	ld	r24, Z
    6892:	60 e0       	ldi	r22, 0x00	; 0
    6894:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <LED_enuWriteValue>

}
    6898:	cf 91       	pop	r28
    689a:	df 91       	pop	r29
    689c:	08 95       	ret

0000689e <buzzerInit>:

void buzzerInit(void)
{
    689e:	df 93       	push	r29
    68a0:	cf 93       	push	r28
    68a2:	cd b7       	in	r28, 0x3d	; 61
    68a4:	de b7       	in	r29, 0x3e	; 62
	GIE_voidDisable();
    68a6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <GIE_voidDisable>
	TIM0_voidFPWMInit();
    68aa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <TIM0_voidFPWMInit>
	TIM0_voidSetCtcCallback(BuzzerON);
    68ae:	86 e2       	ldi	r24, 0x26	; 38
    68b0:	94 e3       	ldi	r25, 0x34	; 52
    68b2:	0e 94 41 0c 	call	0x1882	; 0x1882 <TIM0_voidSetCtcCallback>
	TIM0_voidEnableCTCIntterrupt();
    68b6:	0e 94 13 0c 	call	0x1826	; 0x1826 <TIM0_voidEnableCTCIntterrupt>
	GIE_voidEnable();
    68ba:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <GIE_voidEnable>
}
    68be:	cf 91       	pop	r28
    68c0:	df 91       	pop	r29
    68c2:	08 95       	ret

000068c4 <Temp_vidInit>:
void Temp_vidInit(uint8 TempChannel)
{
    68c4:	df 93       	push	r29
    68c6:	cf 93       	push	r28
    68c8:	0f 92       	push	r0
    68ca:	cd b7       	in	r28, 0x3d	; 61
    68cc:	de b7       	in	r29, 0x3e	; 62
    68ce:	89 83       	std	Y+1, r24	; 0x01

	LM35_vidInit(TempChannel);
    68d0:	89 81       	ldd	r24, Y+1	; 0x01
    68d2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <LM35_vidInit>
	Temp_u8Channel = TempChannel;
    68d6:	89 81       	ldd	r24, Y+1	; 0x01
    68d8:	80 93 31 02 	sts	0x0231, r24

}
    68dc:	0f 90       	pop	r0
    68de:	cf 91       	pop	r28
    68e0:	df 91       	pop	r29
    68e2:	08 95       	ret

000068e4 <Temp_vidReadTemp>:

void Temp_vidReadTemp(void)
{
    68e4:	0f 93       	push	r16
    68e6:	1f 93       	push	r17
    68e8:	df 93       	push	r29
    68ea:	cf 93       	push	r28
    68ec:	cd b7       	in	r28, 0x3d	; 61
    68ee:	de b7       	in	r29, 0x3e	; 62
	Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent =
    68f0:	80 91 31 02 	lds	r24, 0x0231
    68f4:	08 2f       	mov	r16, r24
    68f6:	10 e0       	ldi	r17, 0x00	; 0
    68f8:	80 91 31 02 	lds	r24, 0x0231
    68fc:	28 2f       	mov	r18, r24
    68fe:	30 e0       	ldi	r19, 0x00	; 0
    6900:	c9 01       	movw	r24, r18
    6902:	82 95       	swap	r24
    6904:	92 95       	swap	r25
    6906:	90 7f       	andi	r25, 0xF0	; 240
    6908:	98 27       	eor	r25, r24
    690a:	80 7f       	andi	r24, 0xF0	; 240
    690c:	98 27       	eor	r25, r24
    690e:	82 0f       	add	r24, r18
    6910:	93 1f       	adc	r25, r19
    6912:	fc 01       	movw	r30, r24
    6914:	e3 51       	subi	r30, 0x13	; 19
    6916:	fe 4f       	sbci	r31, 0xFE	; 254
    6918:	80 81       	ld	r24, Z
    691a:	0e 94 b6 1c 	call	0x396c	; 0x396c <LM35_u16ReadTemp>
    691e:	9b 01       	movw	r18, r22
    6920:	ac 01       	movw	r20, r24
    6922:	c8 01       	movw	r24, r16
    6924:	82 95       	swap	r24
    6926:	92 95       	swap	r25
    6928:	90 7f       	andi	r25, 0xF0	; 240
    692a:	98 27       	eor	r25, r24
    692c:	80 7f       	andi	r24, 0xF0	; 240
    692e:	98 27       	eor	r25, r24
    6930:	80 0f       	add	r24, r16
    6932:	91 1f       	adc	r25, r17
    6934:	fc 01       	movw	r30, r24
    6936:	e9 50       	subi	r30, 0x09	; 9
    6938:	fe 4f       	sbci	r31, 0xFE	; 254
    693a:	20 83       	st	Z, r18
    693c:	31 83       	std	Z+1, r19	; 0x01
    693e:	42 83       	std	Z+2, r20	; 0x02
    6940:	53 83       	std	Z+3, r21	; 0x03
			LM35_u16ReadTemp(Temp_astrChannelMapping[Temp_u8Channel].u8LM35strChannel);

	LCD_enuWriteCmd(LCD_u8NUM_1 , LCD_u8CLEAR);
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	61 e0       	ldi	r22, 0x01	; 1
    6946:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_enuWriteCmd>
	LCD_enuWriteChar(LCD_u8NUM_1 , ' ');
    694a:	81 e0       	ldi	r24, 0x01	; 1
    694c:	60 e2       	ldi	r22, 0x20	; 32
    694e:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
	LCD_enuWritenumber(LCD_u8NUM_1,Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent );
    6952:	80 91 31 02 	lds	r24, 0x0231
    6956:	28 2f       	mov	r18, r24
    6958:	30 e0       	ldi	r19, 0x00	; 0
    695a:	c9 01       	movw	r24, r18
    695c:	82 95       	swap	r24
    695e:	92 95       	swap	r25
    6960:	90 7f       	andi	r25, 0xF0	; 240
    6962:	98 27       	eor	r25, r24
    6964:	80 7f       	andi	r24, 0xF0	; 240
    6966:	98 27       	eor	r25, r24
    6968:	82 0f       	add	r24, r18
    696a:	93 1f       	adc	r25, r19
    696c:	fc 01       	movw	r30, r24
    696e:	e9 50       	subi	r30, 0x09	; 9
    6970:	fe 4f       	sbci	r31, 0xFE	; 254
    6972:	20 81       	ld	r18, Z
    6974:	31 81       	ldd	r19, Z+1	; 0x01
    6976:	42 81       	ldd	r20, Z+2	; 0x02
    6978:	53 81       	ldd	r21, Z+3	; 0x03
    697a:	81 e0       	ldi	r24, 0x01	; 1
    697c:	ba 01       	movw	r22, r20
    697e:	a9 01       	movw	r20, r18
    6980:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <LCD_enuWritenumber>
	EEPROM_voidWrite(0x10, Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent);
    6984:	80 91 31 02 	lds	r24, 0x0231
    6988:	28 2f       	mov	r18, r24
    698a:	30 e0       	ldi	r19, 0x00	; 0
    698c:	c9 01       	movw	r24, r18
    698e:	82 95       	swap	r24
    6990:	92 95       	swap	r25
    6992:	90 7f       	andi	r25, 0xF0	; 240
    6994:	98 27       	eor	r25, r24
    6996:	80 7f       	andi	r24, 0xF0	; 240
    6998:	98 27       	eor	r25, r24
    699a:	82 0f       	add	r24, r18
    699c:	93 1f       	adc	r25, r19
    699e:	fc 01       	movw	r30, r24
    69a0:	e9 50       	subi	r30, 0x09	; 9
    69a2:	fe 4f       	sbci	r31, 0xFE	; 254
    69a4:	20 81       	ld	r18, Z
    69a6:	31 81       	ldd	r19, Z+1	; 0x01
    69a8:	42 81       	ldd	r20, Z+2	; 0x02
    69aa:	53 81       	ldd	r21, Z+3	; 0x03
    69ac:	80 e1       	ldi	r24, 0x10	; 16
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	ba 01       	movw	r22, r20
    69b2:	a9 01       	movw	r20, r18
    69b4:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <EEPROM_voidWrite>

}
    69b8:	cf 91       	pop	r28
    69ba:	df 91       	pop	r29
    69bc:	1f 91       	pop	r17
    69be:	0f 91       	pop	r16
    69c0:	08 95       	ret

000069c2 <Temp_vidTempSystemTask>:


void Temp_vidTempSystemTask(void)
{
    69c2:	af 92       	push	r10
    69c4:	bf 92       	push	r11
    69c6:	cf 92       	push	r12
    69c8:	df 92       	push	r13
    69ca:	ef 92       	push	r14
    69cc:	ff 92       	push	r15
    69ce:	0f 93       	push	r16
    69d0:	1f 93       	push	r17
    69d2:	df 93       	push	r29
    69d4:	cf 93       	push	r28
    69d6:	00 d0       	rcall	.+0      	; 0x69d8 <Temp_vidTempSystemTask+0x16>
    69d8:	cd b7       	in	r28, 0x3d	; 61
    69da:	de b7       	in	r29, 0x3e	; 62

	Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent =
    69dc:	80 91 31 02 	lds	r24, 0x0231
    69e0:	08 2f       	mov	r16, r24
    69e2:	10 e0       	ldi	r17, 0x00	; 0
    69e4:	80 91 31 02 	lds	r24, 0x0231
    69e8:	28 2f       	mov	r18, r24
    69ea:	30 e0       	ldi	r19, 0x00	; 0
    69ec:	c9 01       	movw	r24, r18
    69ee:	82 95       	swap	r24
    69f0:	92 95       	swap	r25
    69f2:	90 7f       	andi	r25, 0xF0	; 240
    69f4:	98 27       	eor	r25, r24
    69f6:	80 7f       	andi	r24, 0xF0	; 240
    69f8:	98 27       	eor	r25, r24
    69fa:	82 0f       	add	r24, r18
    69fc:	93 1f       	adc	r25, r19
    69fe:	fc 01       	movw	r30, r24
    6a00:	e3 51       	subi	r30, 0x13	; 19
    6a02:	fe 4f       	sbci	r31, 0xFE	; 254
    6a04:	80 81       	ld	r24, Z
    6a06:	0e 94 b6 1c 	call	0x396c	; 0x396c <LM35_u16ReadTemp>
    6a0a:	9b 01       	movw	r18, r22
    6a0c:	ac 01       	movw	r20, r24
    6a0e:	c8 01       	movw	r24, r16
    6a10:	82 95       	swap	r24
    6a12:	92 95       	swap	r25
    6a14:	90 7f       	andi	r25, 0xF0	; 240
    6a16:	98 27       	eor	r25, r24
    6a18:	80 7f       	andi	r24, 0xF0	; 240
    6a1a:	98 27       	eor	r25, r24
    6a1c:	80 0f       	add	r24, r16
    6a1e:	91 1f       	adc	r25, r17
    6a20:	fc 01       	movw	r30, r24
    6a22:	e9 50       	subi	r30, 0x09	; 9
    6a24:	fe 4f       	sbci	r31, 0xFE	; 254
    6a26:	20 83       	st	Z, r18
    6a28:	31 83       	std	Z+1, r19	; 0x01
    6a2a:	42 83       	std	Z+2, r20	; 0x02
    6a2c:	53 83       	std	Z+3, r21	; 0x03
			LM35_u16ReadTemp(Temp_astrChannelMapping[Temp_u8Channel].u8LM35strChannel);
	if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent > TempFire)
    6a2e:	80 91 31 02 	lds	r24, 0x0231
    6a32:	28 2f       	mov	r18, r24
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	c9 01       	movw	r24, r18
    6a38:	82 95       	swap	r24
    6a3a:	92 95       	swap	r25
    6a3c:	90 7f       	andi	r25, 0xF0	; 240
    6a3e:	98 27       	eor	r25, r24
    6a40:	80 7f       	andi	r24, 0xF0	; 240
    6a42:	98 27       	eor	r25, r24
    6a44:	82 0f       	add	r24, r18
    6a46:	93 1f       	adc	r25, r19
    6a48:	fc 01       	movw	r30, r24
    6a4a:	e9 50       	subi	r30, 0x09	; 9
    6a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a4e:	80 81       	ld	r24, Z
    6a50:	91 81       	ldd	r25, Z+1	; 0x01
    6a52:	a2 81       	ldd	r26, Z+2	; 0x02
    6a54:	b3 81       	ldd	r27, Z+3	; 0x03
    6a56:	bc 01       	movw	r22, r24
    6a58:	cd 01       	movw	r24, r26
    6a5a:	20 e0       	ldi	r18, 0x00	; 0
    6a5c:	30 e0       	ldi	r19, 0x00	; 0
    6a5e:	4c e8       	ldi	r20, 0x8C	; 140
    6a60:	52 e4       	ldi	r21, 0x42	; 66
    6a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a66:	18 16       	cp	r1, r24
    6a68:	1c f4       	brge	.+6      	; 0x6a70 <Temp_vidTempSystemTask+0xae>
	{
		buzzerInit();
    6a6a:	0e 94 4f 34 	call	0x689e	; 0x689e <buzzerInit>
    6a6e:	20 c0       	rjmp	.+64     	; 0x6ab0 <Temp_vidTempSystemTask+0xee>
	}
	else if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent < TempSafety)
    6a70:	80 91 31 02 	lds	r24, 0x0231
    6a74:	28 2f       	mov	r18, r24
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	c9 01       	movw	r24, r18
    6a7a:	82 95       	swap	r24
    6a7c:	92 95       	swap	r25
    6a7e:	90 7f       	andi	r25, 0xF0	; 240
    6a80:	98 27       	eor	r25, r24
    6a82:	80 7f       	andi	r24, 0xF0	; 240
    6a84:	98 27       	eor	r25, r24
    6a86:	82 0f       	add	r24, r18
    6a88:	93 1f       	adc	r25, r19
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	e9 50       	subi	r30, 0x09	; 9
    6a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    6a90:	80 81       	ld	r24, Z
    6a92:	91 81       	ldd	r25, Z+1	; 0x01
    6a94:	a2 81       	ldd	r26, Z+2	; 0x02
    6a96:	b3 81       	ldd	r27, Z+3	; 0x03
    6a98:	bc 01       	movw	r22, r24
    6a9a:	cd 01       	movw	r24, r26
    6a9c:	20 e0       	ldi	r18, 0x00	; 0
    6a9e:	30 e0       	ldi	r19, 0x00	; 0
    6aa0:	48 e4       	ldi	r20, 0x48	; 72
    6aa2:	52 e4       	ldi	r21, 0x42	; 66
    6aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6aa8:	88 23       	and	r24, r24
    6aaa:	14 f4       	brge	.+4      	; 0x6ab0 <Temp_vidTempSystemTask+0xee>
	{
		BuzzerOFF();
    6aac:	0e 94 34 34 	call	0x6868	; 0x6868 <BuzzerOFF>
	}

	switch(Temp_astrChannelMapping[Temp_u8Channel].u8TempState)
    6ab0:	80 91 31 02 	lds	r24, 0x0231
    6ab4:	28 2f       	mov	r18, r24
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	c9 01       	movw	r24, r18
    6aba:	82 95       	swap	r24
    6abc:	92 95       	swap	r25
    6abe:	90 7f       	andi	r25, 0xF0	; 240
    6ac0:	98 27       	eor	r25, r24
    6ac2:	80 7f       	andi	r24, 0xF0	; 240
    6ac4:	98 27       	eor	r25, r24
    6ac6:	82 0f       	add	r24, r18
    6ac8:	93 1f       	adc	r25, r19
    6aca:	fc 01       	movw	r30, r24
    6acc:	e5 51       	subi	r30, 0x15	; 21
    6ace:	fe 4f       	sbci	r31, 0xFE	; 254
    6ad0:	80 81       	ld	r24, Z
    6ad2:	28 2f       	mov	r18, r24
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	3a 83       	std	Y+2, r19	; 0x02
    6ad8:	29 83       	std	Y+1, r18	; 0x01
    6ada:	89 81       	ldd	r24, Y+1	; 0x01
    6adc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ade:	84 34       	cpi	r24, 0x44	; 68
    6ae0:	91 05       	cpc	r25, r1
    6ae2:	09 f4       	brne	.+2      	; 0x6ae6 <Temp_vidTempSystemTask+0x124>
    6ae4:	78 c0       	rjmp	.+240    	; 0x6bd6 <Temp_vidTempSystemTask+0x214>
    6ae6:	29 81       	ldd	r18, Y+1	; 0x01
    6ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    6aea:	2e 3e       	cpi	r18, 0xEE	; 238
    6aec:	31 05       	cpc	r19, r1
    6aee:	09 f0       	breq	.+2      	; 0x6af2 <Temp_vidTempSystemTask+0x130>
    6af0:	e2 c0       	rjmp	.+452    	; 0x6cb6 <Temp_vidTempSystemTask+0x2f4>
	{
	case TEMP_StateOFF:
	{
		if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent >
    6af2:	80 91 31 02 	lds	r24, 0x0231
    6af6:	28 2f       	mov	r18, r24
    6af8:	30 e0       	ldi	r19, 0x00	; 0
    6afa:	c9 01       	movw	r24, r18
    6afc:	82 95       	swap	r24
    6afe:	92 95       	swap	r25
    6b00:	90 7f       	andi	r25, 0xF0	; 240
    6b02:	98 27       	eor	r25, r24
    6b04:	80 7f       	andi	r24, 0xF0	; 240
    6b06:	98 27       	eor	r25, r24
    6b08:	82 0f       	add	r24, r18
    6b0a:	93 1f       	adc	r25, r19
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	e9 50       	subi	r30, 0x09	; 9
    6b10:	fe 4f       	sbci	r31, 0xFE	; 254
    6b12:	a0 80       	ld	r10, Z
    6b14:	b1 80       	ldd	r11, Z+1	; 0x01
    6b16:	c2 80       	ldd	r12, Z+2	; 0x02
    6b18:	d3 80       	ldd	r13, Z+3	; 0x03
    6b1a:	80 91 31 02 	lds	r24, 0x0231
    6b1e:	28 2f       	mov	r18, r24
    6b20:	30 e0       	ldi	r19, 0x00	; 0
    6b22:	c9 01       	movw	r24, r18
    6b24:	82 95       	swap	r24
    6b26:	92 95       	swap	r25
    6b28:	90 7f       	andi	r25, 0xF0	; 240
    6b2a:	98 27       	eor	r25, r24
    6b2c:	80 7f       	andi	r24, 0xF0	; 240
    6b2e:	98 27       	eor	r25, r24
    6b30:	82 0f       	add	r24, r18
    6b32:	93 1f       	adc	r25, r19
    6b34:	fc 01       	movw	r30, r24
    6b36:	e1 51       	subi	r30, 0x11	; 17
    6b38:	fe 4f       	sbci	r31, 0xFE	; 254
    6b3a:	e0 80       	ld	r14, Z
    6b3c:	f1 80       	ldd	r15, Z+1	; 0x01
    6b3e:	02 81       	ldd	r16, Z+2	; 0x02
    6b40:	13 81       	ldd	r17, Z+3	; 0x03
    6b42:	80 91 31 02 	lds	r24, 0x0231
    6b46:	28 2f       	mov	r18, r24
    6b48:	30 e0       	ldi	r19, 0x00	; 0
    6b4a:	c9 01       	movw	r24, r18
    6b4c:	82 95       	swap	r24
    6b4e:	92 95       	swap	r25
    6b50:	90 7f       	andi	r25, 0xF0	; 240
    6b52:	98 27       	eor	r25, r24
    6b54:	80 7f       	andi	r24, 0xF0	; 240
    6b56:	98 27       	eor	r25, r24
    6b58:	82 0f       	add	r24, r18
    6b5a:	93 1f       	adc	r25, r19
    6b5c:	fc 01       	movw	r30, r24
    6b5e:	ed 50       	subi	r30, 0x0D	; 13
    6b60:	fe 4f       	sbci	r31, 0xFE	; 254
    6b62:	20 81       	ld	r18, Z
    6b64:	31 81       	ldd	r19, Z+1	; 0x01
    6b66:	42 81       	ldd	r20, Z+2	; 0x02
    6b68:	53 81       	ldd	r21, Z+3	; 0x03
    6b6a:	c8 01       	movw	r24, r16
    6b6c:	b7 01       	movw	r22, r14
    6b6e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    6b72:	dc 01       	movw	r26, r24
    6b74:	cb 01       	movw	r24, r22
    6b76:	9c 01       	movw	r18, r24
    6b78:	ad 01       	movw	r20, r26
    6b7a:	c6 01       	movw	r24, r12
    6b7c:	b5 01       	movw	r22, r10
    6b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b82:	18 16       	cp	r1, r24
    6b84:	0c f0       	brlt	.+2      	; 0x6b88 <Temp_vidTempSystemTask+0x1c6>
    6b86:	97 c0       	rjmp	.+302    	; 0x6cb6 <Temp_vidTempSystemTask+0x2f4>
		(Temp_astrChannelMapping[Temp_u8Channel].u8TempNormal + Temp_astrChannelMapping[Temp_u8Channel].u8TempThreshold ))
		{
			Temp_astrChannelMapping[Temp_u8Channel].u8TempState = TEMP_StateON;
    6b88:	80 91 31 02 	lds	r24, 0x0231
    6b8c:	28 2f       	mov	r18, r24
    6b8e:	30 e0       	ldi	r19, 0x00	; 0
    6b90:	c9 01       	movw	r24, r18
    6b92:	82 95       	swap	r24
    6b94:	92 95       	swap	r25
    6b96:	90 7f       	andi	r25, 0xF0	; 240
    6b98:	98 27       	eor	r25, r24
    6b9a:	80 7f       	andi	r24, 0xF0	; 240
    6b9c:	98 27       	eor	r25, r24
    6b9e:	82 0f       	add	r24, r18
    6ba0:	93 1f       	adc	r25, r19
    6ba2:	fc 01       	movw	r30, r24
    6ba4:	e5 51       	subi	r30, 0x15	; 21
    6ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ba8:	84 e4       	ldi	r24, 0x44	; 68
    6baa:	80 83       	st	Z, r24
			Relay_enuState(Temp_astrChannelMapping[Temp_u8Channel].u8RELAYstrChannel , RELAY_ON);
    6bac:	80 91 31 02 	lds	r24, 0x0231
    6bb0:	28 2f       	mov	r18, r24
    6bb2:	30 e0       	ldi	r19, 0x00	; 0
    6bb4:	c9 01       	movw	r24, r18
    6bb6:	82 95       	swap	r24
    6bb8:	92 95       	swap	r25
    6bba:	90 7f       	andi	r25, 0xF0	; 240
    6bbc:	98 27       	eor	r25, r24
    6bbe:	80 7f       	andi	r24, 0xF0	; 240
    6bc0:	98 27       	eor	r25, r24
    6bc2:	82 0f       	add	r24, r18
    6bc4:	93 1f       	adc	r25, r19
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	e4 51       	subi	r30, 0x14	; 20
    6bca:	fe 4f       	sbci	r31, 0xFE	; 254
    6bcc:	80 81       	ld	r24, Z
    6bce:	65 e5       	ldi	r22, 0x55	; 85
    6bd0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <Relay_enuState>
    6bd4:	70 c0       	rjmp	.+224    	; 0x6cb6 <Temp_vidTempSystemTask+0x2f4>

	}
	break;
	case TEMP_StateON:
	{
		if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent <
    6bd6:	80 91 31 02 	lds	r24, 0x0231
    6bda:	28 2f       	mov	r18, r24
    6bdc:	30 e0       	ldi	r19, 0x00	; 0
    6bde:	c9 01       	movw	r24, r18
    6be0:	82 95       	swap	r24
    6be2:	92 95       	swap	r25
    6be4:	90 7f       	andi	r25, 0xF0	; 240
    6be6:	98 27       	eor	r25, r24
    6be8:	80 7f       	andi	r24, 0xF0	; 240
    6bea:	98 27       	eor	r25, r24
    6bec:	82 0f       	add	r24, r18
    6bee:	93 1f       	adc	r25, r19
    6bf0:	fc 01       	movw	r30, r24
    6bf2:	e9 50       	subi	r30, 0x09	; 9
    6bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    6bf6:	a0 80       	ld	r10, Z
    6bf8:	b1 80       	ldd	r11, Z+1	; 0x01
    6bfa:	c2 80       	ldd	r12, Z+2	; 0x02
    6bfc:	d3 80       	ldd	r13, Z+3	; 0x03
    6bfe:	80 91 31 02 	lds	r24, 0x0231
    6c02:	28 2f       	mov	r18, r24
    6c04:	30 e0       	ldi	r19, 0x00	; 0
    6c06:	c9 01       	movw	r24, r18
    6c08:	82 95       	swap	r24
    6c0a:	92 95       	swap	r25
    6c0c:	90 7f       	andi	r25, 0xF0	; 240
    6c0e:	98 27       	eor	r25, r24
    6c10:	80 7f       	andi	r24, 0xF0	; 240
    6c12:	98 27       	eor	r25, r24
    6c14:	82 0f       	add	r24, r18
    6c16:	93 1f       	adc	r25, r19
    6c18:	fc 01       	movw	r30, r24
    6c1a:	e1 51       	subi	r30, 0x11	; 17
    6c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c1e:	e0 80       	ld	r14, Z
    6c20:	f1 80       	ldd	r15, Z+1	; 0x01
    6c22:	02 81       	ldd	r16, Z+2	; 0x02
    6c24:	13 81       	ldd	r17, Z+3	; 0x03
    6c26:	80 91 31 02 	lds	r24, 0x0231
    6c2a:	28 2f       	mov	r18, r24
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	c9 01       	movw	r24, r18
    6c30:	82 95       	swap	r24
    6c32:	92 95       	swap	r25
    6c34:	90 7f       	andi	r25, 0xF0	; 240
    6c36:	98 27       	eor	r25, r24
    6c38:	80 7f       	andi	r24, 0xF0	; 240
    6c3a:	98 27       	eor	r25, r24
    6c3c:	82 0f       	add	r24, r18
    6c3e:	93 1f       	adc	r25, r19
    6c40:	fc 01       	movw	r30, r24
    6c42:	ed 50       	subi	r30, 0x0D	; 13
    6c44:	fe 4f       	sbci	r31, 0xFE	; 254
    6c46:	20 81       	ld	r18, Z
    6c48:	31 81       	ldd	r19, Z+1	; 0x01
    6c4a:	42 81       	ldd	r20, Z+2	; 0x02
    6c4c:	53 81       	ldd	r21, Z+3	; 0x03
    6c4e:	c8 01       	movw	r24, r16
    6c50:	b7 01       	movw	r22, r14
    6c52:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    6c56:	dc 01       	movw	r26, r24
    6c58:	cb 01       	movw	r24, r22
    6c5a:	9c 01       	movw	r18, r24
    6c5c:	ad 01       	movw	r20, r26
    6c5e:	c6 01       	movw	r24, r12
    6c60:	b5 01       	movw	r22, r10
    6c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c66:	88 23       	and	r24, r24
    6c68:	34 f5       	brge	.+76     	; 0x6cb6 <Temp_vidTempSystemTask+0x2f4>
		(Temp_astrChannelMapping[Temp_u8Channel].u8TempNormal - Temp_astrChannelMapping[Temp_u8Channel].u8TempThreshold ))
		{
			Temp_astrChannelMapping[Temp_u8Channel].u8TempState = TEMP_StateOFF;
    6c6a:	80 91 31 02 	lds	r24, 0x0231
    6c6e:	28 2f       	mov	r18, r24
    6c70:	30 e0       	ldi	r19, 0x00	; 0
    6c72:	c9 01       	movw	r24, r18
    6c74:	82 95       	swap	r24
    6c76:	92 95       	swap	r25
    6c78:	90 7f       	andi	r25, 0xF0	; 240
    6c7a:	98 27       	eor	r25, r24
    6c7c:	80 7f       	andi	r24, 0xF0	; 240
    6c7e:	98 27       	eor	r25, r24
    6c80:	82 0f       	add	r24, r18
    6c82:	93 1f       	adc	r25, r19
    6c84:	fc 01       	movw	r30, r24
    6c86:	e5 51       	subi	r30, 0x15	; 21
    6c88:	fe 4f       	sbci	r31, 0xFE	; 254
    6c8a:	8e ee       	ldi	r24, 0xEE	; 238
    6c8c:	80 83       	st	Z, r24
			Relay_enuState(Temp_astrChannelMapping[Temp_u8Channel].u8RELAYstrChannel , RELAY_OFF);
    6c8e:	80 91 31 02 	lds	r24, 0x0231
    6c92:	28 2f       	mov	r18, r24
    6c94:	30 e0       	ldi	r19, 0x00	; 0
    6c96:	c9 01       	movw	r24, r18
    6c98:	82 95       	swap	r24
    6c9a:	92 95       	swap	r25
    6c9c:	90 7f       	andi	r25, 0xF0	; 240
    6c9e:	98 27       	eor	r25, r24
    6ca0:	80 7f       	andi	r24, 0xF0	; 240
    6ca2:	98 27       	eor	r25, r24
    6ca4:	82 0f       	add	r24, r18
    6ca6:	93 1f       	adc	r25, r19
    6ca8:	fc 01       	movw	r30, r24
    6caa:	e4 51       	subi	r30, 0x14	; 20
    6cac:	fe 4f       	sbci	r31, 0xFE	; 254
    6cae:	80 81       	ld	r24, Z
    6cb0:	66 e6       	ldi	r22, 0x66	; 102
    6cb2:	0e 94 b1 1a 	call	0x3562	; 0x3562 <Relay_enuState>
	break;

	}


}
    6cb6:	0f 90       	pop	r0
    6cb8:	0f 90       	pop	r0
    6cba:	cf 91       	pop	r28
    6cbc:	df 91       	pop	r29
    6cbe:	1f 91       	pop	r17
    6cc0:	0f 91       	pop	r16
    6cc2:	ff 90       	pop	r15
    6cc4:	ef 90       	pop	r14
    6cc6:	df 90       	pop	r13
    6cc8:	cf 90       	pop	r12
    6cca:	bf 90       	pop	r11
    6ccc:	af 90       	pop	r10
    6cce:	08 95       	ret

00006cd0 <calc>:
#include "../HAL/LCD/LCD.h"
#include "../HAL/KEYPAD/KEYPAD_int.h"


float32 calc(uint8 f32Op1 , uint8 f32Op2 , uint8 u8OpType)
{
    6cd0:	ef 92       	push	r14
    6cd2:	ff 92       	push	r15
    6cd4:	0f 93       	push	r16
    6cd6:	1f 93       	push	r17
    6cd8:	df 93       	push	r29
    6cda:	cf 93       	push	r28
    6cdc:	cd b7       	in	r28, 0x3d	; 61
    6cde:	de b7       	in	r29, 0x3e	; 62
    6ce0:	29 97       	sbiw	r28, 0x09	; 9
    6ce2:	0f b6       	in	r0, 0x3f	; 63
    6ce4:	f8 94       	cli
    6ce6:	de bf       	out	0x3e, r29	; 62
    6ce8:	0f be       	out	0x3f, r0	; 63
    6cea:	cd bf       	out	0x3d, r28	; 61
    6cec:	8d 83       	std	Y+5, r24	; 0x05
    6cee:	6e 83       	std	Y+6, r22	; 0x06
    6cf0:	4f 83       	std	Y+7, r20	; 0x07
	float32 result;
	switch(u8OpType)
    6cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    6cf4:	28 2f       	mov	r18, r24
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
    6cf8:	39 87       	std	Y+9, r19	; 0x09
    6cfa:	28 87       	std	Y+8, r18	; 0x08
    6cfc:	48 85       	ldd	r20, Y+8	; 0x08
    6cfe:	59 85       	ldd	r21, Y+9	; 0x09
    6d00:	4b 32       	cpi	r20, 0x2B	; 43
    6d02:	51 05       	cpc	r21, r1
    6d04:	b9 f0       	breq	.+46     	; 0x6d34 <calc+0x64>
    6d06:	88 85       	ldd	r24, Y+8	; 0x08
    6d08:	99 85       	ldd	r25, Y+9	; 0x09
    6d0a:	8c 32       	cpi	r24, 0x2C	; 44
    6d0c:	91 05       	cpc	r25, r1
    6d0e:	34 f4       	brge	.+12     	; 0x6d1c <calc+0x4c>
    6d10:	28 85       	ldd	r18, Y+8	; 0x08
    6d12:	39 85       	ldd	r19, Y+9	; 0x09
    6d14:	2a 32       	cpi	r18, 0x2A	; 42
    6d16:	31 05       	cpc	r19, r1
    6d18:	e9 f1       	breq	.+122    	; 0x6d94 <calc+0xc4>
    6d1a:	7b c0       	rjmp	.+246    	; 0x6e12 <calc+0x142>
    6d1c:	48 85       	ldd	r20, Y+8	; 0x08
    6d1e:	59 85       	ldd	r21, Y+9	; 0x09
    6d20:	4d 32       	cpi	r20, 0x2D	; 45
    6d22:	51 05       	cpc	r21, r1
    6d24:	f1 f0       	breq	.+60     	; 0x6d62 <calc+0x92>
    6d26:	88 85       	ldd	r24, Y+8	; 0x08
    6d28:	99 85       	ldd	r25, Y+9	; 0x09
    6d2a:	8f 32       	cpi	r24, 0x2F	; 47
    6d2c:	91 05       	cpc	r25, r1
    6d2e:	09 f4       	brne	.+2      	; 0x6d32 <calc+0x62>
    6d30:	4e c0       	rjmp	.+156    	; 0x6dce <calc+0xfe>
    6d32:	6f c0       	rjmp	.+222    	; 0x6e12 <calc+0x142>
	{
	case '+':
		result = f32Op1 + f32Op2;
    6d34:	8d 81       	ldd	r24, Y+5	; 0x05
    6d36:	28 2f       	mov	r18, r24
    6d38:	30 e0       	ldi	r19, 0x00	; 0
    6d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    6d3c:	88 2f       	mov	r24, r24
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	82 0f       	add	r24, r18
    6d42:	93 1f       	adc	r25, r19
    6d44:	aa 27       	eor	r26, r26
    6d46:	97 fd       	sbrc	r25, 7
    6d48:	a0 95       	com	r26
    6d4a:	ba 2f       	mov	r27, r26
    6d4c:	bc 01       	movw	r22, r24
    6d4e:	cd 01       	movw	r24, r26
    6d50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6d54:	dc 01       	movw	r26, r24
    6d56:	cb 01       	movw	r24, r22
    6d58:	89 83       	std	Y+1, r24	; 0x01
    6d5a:	9a 83       	std	Y+2, r25	; 0x02
    6d5c:	ab 83       	std	Y+3, r26	; 0x03
    6d5e:	bc 83       	std	Y+4, r27	; 0x04
    6d60:	58 c0       	rjmp	.+176    	; 0x6e12 <calc+0x142>
	break;

	case '-':
		result = f32Op1 - f32Op2;
    6d62:	8d 81       	ldd	r24, Y+5	; 0x05
    6d64:	28 2f       	mov	r18, r24
    6d66:	30 e0       	ldi	r19, 0x00	; 0
    6d68:	8e 81       	ldd	r24, Y+6	; 0x06
    6d6a:	88 2f       	mov	r24, r24
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	a9 01       	movw	r20, r18
    6d70:	48 1b       	sub	r20, r24
    6d72:	59 0b       	sbc	r21, r25
    6d74:	ca 01       	movw	r24, r20
    6d76:	aa 27       	eor	r26, r26
    6d78:	97 fd       	sbrc	r25, 7
    6d7a:	a0 95       	com	r26
    6d7c:	ba 2f       	mov	r27, r26
    6d7e:	bc 01       	movw	r22, r24
    6d80:	cd 01       	movw	r24, r26
    6d82:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6d86:	dc 01       	movw	r26, r24
    6d88:	cb 01       	movw	r24, r22
    6d8a:	89 83       	std	Y+1, r24	; 0x01
    6d8c:	9a 83       	std	Y+2, r25	; 0x02
    6d8e:	ab 83       	std	Y+3, r26	; 0x03
    6d90:	bc 83       	std	Y+4, r27	; 0x04
    6d92:	3f c0       	rjmp	.+126    	; 0x6e12 <calc+0x142>
	break;

	case '*':
		result = f32Op1 * f32Op2;
    6d94:	8d 81       	ldd	r24, Y+5	; 0x05
    6d96:	28 2f       	mov	r18, r24
    6d98:	30 e0       	ldi	r19, 0x00	; 0
    6d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6d9c:	88 2f       	mov	r24, r24
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
    6da0:	ac 01       	movw	r20, r24
    6da2:	24 9f       	mul	r18, r20
    6da4:	c0 01       	movw	r24, r0
    6da6:	25 9f       	mul	r18, r21
    6da8:	90 0d       	add	r25, r0
    6daa:	34 9f       	mul	r19, r20
    6dac:	90 0d       	add	r25, r0
    6dae:	11 24       	eor	r1, r1
    6db0:	aa 27       	eor	r26, r26
    6db2:	97 fd       	sbrc	r25, 7
    6db4:	a0 95       	com	r26
    6db6:	ba 2f       	mov	r27, r26
    6db8:	bc 01       	movw	r22, r24
    6dba:	cd 01       	movw	r24, r26
    6dbc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6dc0:	dc 01       	movw	r26, r24
    6dc2:	cb 01       	movw	r24, r22
    6dc4:	89 83       	std	Y+1, r24	; 0x01
    6dc6:	9a 83       	std	Y+2, r25	; 0x02
    6dc8:	ab 83       	std	Y+3, r26	; 0x03
    6dca:	bc 83       	std	Y+4, r27	; 0x04
    6dcc:	22 c0       	rjmp	.+68     	; 0x6e12 <calc+0x142>

	break;

	case '/':
		result = (float32)f32Op1 / f32Op2;
    6dce:	8d 81       	ldd	r24, Y+5	; 0x05
    6dd0:	88 2f       	mov	r24, r24
    6dd2:	90 e0       	ldi	r25, 0x00	; 0
    6dd4:	a0 e0       	ldi	r26, 0x00	; 0
    6dd6:	b0 e0       	ldi	r27, 0x00	; 0
    6dd8:	bc 01       	movw	r22, r24
    6dda:	cd 01       	movw	r24, r26
    6ddc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    6de0:	7b 01       	movw	r14, r22
    6de2:	8c 01       	movw	r16, r24
    6de4:	8e 81       	ldd	r24, Y+6	; 0x06
    6de6:	88 2f       	mov	r24, r24
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	aa 27       	eor	r26, r26
    6dec:	97 fd       	sbrc	r25, 7
    6dee:	a0 95       	com	r26
    6df0:	ba 2f       	mov	r27, r26
    6df2:	bc 01       	movw	r22, r24
    6df4:	cd 01       	movw	r24, r26
    6df6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6dfa:	9b 01       	movw	r18, r22
    6dfc:	ac 01       	movw	r20, r24
    6dfe:	c8 01       	movw	r24, r16
    6e00:	b7 01       	movw	r22, r14
    6e02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6e06:	dc 01       	movw	r26, r24
    6e08:	cb 01       	movw	r24, r22
    6e0a:	89 83       	std	Y+1, r24	; 0x01
    6e0c:	9a 83       	std	Y+2, r25	; 0x02
    6e0e:	ab 83       	std	Y+3, r26	; 0x03
    6e10:	bc 83       	std	Y+4, r27	; 0x04
	break;
	}

	return result;
    6e12:	89 81       	ldd	r24, Y+1	; 0x01
    6e14:	9a 81       	ldd	r25, Y+2	; 0x02
    6e16:	ab 81       	ldd	r26, Y+3	; 0x03
    6e18:	bc 81       	ldd	r27, Y+4	; 0x04
}
    6e1a:	bc 01       	movw	r22, r24
    6e1c:	cd 01       	movw	r24, r26
    6e1e:	29 96       	adiw	r28, 0x09	; 9
    6e20:	0f b6       	in	r0, 0x3f	; 63
    6e22:	f8 94       	cli
    6e24:	de bf       	out	0x3e, r29	; 62
    6e26:	0f be       	out	0x3f, r0	; 63
    6e28:	cd bf       	out	0x3d, r28	; 61
    6e2a:	cf 91       	pop	r28
    6e2c:	df 91       	pop	r29
    6e2e:	1f 91       	pop	r17
    6e30:	0f 91       	pop	r16
    6e32:	ff 90       	pop	r15
    6e34:	ef 90       	pop	r14
    6e36:	08 95       	ret

00006e38 <puin8_calculation>:



void puin8_calculation(float32 *ptrResult)
{
    6e38:	ef 92       	push	r14
    6e3a:	ff 92       	push	r15
    6e3c:	0f 93       	push	r16
    6e3e:	1f 93       	push	r17
    6e40:	df 93       	push	r29
    6e42:	cf 93       	push	r28
    6e44:	cd b7       	in	r28, 0x3d	; 61
    6e46:	de b7       	in	r29, 0x3e	; 62
    6e48:	a5 97       	sbiw	r28, 0x25	; 37
    6e4a:	0f b6       	in	r0, 0x3f	; 63
    6e4c:	f8 94       	cli
    6e4e:	de bf       	out	0x3e, r29	; 62
    6e50:	0f be       	out	0x3f, r0	; 63
    6e52:	cd bf       	out	0x3d, r28	; 61
    6e54:	9b a3       	std	Y+35, r25	; 0x23
    6e56:	8a a3       	std	Y+34, r24	; 0x22
	float32 pas8KeyPadChar[2] = {0.0} ;
    6e58:	88 e0       	ldi	r24, 0x08	; 8
    6e5a:	fe 01       	movw	r30, r28
    6e5c:	7a 96       	adiw	r30, 0x1a	; 26
    6e5e:	df 01       	movw	r26, r30
    6e60:	28 2f       	mov	r18, r24
    6e62:	1d 92       	st	X+, r1
    6e64:	2a 95       	dec	r18
    6e66:	e9 f7       	brne	.-6      	; 0x6e62 <puin8_calculation+0x2a>
	uint8 u8SizeCpy = 0;
    6e68:	19 8e       	std	Y+25, r1	; 0x19
	uint8 u8CntrLoc = 0;
    6e6a:	18 8e       	std	Y+24, r1	; 0x18
	uint8 u8FlagOp = 0;
    6e6c:	1f 8a       	std	Y+23, r1	; 0x17
	uint8 u8FlagFloat = 0;
    6e6e:	1e 8a       	std	Y+22, r1	; 0x16
	uint8 u8CntrFloat = 0;
    6e70:	1d 8a       	std	Y+21, r1	; 0x15
	uint8 u8OpType = 0;
    6e72:	1c 8a       	std	Y+20, r1	; 0x14
	uint8 u8KeyPadChar = 0;
    6e74:	1b 8a       	std	Y+19, r1	; 0x13
	float32 s8Number = 0.0;
    6e76:	80 e0       	ldi	r24, 0x00	; 0
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	a0 e0       	ldi	r26, 0x00	; 0
    6e7c:	b0 e0       	ldi	r27, 0x00	; 0
    6e7e:	8f 87       	std	Y+15, r24	; 0x0f
    6e80:	98 8b       	std	Y+16, r25	; 0x10
    6e82:	a9 8b       	std	Y+17, r26	; 0x11
    6e84:	ba 8b       	std	Y+18, r27	; 0x12
	*ptrResult = 7;
    6e86:	ea a1       	ldd	r30, Y+34	; 0x22
    6e88:	fb a1       	ldd	r31, Y+35	; 0x23
    6e8a:	80 e0       	ldi	r24, 0x00	; 0
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	a0 ee       	ldi	r26, 0xE0	; 224
    6e90:	b0 e4       	ldi	r27, 0x40	; 64
    6e92:	80 83       	st	Z, r24
    6e94:	91 83       	std	Z+1, r25	; 0x01
    6e96:	a2 83       	std	Z+2, r26	; 0x02
    6e98:	b3 83       	std	Z+3, r27	; 0x03
    6e9a:	5c c1       	rjmp	.+696    	; 0x7154 <puin8_calculation+0x31c>

	while(u8KeyPadChar != '=')
	{
		u8CntrLoc++;
    6e9c:	88 8d       	ldd	r24, Y+24	; 0x18
    6e9e:	8f 5f       	subi	r24, 0xFF	; 255
    6ea0:	88 8f       	std	Y+24, r24	; 0x18

		u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
    6ea2:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <KEYPAD_uint8GetPressedKey>
    6ea6:	8b 8b       	std	Y+19, r24	; 0x13
    6ea8:	03 c0       	rjmp	.+6      	; 0x6eb0 <puin8_calculation+0x78>

		while(u8KeyPadChar == 0xff){
			u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
    6eaa:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <KEYPAD_uint8GetPressedKey>
    6eae:	8b 8b       	std	Y+19, r24	; 0x13
	{
		u8CntrLoc++;

		u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();

		while(u8KeyPadChar == 0xff){
    6eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    6eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    6eb4:	d1 f3       	breq	.-12     	; 0x6eaa <puin8_calculation+0x72>
			u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
		}

		switch(u8KeyPadChar)
    6eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    6eb8:	a8 2f       	mov	r26, r24
    6eba:	b0 e0       	ldi	r27, 0x00	; 0
    6ebc:	bd a3       	std	Y+37, r27	; 0x25
    6ebe:	ac a3       	std	Y+36, r26	; 0x24
    6ec0:	2c a1       	ldd	r18, Y+36	; 0x24
    6ec2:	3d a1       	ldd	r19, Y+37	; 0x25
    6ec4:	2d 32       	cpi	r18, 0x2D	; 45
    6ec6:	31 05       	cpc	r19, r1
    6ec8:	91 f1       	breq	.+100    	; 0x6f2e <puin8_calculation+0xf6>
    6eca:	8c a1       	ldd	r24, Y+36	; 0x24
    6ecc:	9d a1       	ldd	r25, Y+37	; 0x25
    6ece:	8e 32       	cpi	r24, 0x2E	; 46
    6ed0:	91 05       	cpc	r25, r1
    6ed2:	64 f4       	brge	.+24     	; 0x6eec <puin8_calculation+0xb4>
    6ed4:	ac a1       	ldd	r26, Y+36	; 0x24
    6ed6:	bd a1       	ldd	r27, Y+37	; 0x25
    6ed8:	aa 32       	cpi	r26, 0x2A	; 42
    6eda:	b1 05       	cpc	r27, r1
    6edc:	09 f4       	brne	.+2      	; 0x6ee0 <puin8_calculation+0xa8>
    6ede:	45 c0       	rjmp	.+138    	; 0x6f6a <puin8_calculation+0x132>
    6ee0:	2c a1       	ldd	r18, Y+36	; 0x24
    6ee2:	3d a1       	ldd	r19, Y+37	; 0x25
    6ee4:	2b 32       	cpi	r18, 0x2B	; 43
    6ee6:	31 05       	cpc	r19, r1
    6ee8:	99 f0       	breq	.+38     	; 0x6f10 <puin8_calculation+0xd8>
    6eea:	80 c0       	rjmp	.+256    	; 0x6fec <puin8_calculation+0x1b4>
    6eec:	8c a1       	ldd	r24, Y+36	; 0x24
    6eee:	9d a1       	ldd	r25, Y+37	; 0x25
    6ef0:	8f 32       	cpi	r24, 0x2F	; 47
    6ef2:	91 05       	cpc	r25, r1
    6ef4:	59 f1       	breq	.+86     	; 0x6f4c <puin8_calculation+0x114>
    6ef6:	ac a1       	ldd	r26, Y+36	; 0x24
    6ef8:	bd a1       	ldd	r27, Y+37	; 0x25
    6efa:	af 32       	cpi	r26, 0x2F	; 47
    6efc:	b1 05       	cpc	r27, r1
    6efe:	0c f4       	brge	.+2      	; 0x6f02 <puin8_calculation+0xca>
    6f00:	43 c0       	rjmp	.+134    	; 0x6f88 <puin8_calculation+0x150>
    6f02:	2c a1       	ldd	r18, Y+36	; 0x24
    6f04:	3d a1       	ldd	r19, Y+37	; 0x25
    6f06:	2d 33       	cpi	r18, 0x3D	; 61
    6f08:	31 05       	cpc	r19, r1
    6f0a:	09 f4       	brne	.+2      	; 0x6f0e <puin8_calculation+0xd6>
    6f0c:	40 c0       	rjmp	.+128    	; 0x6f8e <puin8_calculation+0x156>
    6f0e:	6e c0       	rjmp	.+220    	; 0x6fec <puin8_calculation+0x1b4>
		{
		case '+' :
			 pas8KeyPadChar[0] = s8Number ;
    6f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f12:	98 89       	ldd	r25, Y+16	; 0x10
    6f14:	a9 89       	ldd	r26, Y+17	; 0x11
    6f16:	ba 89       	ldd	r27, Y+18	; 0x12
    6f18:	8a 8f       	std	Y+26, r24	; 0x1a
    6f1a:	9b 8f       	std	Y+27, r25	; 0x1b
    6f1c:	ac 8f       	std	Y+28, r26	; 0x1c
    6f1e:	bd 8f       	std	Y+29, r27	; 0x1d
			u8SizeCpy++;
    6f20:	89 8d       	ldd	r24, Y+25	; 0x19
    6f22:	8f 5f       	subi	r24, 0xFF	; 255
    6f24:	89 8f       	std	Y+25, r24	; 0x19
			u8OpType = '+';
    6f26:	8b e2       	ldi	r24, 0x2B	; 43
    6f28:	8c 8b       	std	Y+20, r24	; 0x14
			u8FlagOp = 0;
    6f2a:	1f 8a       	std	Y+23, r1	; 0x17
    6f2c:	9d c0       	rjmp	.+314    	; 0x7068 <puin8_calculation+0x230>

		break;

		case '-' :
			 pas8KeyPadChar[0] = s8Number ;
    6f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f30:	98 89       	ldd	r25, Y+16	; 0x10
    6f32:	a9 89       	ldd	r26, Y+17	; 0x11
    6f34:	ba 89       	ldd	r27, Y+18	; 0x12
    6f36:	8a 8f       	std	Y+26, r24	; 0x1a
    6f38:	9b 8f       	std	Y+27, r25	; 0x1b
    6f3a:	ac 8f       	std	Y+28, r26	; 0x1c
    6f3c:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '-';
    6f3e:	8d e2       	ldi	r24, 0x2D	; 45
    6f40:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6f42:	89 8d       	ldd	r24, Y+25	; 0x19
    6f44:	8f 5f       	subi	r24, 0xFF	; 255
    6f46:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6f48:	1f 8a       	std	Y+23, r1	; 0x17
    6f4a:	8e c0       	rjmp	.+284    	; 0x7068 <puin8_calculation+0x230>


		break;

		case '/' :
			 pas8KeyPadChar[0] = s8Number ;
    6f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f4e:	98 89       	ldd	r25, Y+16	; 0x10
    6f50:	a9 89       	ldd	r26, Y+17	; 0x11
    6f52:	ba 89       	ldd	r27, Y+18	; 0x12
    6f54:	8a 8f       	std	Y+26, r24	; 0x1a
    6f56:	9b 8f       	std	Y+27, r25	; 0x1b
    6f58:	ac 8f       	std	Y+28, r26	; 0x1c
    6f5a:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '/';
    6f5c:	8f e2       	ldi	r24, 0x2F	; 47
    6f5e:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6f60:	89 8d       	ldd	r24, Y+25	; 0x19
    6f62:	8f 5f       	subi	r24, 0xFF	; 255
    6f64:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6f66:	1f 8a       	std	Y+23, r1	; 0x17
    6f68:	7f c0       	rjmp	.+254    	; 0x7068 <puin8_calculation+0x230>


		break;

		case '*' :
			pas8KeyPadChar[0] = s8Number ;
    6f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f6c:	98 89       	ldd	r25, Y+16	; 0x10
    6f6e:	a9 89       	ldd	r26, Y+17	; 0x11
    6f70:	ba 89       	ldd	r27, Y+18	; 0x12
    6f72:	8a 8f       	std	Y+26, r24	; 0x1a
    6f74:	9b 8f       	std	Y+27, r25	; 0x1b
    6f76:	ac 8f       	std	Y+28, r26	; 0x1c
    6f78:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '*';
    6f7a:	8a e2       	ldi	r24, 0x2A	; 42
    6f7c:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6f7e:	89 8d       	ldd	r24, Y+25	; 0x19
    6f80:	8f 5f       	subi	r24, 0xFF	; 255
    6f82:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6f84:	1f 8a       	std	Y+23, r1	; 0x17
    6f86:	70 c0       	rjmp	.+224    	; 0x7068 <puin8_calculation+0x230>


		break;

		case '.' :
			u8FlagFloat = 1;
    6f88:	81 e0       	ldi	r24, 0x01	; 1
    6f8a:	8e 8b       	std	Y+22, r24	; 0x16
    6f8c:	6d c0       	rjmp	.+218    	; 0x7068 <puin8_calculation+0x230>
		break;

		case '=' :
			 pas8KeyPadChar[1] = s8Number ;
    6f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f90:	98 89       	ldd	r25, Y+16	; 0x10
    6f92:	a9 89       	ldd	r26, Y+17	; 0x11
    6f94:	ba 89       	ldd	r27, Y+18	; 0x12
    6f96:	8e 8f       	std	Y+30, r24	; 0x1e
    6f98:	9f 8f       	std	Y+31, r25	; 0x1f
    6f9a:	a8 a3       	std	Y+32, r26	; 0x20
    6f9c:	b9 a3       	std	Y+33, r27	; 0x21
			u8SizeCpy++;
    6f9e:	89 8d       	ldd	r24, Y+25	; 0x19
    6fa0:	8f 5f       	subi	r24, 0xFF	; 255
    6fa2:	89 8f       	std	Y+25, r24	; 0x19
			*ptrResult = calc(pas8KeyPadChar[0] , pas8KeyPadChar[1],u8OpType );
    6fa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6fa6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6fa8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6faa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6fac:	bc 01       	movw	r22, r24
    6fae:	cd 01       	movw	r24, r26
    6fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fb4:	dc 01       	movw	r26, r24
    6fb6:	cb 01       	movw	r24, r22
    6fb8:	18 2f       	mov	r17, r24
    6fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6fbc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6fbe:	a8 a1       	ldd	r26, Y+32	; 0x20
    6fc0:	b9 a1       	ldd	r27, Y+33	; 0x21
    6fc2:	bc 01       	movw	r22, r24
    6fc4:	cd 01       	movw	r24, r26
    6fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fca:	dc 01       	movw	r26, r24
    6fcc:	cb 01       	movw	r24, r22
    6fce:	98 2f       	mov	r25, r24
    6fd0:	81 2f       	mov	r24, r17
    6fd2:	69 2f       	mov	r22, r25
    6fd4:	4c 89       	ldd	r20, Y+20	; 0x14
    6fd6:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <calc>
    6fda:	dc 01       	movw	r26, r24
    6fdc:	cb 01       	movw	r24, r22
    6fde:	ea a1       	ldd	r30, Y+34	; 0x22
    6fe0:	fb a1       	ldd	r31, Y+35	; 0x23
    6fe2:	80 83       	st	Z, r24
    6fe4:	91 83       	std	Z+1, r25	; 0x01
    6fe6:	a2 83       	std	Z+2, r26	; 0x02
    6fe8:	b3 83       	std	Z+3, r27	; 0x03
    6fea:	3e c0       	rjmp	.+124    	; 0x7068 <puin8_calculation+0x230>

		break;

		default:

			if(u8FlagOp == 1)
    6fec:	8f 89       	ldd	r24, Y+23	; 0x17
    6fee:	81 30       	cpi	r24, 0x01	; 1
    6ff0:	39 f5       	brne	.+78     	; 0x7040 <puin8_calculation+0x208>
			{

				s8Number = s8Number*10 + (u8KeyPadChar - '0');
    6ff2:	6f 85       	ldd	r22, Y+15	; 0x0f
    6ff4:	78 89       	ldd	r23, Y+16	; 0x10
    6ff6:	89 89       	ldd	r24, Y+17	; 0x11
    6ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    6ffa:	20 e0       	ldi	r18, 0x00	; 0
    6ffc:	30 e0       	ldi	r19, 0x00	; 0
    6ffe:	40 e2       	ldi	r20, 0x20	; 32
    7000:	51 e4       	ldi	r21, 0x41	; 65
    7002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7006:	dc 01       	movw	r26, r24
    7008:	cb 01       	movw	r24, r22
    700a:	7c 01       	movw	r14, r24
    700c:	8d 01       	movw	r16, r26
    700e:	8b 89       	ldd	r24, Y+19	; 0x13
    7010:	88 2f       	mov	r24, r24
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	c0 97       	sbiw	r24, 0x30	; 48
    7016:	aa 27       	eor	r26, r26
    7018:	97 fd       	sbrc	r25, 7
    701a:	a0 95       	com	r26
    701c:	ba 2f       	mov	r27, r26
    701e:	bc 01       	movw	r22, r24
    7020:	cd 01       	movw	r24, r26
    7022:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    7026:	9b 01       	movw	r18, r22
    7028:	ac 01       	movw	r20, r24
    702a:	c8 01       	movw	r24, r16
    702c:	b7 01       	movw	r22, r14
    702e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    7032:	dc 01       	movw	r26, r24
    7034:	cb 01       	movw	r24, r22
    7036:	8f 87       	std	Y+15, r24	; 0x0f
    7038:	98 8b       	std	Y+16, r25	; 0x10
    703a:	a9 8b       	std	Y+17, r26	; 0x11
    703c:	ba 8b       	std	Y+18, r27	; 0x12
    703e:	14 c0       	rjmp	.+40     	; 0x7068 <puin8_calculation+0x230>
			}
			else{
				s8Number = (u8KeyPadChar - '0');
    7040:	8b 89       	ldd	r24, Y+19	; 0x13
    7042:	88 2f       	mov	r24, r24
    7044:	90 e0       	ldi	r25, 0x00	; 0
    7046:	c0 97       	sbiw	r24, 0x30	; 48
    7048:	aa 27       	eor	r26, r26
    704a:	97 fd       	sbrc	r25, 7
    704c:	a0 95       	com	r26
    704e:	ba 2f       	mov	r27, r26
    7050:	bc 01       	movw	r22, r24
    7052:	cd 01       	movw	r24, r26
    7054:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    7058:	dc 01       	movw	r26, r24
    705a:	cb 01       	movw	r24, r22
    705c:	8f 87       	std	Y+15, r24	; 0x0f
    705e:	98 8b       	std	Y+16, r25	; 0x10
    7060:	a9 8b       	std	Y+17, r26	; 0x11
    7062:	ba 8b       	std	Y+18, r27	; 0x12
				u8FlagOp = 1;
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	8f 8b       	std	Y+23, r24	; 0x17

		break;
		}


		LCD_enuWriteChar(LCD_u8NUM_0,u8KeyPadChar);
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	6b 89       	ldd	r22, Y+19	; 0x13
    706c:	0e 94 26 2a 	call	0x544c	; 0x544c <LCD_enuWriteChar>
    7070:	80 e0       	ldi	r24, 0x00	; 0
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	a8 e4       	ldi	r26, 0x48	; 72
    7076:	b3 e4       	ldi	r27, 0x43	; 67
    7078:	8b 87       	std	Y+11, r24	; 0x0b
    707a:	9c 87       	std	Y+12, r25	; 0x0c
    707c:	ad 87       	std	Y+13, r26	; 0x0d
    707e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7080:	6b 85       	ldd	r22, Y+11	; 0x0b
    7082:	7c 85       	ldd	r23, Y+12	; 0x0c
    7084:	8d 85       	ldd	r24, Y+13	; 0x0d
    7086:	9e 85       	ldd	r25, Y+14	; 0x0e
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	4a ef       	ldi	r20, 0xFA	; 250
    708e:	54 e4       	ldi	r21, 0x44	; 68
    7090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7094:	dc 01       	movw	r26, r24
    7096:	cb 01       	movw	r24, r22
    7098:	8f 83       	std	Y+7, r24	; 0x07
    709a:	98 87       	std	Y+8, r25	; 0x08
    709c:	a9 87       	std	Y+9, r26	; 0x09
    709e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70a0:	6f 81       	ldd	r22, Y+7	; 0x07
    70a2:	78 85       	ldd	r23, Y+8	; 0x08
    70a4:	89 85       	ldd	r24, Y+9	; 0x09
    70a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    70a8:	20 e0       	ldi	r18, 0x00	; 0
    70aa:	30 e0       	ldi	r19, 0x00	; 0
    70ac:	40 e8       	ldi	r20, 0x80	; 128
    70ae:	5f e3       	ldi	r21, 0x3F	; 63
    70b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70b4:	88 23       	and	r24, r24
    70b6:	2c f4       	brge	.+10     	; 0x70c2 <puin8_calculation+0x28a>
		__ticks = 1;
    70b8:	81 e0       	ldi	r24, 0x01	; 1
    70ba:	90 e0       	ldi	r25, 0x00	; 0
    70bc:	9e 83       	std	Y+6, r25	; 0x06
    70be:	8d 83       	std	Y+5, r24	; 0x05
    70c0:	3f c0       	rjmp	.+126    	; 0x7140 <puin8_calculation+0x308>
	else if (__tmp > 65535)
    70c2:	6f 81       	ldd	r22, Y+7	; 0x07
    70c4:	78 85       	ldd	r23, Y+8	; 0x08
    70c6:	89 85       	ldd	r24, Y+9	; 0x09
    70c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    70ca:	20 e0       	ldi	r18, 0x00	; 0
    70cc:	3f ef       	ldi	r19, 0xFF	; 255
    70ce:	4f e7       	ldi	r20, 0x7F	; 127
    70d0:	57 e4       	ldi	r21, 0x47	; 71
    70d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    70d6:	18 16       	cp	r1, r24
    70d8:	4c f5       	brge	.+82     	; 0x712c <puin8_calculation+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70da:	6b 85       	ldd	r22, Y+11	; 0x0b
    70dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    70de:	8d 85       	ldd	r24, Y+13	; 0x0d
    70e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    70e2:	20 e0       	ldi	r18, 0x00	; 0
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	40 e2       	ldi	r20, 0x20	; 32
    70e8:	51 e4       	ldi	r21, 0x41	; 65
    70ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70ee:	dc 01       	movw	r26, r24
    70f0:	cb 01       	movw	r24, r22
    70f2:	bc 01       	movw	r22, r24
    70f4:	cd 01       	movw	r24, r26
    70f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70fa:	dc 01       	movw	r26, r24
    70fc:	cb 01       	movw	r24, r22
    70fe:	9e 83       	std	Y+6, r25	; 0x06
    7100:	8d 83       	std	Y+5, r24	; 0x05
    7102:	0f c0       	rjmp	.+30     	; 0x7122 <puin8_calculation+0x2ea>
    7104:	88 ec       	ldi	r24, 0xC8	; 200
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	9c 83       	std	Y+4, r25	; 0x04
    710a:	8b 83       	std	Y+3, r24	; 0x03
    710c:	8b 81       	ldd	r24, Y+3	; 0x03
    710e:	9c 81       	ldd	r25, Y+4	; 0x04
    7110:	01 97       	sbiw	r24, 0x01	; 1
    7112:	f1 f7       	brne	.-4      	; 0x7110 <puin8_calculation+0x2d8>
    7114:	9c 83       	std	Y+4, r25	; 0x04
    7116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7118:	8d 81       	ldd	r24, Y+5	; 0x05
    711a:	9e 81       	ldd	r25, Y+6	; 0x06
    711c:	01 97       	sbiw	r24, 0x01	; 1
    711e:	9e 83       	std	Y+6, r25	; 0x06
    7120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7122:	8d 81       	ldd	r24, Y+5	; 0x05
    7124:	9e 81       	ldd	r25, Y+6	; 0x06
    7126:	00 97       	sbiw	r24, 0x00	; 0
    7128:	69 f7       	brne	.-38     	; 0x7104 <puin8_calculation+0x2cc>
    712a:	14 c0       	rjmp	.+40     	; 0x7154 <puin8_calculation+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    712c:	6f 81       	ldd	r22, Y+7	; 0x07
    712e:	78 85       	ldd	r23, Y+8	; 0x08
    7130:	89 85       	ldd	r24, Y+9	; 0x09
    7132:	9a 85       	ldd	r25, Y+10	; 0x0a
    7134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7138:	dc 01       	movw	r26, r24
    713a:	cb 01       	movw	r24, r22
    713c:	9e 83       	std	Y+6, r25	; 0x06
    713e:	8d 83       	std	Y+5, r24	; 0x05
    7140:	8d 81       	ldd	r24, Y+5	; 0x05
    7142:	9e 81       	ldd	r25, Y+6	; 0x06
    7144:	9a 83       	std	Y+2, r25	; 0x02
    7146:	89 83       	std	Y+1, r24	; 0x01
    7148:	89 81       	ldd	r24, Y+1	; 0x01
    714a:	9a 81       	ldd	r25, Y+2	; 0x02
    714c:	01 97       	sbiw	r24, 0x01	; 1
    714e:	f1 f7       	brne	.-4      	; 0x714c <puin8_calculation+0x314>
    7150:	9a 83       	std	Y+2, r25	; 0x02
    7152:	89 83       	std	Y+1, r24	; 0x01
	uint8 u8OpType = 0;
	uint8 u8KeyPadChar = 0;
	float32 s8Number = 0.0;
	*ptrResult = 7;

	while(u8KeyPadChar != '=')
    7154:	8b 89       	ldd	r24, Y+19	; 0x13
    7156:	8d 33       	cpi	r24, 0x3D	; 61
    7158:	09 f0       	breq	.+2      	; 0x715c <puin8_calculation+0x324>
    715a:	a0 ce       	rjmp	.-704    	; 0x6e9c <puin8_calculation+0x64>

		LCD_enuWriteChar(LCD_u8NUM_0,u8KeyPadChar);
		_delay_ms(200);
	}

}
    715c:	a5 96       	adiw	r28, 0x25	; 37
    715e:	0f b6       	in	r0, 0x3f	; 63
    7160:	f8 94       	cli
    7162:	de bf       	out	0x3e, r29	; 62
    7164:	0f be       	out	0x3f, r0	; 63
    7166:	cd bf       	out	0x3d, r28	; 61
    7168:	cf 91       	pop	r28
    716a:	df 91       	pop	r29
    716c:	1f 91       	pop	r17
    716e:	0f 91       	pop	r16
    7170:	ff 90       	pop	r15
    7172:	ef 90       	pop	r14
    7174:	08 95       	ret

00007176 <main>:
#include "Temp/Temp.h"

#include <util/delay.h>

int main()
{
    7176:	df 93       	push	r29
    7178:	cf 93       	push	r28
    717a:	cd b7       	in	r28, 0x3d	; 61
    717c:	de b7       	in	r29, 0x3e	; 62
    717e:	2e 97       	sbiw	r28, 0x0e	; 14
    7180:	0f b6       	in	r0, 0x3f	; 63
    7182:	f8 94       	cli
    7184:	de bf       	out	0x3e, r29	; 62
    7186:	0f be       	out	0x3f, r0	; 63
    7188:	cd bf       	out	0x3d, r28	; 61
	Temp_vidInit(0);
    718a:	80 e0       	ldi	r24, 0x00	; 0
    718c:	0e 94 62 34 	call	0x68c4	; 0x68c4 <Temp_vidInit>

	while(1)
	{
		Temp_vidReadTemp();
    7190:	0e 94 72 34 	call	0x68e4	; 0x68e4 <Temp_vidReadTemp>
		Temp_vidTempSystemTask();
    7194:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <Temp_vidTempSystemTask>
    7198:	80 e0       	ldi	r24, 0x00	; 0
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	a8 ec       	ldi	r26, 0xC8	; 200
    719e:	b2 e4       	ldi	r27, 0x42	; 66
    71a0:	8b 87       	std	Y+11, r24	; 0x0b
    71a2:	9c 87       	std	Y+12, r25	; 0x0c
    71a4:	ad 87       	std	Y+13, r26	; 0x0d
    71a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    71aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    71ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    71ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    71b0:	20 e0       	ldi	r18, 0x00	; 0
    71b2:	30 e0       	ldi	r19, 0x00	; 0
    71b4:	4a ef       	ldi	r20, 0xFA	; 250
    71b6:	54 e4       	ldi	r21, 0x44	; 68
    71b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71bc:	dc 01       	movw	r26, r24
    71be:	cb 01       	movw	r24, r22
    71c0:	8f 83       	std	Y+7, r24	; 0x07
    71c2:	98 87       	std	Y+8, r25	; 0x08
    71c4:	a9 87       	std	Y+9, r26	; 0x09
    71c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    71c8:	6f 81       	ldd	r22, Y+7	; 0x07
    71ca:	78 85       	ldd	r23, Y+8	; 0x08
    71cc:	89 85       	ldd	r24, Y+9	; 0x09
    71ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    71d0:	20 e0       	ldi	r18, 0x00	; 0
    71d2:	30 e0       	ldi	r19, 0x00	; 0
    71d4:	40 e8       	ldi	r20, 0x80	; 128
    71d6:	5f e3       	ldi	r21, 0x3F	; 63
    71d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    71dc:	88 23       	and	r24, r24
    71de:	2c f4       	brge	.+10     	; 0x71ea <main+0x74>
		__ticks = 1;
    71e0:	81 e0       	ldi	r24, 0x01	; 1
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	9e 83       	std	Y+6, r25	; 0x06
    71e6:	8d 83       	std	Y+5, r24	; 0x05
    71e8:	3f c0       	rjmp	.+126    	; 0x7268 <main+0xf2>
	else if (__tmp > 65535)
    71ea:	6f 81       	ldd	r22, Y+7	; 0x07
    71ec:	78 85       	ldd	r23, Y+8	; 0x08
    71ee:	89 85       	ldd	r24, Y+9	; 0x09
    71f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    71f2:	20 e0       	ldi	r18, 0x00	; 0
    71f4:	3f ef       	ldi	r19, 0xFF	; 255
    71f6:	4f e7       	ldi	r20, 0x7F	; 127
    71f8:	57 e4       	ldi	r21, 0x47	; 71
    71fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    71fe:	18 16       	cp	r1, r24
    7200:	4c f5       	brge	.+82     	; 0x7254 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7202:	6b 85       	ldd	r22, Y+11	; 0x0b
    7204:	7c 85       	ldd	r23, Y+12	; 0x0c
    7206:	8d 85       	ldd	r24, Y+13	; 0x0d
    7208:	9e 85       	ldd	r25, Y+14	; 0x0e
    720a:	20 e0       	ldi	r18, 0x00	; 0
    720c:	30 e0       	ldi	r19, 0x00	; 0
    720e:	40 e2       	ldi	r20, 0x20	; 32
    7210:	51 e4       	ldi	r21, 0x41	; 65
    7212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7216:	dc 01       	movw	r26, r24
    7218:	cb 01       	movw	r24, r22
    721a:	bc 01       	movw	r22, r24
    721c:	cd 01       	movw	r24, r26
    721e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7222:	dc 01       	movw	r26, r24
    7224:	cb 01       	movw	r24, r22
    7226:	9e 83       	std	Y+6, r25	; 0x06
    7228:	8d 83       	std	Y+5, r24	; 0x05
    722a:	0f c0       	rjmp	.+30     	; 0x724a <main+0xd4>
    722c:	88 ec       	ldi	r24, 0xC8	; 200
    722e:	90 e0       	ldi	r25, 0x00	; 0
    7230:	9c 83       	std	Y+4, r25	; 0x04
    7232:	8b 83       	std	Y+3, r24	; 0x03
    7234:	8b 81       	ldd	r24, Y+3	; 0x03
    7236:	9c 81       	ldd	r25, Y+4	; 0x04
    7238:	01 97       	sbiw	r24, 0x01	; 1
    723a:	f1 f7       	brne	.-4      	; 0x7238 <main+0xc2>
    723c:	9c 83       	std	Y+4, r25	; 0x04
    723e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7240:	8d 81       	ldd	r24, Y+5	; 0x05
    7242:	9e 81       	ldd	r25, Y+6	; 0x06
    7244:	01 97       	sbiw	r24, 0x01	; 1
    7246:	9e 83       	std	Y+6, r25	; 0x06
    7248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    724a:	8d 81       	ldd	r24, Y+5	; 0x05
    724c:	9e 81       	ldd	r25, Y+6	; 0x06
    724e:	00 97       	sbiw	r24, 0x00	; 0
    7250:	69 f7       	brne	.-38     	; 0x722c <main+0xb6>
    7252:	9e cf       	rjmp	.-196    	; 0x7190 <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7254:	6f 81       	ldd	r22, Y+7	; 0x07
    7256:	78 85       	ldd	r23, Y+8	; 0x08
    7258:	89 85       	ldd	r24, Y+9	; 0x09
    725a:	9a 85       	ldd	r25, Y+10	; 0x0a
    725c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7260:	dc 01       	movw	r26, r24
    7262:	cb 01       	movw	r24, r22
    7264:	9e 83       	std	Y+6, r25	; 0x06
    7266:	8d 83       	std	Y+5, r24	; 0x05
    7268:	8d 81       	ldd	r24, Y+5	; 0x05
    726a:	9e 81       	ldd	r25, Y+6	; 0x06
    726c:	9a 83       	std	Y+2, r25	; 0x02
    726e:	89 83       	std	Y+1, r24	; 0x01
    7270:	89 81       	ldd	r24, Y+1	; 0x01
    7272:	9a 81       	ldd	r25, Y+2	; 0x02
    7274:	01 97       	sbiw	r24, 0x01	; 1
    7276:	f1 f7       	brne	.-4      	; 0x7274 <main+0xfe>
    7278:	9a 83       	std	Y+2, r25	; 0x02
    727a:	89 83       	std	Y+1, r24	; 0x01
    727c:	89 cf       	rjmp	.-238    	; 0x7190 <main+0x1a>

0000727e <__udivmodqi4>:
    727e:	99 1b       	sub	r25, r25
    7280:	79 e0       	ldi	r23, 0x09	; 9
    7282:	04 c0       	rjmp	.+8      	; 0x728c <__udivmodqi4_ep>

00007284 <__udivmodqi4_loop>:
    7284:	99 1f       	adc	r25, r25
    7286:	96 17       	cp	r25, r22
    7288:	08 f0       	brcs	.+2      	; 0x728c <__udivmodqi4_ep>
    728a:	96 1b       	sub	r25, r22

0000728c <__udivmodqi4_ep>:
    728c:	88 1f       	adc	r24, r24
    728e:	7a 95       	dec	r23
    7290:	c9 f7       	brne	.-14     	; 0x7284 <__udivmodqi4_loop>
    7292:	80 95       	com	r24
    7294:	08 95       	ret

00007296 <__divmodhi4>:
    7296:	97 fb       	bst	r25, 7
    7298:	09 2e       	mov	r0, r25
    729a:	07 26       	eor	r0, r23
    729c:	0a d0       	rcall	.+20     	; 0x72b2 <__divmodhi4_neg1>
    729e:	77 fd       	sbrc	r23, 7
    72a0:	04 d0       	rcall	.+8      	; 0x72aa <__divmodhi4_neg2>
    72a2:	0c d0       	rcall	.+24     	; 0x72bc <__udivmodhi4>
    72a4:	06 d0       	rcall	.+12     	; 0x72b2 <__divmodhi4_neg1>
    72a6:	00 20       	and	r0, r0
    72a8:	1a f4       	brpl	.+6      	; 0x72b0 <__divmodhi4_exit>

000072aa <__divmodhi4_neg2>:
    72aa:	70 95       	com	r23
    72ac:	61 95       	neg	r22
    72ae:	7f 4f       	sbci	r23, 0xFF	; 255

000072b0 <__divmodhi4_exit>:
    72b0:	08 95       	ret

000072b2 <__divmodhi4_neg1>:
    72b2:	f6 f7       	brtc	.-4      	; 0x72b0 <__divmodhi4_exit>
    72b4:	90 95       	com	r25
    72b6:	81 95       	neg	r24
    72b8:	9f 4f       	sbci	r25, 0xFF	; 255
    72ba:	08 95       	ret

000072bc <__udivmodhi4>:
    72bc:	aa 1b       	sub	r26, r26
    72be:	bb 1b       	sub	r27, r27
    72c0:	51 e1       	ldi	r21, 0x11	; 17
    72c2:	07 c0       	rjmp	.+14     	; 0x72d2 <__udivmodhi4_ep>

000072c4 <__udivmodhi4_loop>:
    72c4:	aa 1f       	adc	r26, r26
    72c6:	bb 1f       	adc	r27, r27
    72c8:	a6 17       	cp	r26, r22
    72ca:	b7 07       	cpc	r27, r23
    72cc:	10 f0       	brcs	.+4      	; 0x72d2 <__udivmodhi4_ep>
    72ce:	a6 1b       	sub	r26, r22
    72d0:	b7 0b       	sbc	r27, r23

000072d2 <__udivmodhi4_ep>:
    72d2:	88 1f       	adc	r24, r24
    72d4:	99 1f       	adc	r25, r25
    72d6:	5a 95       	dec	r21
    72d8:	a9 f7       	brne	.-22     	; 0x72c4 <__udivmodhi4_loop>
    72da:	80 95       	com	r24
    72dc:	90 95       	com	r25
    72de:	bc 01       	movw	r22, r24
    72e0:	cd 01       	movw	r24, r26
    72e2:	08 95       	ret

000072e4 <__prologue_saves__>:
    72e4:	2f 92       	push	r2
    72e6:	3f 92       	push	r3
    72e8:	4f 92       	push	r4
    72ea:	5f 92       	push	r5
    72ec:	6f 92       	push	r6
    72ee:	7f 92       	push	r7
    72f0:	8f 92       	push	r8
    72f2:	9f 92       	push	r9
    72f4:	af 92       	push	r10
    72f6:	bf 92       	push	r11
    72f8:	cf 92       	push	r12
    72fa:	df 92       	push	r13
    72fc:	ef 92       	push	r14
    72fe:	ff 92       	push	r15
    7300:	0f 93       	push	r16
    7302:	1f 93       	push	r17
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	cd b7       	in	r28, 0x3d	; 61
    730a:	de b7       	in	r29, 0x3e	; 62
    730c:	ca 1b       	sub	r28, r26
    730e:	db 0b       	sbc	r29, r27
    7310:	0f b6       	in	r0, 0x3f	; 63
    7312:	f8 94       	cli
    7314:	de bf       	out	0x3e, r29	; 62
    7316:	0f be       	out	0x3f, r0	; 63
    7318:	cd bf       	out	0x3d, r28	; 61
    731a:	09 94       	ijmp

0000731c <__epilogue_restores__>:
    731c:	2a 88       	ldd	r2, Y+18	; 0x12
    731e:	39 88       	ldd	r3, Y+17	; 0x11
    7320:	48 88       	ldd	r4, Y+16	; 0x10
    7322:	5f 84       	ldd	r5, Y+15	; 0x0f
    7324:	6e 84       	ldd	r6, Y+14	; 0x0e
    7326:	7d 84       	ldd	r7, Y+13	; 0x0d
    7328:	8c 84       	ldd	r8, Y+12	; 0x0c
    732a:	9b 84       	ldd	r9, Y+11	; 0x0b
    732c:	aa 84       	ldd	r10, Y+10	; 0x0a
    732e:	b9 84       	ldd	r11, Y+9	; 0x09
    7330:	c8 84       	ldd	r12, Y+8	; 0x08
    7332:	df 80       	ldd	r13, Y+7	; 0x07
    7334:	ee 80       	ldd	r14, Y+6	; 0x06
    7336:	fd 80       	ldd	r15, Y+5	; 0x05
    7338:	0c 81       	ldd	r16, Y+4	; 0x04
    733a:	1b 81       	ldd	r17, Y+3	; 0x03
    733c:	aa 81       	ldd	r26, Y+2	; 0x02
    733e:	b9 81       	ldd	r27, Y+1	; 0x01
    7340:	ce 0f       	add	r28, r30
    7342:	d1 1d       	adc	r29, r1
    7344:	0f b6       	in	r0, 0x3f	; 63
    7346:	f8 94       	cli
    7348:	de bf       	out	0x3e, r29	; 62
    734a:	0f be       	out	0x3f, r0	; 63
    734c:	cd bf       	out	0x3d, r28	; 61
    734e:	ed 01       	movw	r28, r26
    7350:	08 95       	ret

00007352 <_exit>:
    7352:	f8 94       	cli

00007354 <__stop_program>:
    7354:	ff cf       	rjmp	.-2      	; 0x7354 <__stop_program>
