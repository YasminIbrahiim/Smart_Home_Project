
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  00006ed6  00006f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008001fc  008001fc  00007106  2**0
                  ALLOC
  3 .stab         00007ed8  00000000  00000000  00007108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003722  00000000  00000000  0000efe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00012702  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000128c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00012ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000150e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000165b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000178c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00017aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00017dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000187c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_1>
       8:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_2>
       c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_3>
      10:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_4>
      14:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_10>
      2c:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_11>
      30:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fe e6       	ldi	r31, 0x6E	; 110
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <main>
      8a:	0c 94 69 37 	jmp	0x6ed2	; 0x6ed2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 37 	jmp	0x6e64	; 0x6e64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 37 	jmp	0x6e9c	; 0x6e9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 37 	jmp	0x6e7c	; 0x6e7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 37 	jmp	0x6e7c	; 0x6e7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 37 	jmp	0x6e64	; 0x6e64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 37 	jmp	0x6e9c	; 0x6e9c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 37 	jmp	0x6e74	; 0x6e74 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 37 	jmp	0x6eac	; 0x6eac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 37 	jmp	0x6e7c	; 0x6e7c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 37 	jmp	0x6e7c	; 0x6e7c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 37 	jmp	0x6e7c	; 0x6e7c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 57 37 	jmp	0x6eae	; 0x6eae <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 42 37 	jmp	0x6e84	; 0x6e84 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5e 37 	jmp	0x6ebc	; 0x6ebc <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 3a 37 	jmp	0x6e74	; 0x6e74 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 56 37 	jmp	0x6eac	; 0x6eac <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <SVAR_voidInit>:
#include "SVAR_cfg.h"
#include "SVAR_priv.h"

uint8 SVAR_u8ActiveVarient ;
void SVAR_voidInit(void )
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	 DIO_enuReadPin(SVAR_PIN_CONNECTION,&SVAR_u8ActiveVarient);
     ef2:	2a e1       	ldi	r18, 0x1A	; 26
     ef4:	32 e0       	ldi	r19, 0x02	; 2
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	b9 01       	movw	r22, r18
     efa:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <SVAR_u8GetActiveVariant>:
uint8 SVAR_u8GetActiveVariant(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	return SVAR_u8ActiveVarient ;
     f0c:	80 91 1a 02 	lds	r24, 0x021A
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <ICUM_voidInit>:
uint8 ICUM_u8FirstReading = 0 ;
uint8 ICUM_u8ActiveVariant ;


void ICUM_voidInit(void) 
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	ICUM_u8ActiveVariant = SVAR_u8GetActiveVariant();
     f1e:	0e 94 82 07 	call	0xf04	; 0xf04 <SVAR_u8GetActiveVariant>
     f22:	80 93 1b 02 	sts	0x021B, r24
	ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfcallback(ICUM_voidExtIntISR);
     f26:	80 91 1b 02 	lds	r24, 0x021B
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9c 01       	movw	r18, r24
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	c9 01       	movw	r24, r18
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 1b       	sub	r24, r18
     f44:	93 0b       	sbc	r25, r19
     f46:	fc 01       	movw	r30, r24
     f48:	e7 59       	subi	r30, 0x97	; 151
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	01 90       	ld	r0, Z+
     f4e:	f0 81       	ld	r31, Z
     f50:	e0 2d       	mov	r30, r0
     f52:	86 e2       	ldi	r24, 0x26	; 38
     f54:	98 e0       	ldi	r25, 0x08	; 8
     f56:	09 95       	icall
    ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfOvfCallback(ICUM_voidOvfIsr);
     f58:	80 91 1b 02 	lds	r24, 0x021B
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 1b       	sub	r24, r18
     f70:	93 0b       	sbc	r25, r19
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	fc 01       	movw	r30, r24
     f7a:	e7 59       	subi	r30, 0x97	; 151
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	83 ea       	ldi	r24, 0xA3	; 163
     f86:	99 e0       	ldi	r25, 0x09	; 9
     f88:	09 95       	icall
    
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <ICUM_voidGetFreqDuty>:

void ICUM_voidGetFreqDuty(float32 * pf32FreqCpy , float32 *f32DutyCpy)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <ICUM_voidGetFreqDuty+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ICUM_voidGetFreqDuty+0x8>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	7c 83       	std	Y+4, r23	; 0x04
     fa2:	6b 83       	std	Y+3, r22	; 0x03
    *pf32FreqCpy	=
     fa4:	80 91 1b 02 	lds	r24, 0x021B
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	c9 01       	movw	r24, r18
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	fc 01       	movw	r30, r24
     fc6:	ed 58       	subi	r30, 0x8D	; 141
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	a2 81       	ldd	r26, Z+2	; 0x02
     fd0:	b3 81       	ldd	r27, Z+3	; 0x03
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	20 91 06 02 	lds	r18, 0x0206
     fe2:	30 91 07 02 	lds	r19, 0x0207
     fe6:	40 91 08 02 	lds	r20, 0x0208
     fea:	50 91 09 02 	lds	r21, 0x0209
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
    		((float32)ICUM_apfConfigSet[ICUM_u8ActiveVariant].u32TimerFreq)
			/ (Ttotal);
    
	*f32DutyCpy  =  Tonu / Ttotal ;
    1006:	80 91 02 02 	lds	r24, 0x0202
    100a:	90 91 03 02 	lds	r25, 0x0203
    100e:	a0 91 04 02 	lds	r26, 0x0204
    1012:	b0 91 05 02 	lds	r27, 0x0205
    1016:	20 91 06 02 	lds	r18, 0x0206
    101a:	30 91 07 02 	lds	r19, 0x0207
    101e:	40 91 08 02 	lds	r20, 0x0208
    1022:	50 91 09 02 	lds	r21, 0x0209
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	eb 81       	ldd	r30, Y+3	; 0x03
    1034:	fc 81       	ldd	r31, Y+4	; 0x04
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03

}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <ICUM_voidExtIntISR>:

void ICUM_voidExtIntISR(void)
{
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	static uint8 ICUM_u8CntrReading = 1;
	
	if (ICUM_u8CntrReading == 1)
    105c:	80 91 68 01 	lds	r24, 0x0168
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	c9 f5       	brne	.+114    	; 0x10d6 <ICUM_voidExtIntISR+0x8a>
	{
		ICUM_u8FirstReading =
    1064:	80 91 1b 02 	lds	r24, 0x021B
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9c 01       	movw	r18, r24
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	c9 01       	movw	r24, r18
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	82 1b       	sub	r24, r18
    1082:	93 0b       	sbc	r25, r19
    1084:	fc 01       	movw	r30, r24
    1086:	e3 59       	subi	r30, 0x93	; 147
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	01 90       	ld	r0, Z+
    108c:	f0 81       	ld	r31, Z
    108e:	e0 2d       	mov	r30, r0
    1090:	09 95       	icall
    1092:	80 93 0a 02 	sts	0x020A, r24
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue();
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(FALLING_EDGE);
    1096:	80 91 1b 02 	lds	r24, 0x021B
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9c 01       	movw	r18, r24
    10a0:	22 0f       	add	r18, r18
    10a2:	33 1f       	adc	r19, r19
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	fc 01       	movw	r30, r24
    10b8:	e1 59       	subi	r30, 0x91	; 145
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	01 90       	ld	r0, Z+
    10be:	f0 81       	ld	r31, Z
    10c0:	e0 2d       	mov	r30, r0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	09 95       	icall
		ovf = 0 ;
    10c6:	10 92 fd 01 	sts	0x01FD, r1
    10ca:	10 92 fc 01 	sts	0x01FC, r1
		ICUM_u8CntrReading  = 2 ;
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 93 68 01 	sts	0x0168, r24
    10d4:	31 c1       	rjmp	.+610    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	}
	else if (ICUM_u8CntrReading == 2)
    10d6:	80 91 68 01 	lds	r24, 0x0168
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <ICUM_voidExtIntISR+0x94>
    10de:	71 c0       	rjmp	.+226    	; 0x11c2 <ICUM_voidExtIntISR+0x176>
	{
		Ton = 
    10e0:	80 91 1b 02 	lds	r24, 0x021B
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9c 01       	movw	r18, r24
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	82 1b       	sub	r24, r18
    10fe:	93 0b       	sbc	r25, r19
    1100:	fc 01       	movw	r30, r24
    1102:	e3 59       	subi	r30, 0x93	; 147
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	01 90       	ld	r0, Z+
    1108:	f0 81       	ld	r31, Z
    110a:	e0 2d       	mov	r30, r0
    110c:	09 95       	icall
    110e:	ac 01       	movw	r20, r24
    1110:	80 91 1b 02 	lds	r24, 0x021B
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9c 01       	movw	r18, r24
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	82 1b       	sub	r24, r18
    112e:	93 0b       	sbc	r25, r19
    1130:	fc 01       	movw	r30, r24
    1132:	ef 58       	subi	r30, 0x8F	; 143
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	20 81       	ld	r18, Z
    1138:	31 81       	ldd	r19, Z+1	; 0x01
    113a:	80 91 fc 01 	lds	r24, 0x01FC
    113e:	90 91 fd 01 	lds	r25, 0x01FD
    1142:	bc 01       	movw	r22, r24
    1144:	26 9f       	mul	r18, r22
    1146:	c0 01       	movw	r24, r0
    1148:	27 9f       	mul	r18, r23
    114a:	90 0d       	add	r25, r0
    114c:	36 9f       	mul	r19, r22
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	9a 01       	movw	r18, r20
    1154:	28 0f       	add	r18, r24
    1156:	39 1f       	adc	r19, r25
    1158:	80 91 0a 02 	lds	r24, 0x020A
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	48 1b       	sub	r20, r24
    1164:	59 0b       	sbc	r21, r25
    1166:	ca 01       	movw	r24, r20
    1168:	cc 01       	movw	r24, r24
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	80 93 fe 01 	sts	0x01FE, r24
    117e:	90 93 ff 01 	sts	0x01FF, r25
    1182:	a0 93 00 02 	sts	0x0200, r26
    1186:	b0 93 01 02 	sts	0x0201, r27
		(float32)((ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue()
		+(ovf*ICUM_apfConfigSet[ICUM_u8ActiveVariant].u16OvfCount))
		- ICUM_u8FirstReading );
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(RISING_EDGE);
    118a:	80 91 1b 02 	lds	r24, 0x021B
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 01       	movw	r18, r24
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	c9 01       	movw	r24, r18
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	82 1b       	sub	r24, r18
    11a8:	93 0b       	sbc	r25, r19
    11aa:	fc 01       	movw	r30, r24
    11ac:	e1 59       	subi	r30, 0x91	; 145
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	09 95       	icall
		
		ICUM_u8CntrReading  = 3 ;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	80 93 68 01 	sts	0x0168, r24
    11c0:	bb c0       	rjmp	.+374    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	}
	else if (ICUM_u8CntrReading == 3)
    11c2:	80 91 68 01 	lds	r24, 0x0168
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	09 f0       	breq	.+2      	; 0x11cc <ICUM_voidExtIntISR+0x180>
    11ca:	b6 c0       	rjmp	.+364    	; 0x1338 <ICUM_voidExtIntISR+0x2ec>
	{
		Ttotal =(float32)(ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue())
    11cc:	80 91 1b 02 	lds	r24, 0x021B
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	e3 59       	subi	r30, 0x93	; 147
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	01 90       	ld	r0, Z+
    11f4:	f0 81       	ld	r31, Z
    11f6:	e0 2d       	mov	r30, r0
    11f8:	09 95       	icall
    11fa:	cc 01       	movw	r24, r24
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1208:	7b 01       	movw	r14, r22
    120a:	8c 01       	movw	r16, r24
    120c:	80 91 1b 02 	lds	r24, 0x021B
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 01       	movw	r18, r24
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	c9 01       	movw	r24, r18
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 1b       	sub	r24, r18
    122a:	93 0b       	sbc	r25, r19
    122c:	fc 01       	movw	r30, r24
    122e:	ef 58       	subi	r30, 0x8F	; 143
    1230:	fe 4f       	sbci	r31, 0xFE	; 254
    1232:	20 81       	ld	r18, Z
    1234:	31 81       	ldd	r19, Z+1	; 0x01
    1236:	80 91 fc 01 	lds	r24, 0x01FC
    123a:	90 91 fd 01 	lds	r25, 0x01FD
    123e:	bc 01       	movw	r22, r24
    1240:	26 9f       	mul	r18, r22
    1242:	c0 01       	movw	r24, r0
    1244:	27 9f       	mul	r18, r23
    1246:	90 0d       	add	r25, r0
    1248:	36 9f       	mul	r19, r22
    124a:	90 0d       	add	r25, r0
    124c:	11 24       	eor	r1, r1
    124e:	cc 01       	movw	r24, r24
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	c8 01       	movw	r24, r16
    1262:	b7 01       	movw	r22, r14
    1264:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	7c 01       	movw	r14, r24
    126e:	8d 01       	movw	r16, r26
    1270:	80 91 0a 02 	lds	r24, 0x020A
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa 27       	eor	r26, r26
    127a:	97 fd       	sbrc	r25, 7
    127c:	a0 95       	com	r26
    127e:	ba 2f       	mov	r27, r26
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c8 01       	movw	r24, r16
    128e:	b7 01       	movw	r22, r14
    1290:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	80 93 06 02 	sts	0x0206, r24
    129c:	90 93 07 02 	sts	0x0207, r25
    12a0:	a0 93 08 02 	sts	0x0208, r26
    12a4:	b0 93 09 02 	sts	0x0209, r27
		+ (ovf*(ICUM_apfConfigSet[ICUM_u8ActiveVariant].u16OvfCount))
		- ICUM_u8FirstReading ;
		Tonu = Ton ;
    12a8:	80 91 fe 01 	lds	r24, 0x01FE
    12ac:	90 91 ff 01 	lds	r25, 0x01FF
    12b0:	a0 91 00 02 	lds	r26, 0x0200
    12b4:	b0 91 01 02 	lds	r27, 0x0201
    12b8:	80 93 02 02 	sts	0x0202, r24
    12bc:	90 93 03 02 	sts	0x0203, r25
    12c0:	a0 93 04 02 	sts	0x0204, r26
    12c4:	b0 93 05 02 	sts	0x0205, r27
		ovf = 0 ;
    12c8:	10 92 fd 01 	sts	0x01FD, r1
    12cc:	10 92 fc 01 	sts	0x01FC, r1
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfChangesense(FALLING_EDGE);
    12d0:	80 91 1b 02 	lds	r24, 0x021B
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	c9 01       	movw	r24, r18
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	82 1b       	sub	r24, r18
    12ee:	93 0b       	sbc	r25, r19
    12f0:	fc 01       	movw	r30, r24
    12f2:	e1 59       	subi	r30, 0x91	; 145
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	09 95       	icall
		ICUM_u8FirstReading =
    1300:	80 91 1b 02 	lds	r24, 0x021B
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 01       	movw	r18, r24
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	c9 01       	movw	r24, r18
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	82 1b       	sub	r24, r18
    131e:	93 0b       	sbc	r25, r19
    1320:	fc 01       	movw	r30, r24
    1322:	e3 59       	subi	r30, 0x93	; 147
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	01 90       	ld	r0, Z+
    1328:	f0 81       	ld	r31, Z
    132a:	e0 2d       	mov	r30, r0
    132c:	09 95       	icall
    132e:	80 93 0a 02 	sts	0x020A, r24
		ICUM_apfConfigSet[ICUM_u8ActiveVariant].pfCntrValue();
		
		ICUM_u8CntrReading =2 ;
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	80 93 68 01 	sts	0x0168, r24
	
	
	
	
	
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <ICUM_voidOvfIsr>:

void ICUM_voidOvfIsr(void)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	static uint8 ovfCnt = 0;
	ovfCnt++;
    134e:	80 91 0b 02 	lds	r24, 0x020B
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 0b 02 	sts	0x020B, r24
	ovf++;
    1358:	80 91 fc 01 	lds	r24, 0x01FC
    135c:	90 91 fd 01 	lds	r25, 0x01FD
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 fd 01 	sts	0x01FD, r25
    1366:	80 93 fc 01 	sts	0x01FC, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <UART_voidInit>:
#include "UART_cfg.h"
#include "UART_priv.h"


void UART_voidInit(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	 	 /*Set URSEL to access UCSRC Reg*/
	 	 SET_BIT(UCSRC,7);
    1378:	a0 e4       	ldi	r26, 0x40	; 64
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e0 e4       	ldi	r30, 0x40	; 64
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8c 93       	st	X, r24

	 	 /*Receive enable config*/
#if UART_RIECEVE_ENABLE == UART_ENABLED
		 SET_BIT(UCSRB,4);
    1386:	aa e2       	ldi	r26, 0x2A	; 42
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ea e2       	ldi	r30, 0x2A	; 42
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 61       	ori	r24, 0x10	; 16
    1392:	8c 93       	st	X, r24
#endif


		 /*Send enable config*/
#if UART_SEND_ENABLE == UART_ENABLED
		 SET_BIT(UCSRB,3);
    1394:	aa e2       	ldi	r26, 0x2A	; 42
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e2       	ldi	r30, 0x2A	; 42
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,3);
#endif

		 /*Receive interrupt enable config*/
#if UART_RX_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,7);
    13a2:	aa e2       	ldi	r26, 0x2A	; 42
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e2       	ldi	r30, 0x2A	; 42
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,7);
#endif

		 /*Send interrupt enable config*/
#if UART_TX_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,6);
    13b0:	aa e2       	ldi	r26, 0x2A	; 42
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e2       	ldi	r30, 0x2A	; 42
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 64       	ori	r24, 0x40	; 64
    13bc:	8c 93       	st	X, r24
#endif

		 /*UDR empty interrupt enable config*/

#if UART_UDR_INTERRUPT_ENABLE == UART_DISABLED
		 SET_BIT(UCSRB,5);
    13be:	aa e2       	ldi	r26, 0x2A	; 42
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ea e2       	ldi	r30, 0x2A	; 42
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 62       	ori	r24, 0x20	; 32
    13ca:	8c 93       	st	X, r24
#elif
		 CLR_BIT(UCSRB,5);
#endif


		 SET_BIT(UCSRB,5);
    13cc:	aa e2       	ldi	r26, 0x2A	; 42
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ea e2       	ldi	r30, 0x2A	; 42
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 62       	ori	r24, 0x20	; 32
    13d8:	8c 93       	st	X, r24

		 /*Mode config (Asynchronous-Synchronous)*/
#if UART_MODE_SELECT == UART_ASYNCHRONOUS
		 SET_BIT(UCSRC,6);
    13da:	a0 e4       	ldi	r26, 0x40	; 64
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e0 e4       	ldi	r30, 0x40	; 64
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	8c 93       	st	X, r24
#elif
		 CLR_BIT(UCSRC,6);
#endif

		 /*Parity Mode config*/
		 UCSRC|=(UART_PARITY_MODE<<4);
    13e8:	a0 e4       	ldi	r26, 0x40	; 64
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e0 e4       	ldi	r30, 0x40	; 64
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8c 93       	st	X, r24
#if UART_CLOCK_POLARITY == UART_SAMPLE_FALLING_EDGE
		 SET_BIT(UCSRC,0);
    13f4:	a0 e4       	ldi	r26, 0x40	; 64
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e4       	ldi	r30, 0x40	; 64
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	8c 93       	st	X, r24
		 CLR_BIT(UCSRC,0);
#endif

		 /*Stop Bits config*/
#if UART_STOP_BIT_NO == UART_1_STOP_BIT
		 SET_BIT(UCSRC,3);
    1402:	a0 e4       	ldi	r26, 0x40	; 64
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e0 e4       	ldi	r30, 0x40	; 64
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 60       	ori	r24, 0x08	; 8
    140e:	8c 93       	st	X, r24
#elif UART_CHAR_SIZE == UART_7_BITS
		 CLR_BIT(UCSRC,1);
		 SET_BIT(UCSRC,2);
		 CLR_BIT(UCSRB,2);
#elif UART_CHAR_SIZE == UART_8_BITS
		 SET_BIT(UCSRC,1);
    1410:	a0 e4       	ldi	r26, 0x40	; 64
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e0 e4       	ldi	r30, 0x40	; 64
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	82 60       	ori	r24, 0x02	; 2
    141c:	8c 93       	st	X, r24
		 SET_BIT(UCSRC,2);
    141e:	a0 e4       	ldi	r26, 0x40	; 64
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e0 e4       	ldi	r30, 0x40	; 64
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	84 60       	ori	r24, 0x04	; 4
    142a:	8c 93       	st	X, r24
		 CLR_BIT(UCSRB,2);
    142c:	aa e2       	ldi	r26, 0x2A	; 42
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ea e2       	ldi	r30, 0x2A	; 42
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8b 7f       	andi	r24, 0xFB	; 251
    1438:	8c 93       	st	X, r24
		 SET_BIT(UCSRB,2);
#endif


		 /*Baud Rate Value Config*/
		 UBRRH = 0;
    143a:	e0 e4       	ldi	r30, 0x40	; 64
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	10 82       	st	Z, r1
		 UBRRL = UART_BAUD_RATE;
    1440:	e9 e2       	ldi	r30, 0x29	; 41
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	83 e3       	ldi	r24, 0x33	; 51
    1446:	80 83       	st	Z, r24

}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <UART_voidSendByte>:

void UART_voidSendByte(uint8 Copy_u8Byte)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
	/*wait while previous sending is complete*/
	while((GET_BIT(UCSRA,5))==0 );
    145a:	eb e2       	ldi	r30, 0x2B	; 43
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 95       	swap	r24
    1462:	86 95       	lsr	r24
    1464:	87 70       	andi	r24, 0x07	; 7
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	90 70       	andi	r25, 0x00	; 0
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	a1 f3       	breq	.-24     	; 0x145a <UART_voidSendByte+0xc>
	/*send byte*/
	UDR = Copy_u8Byte;
    1472:	ec e2       	ldi	r30, 0x2C	; 44
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	80 83       	st	Z, r24
}
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <UART_voidRecieveByte>:

uint8 UART_voidRecieveByte(uint16 Copy_u16Timeout)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <UART_voidRecieveByte+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
	/*wait for incoming byte for Timeout period*/
	do
	{
		/*if a byte received return received byte*/
		if ( (GET_BIT(UCSRA,7)) == 1)
    1492:	eb e2       	ldi	r30, 0x2B	; 43
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 1f       	adc	r24, r24
    149a:	88 27       	eor	r24, r24
    149c:	88 1f       	adc	r24, r24
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	29 f4       	brne	.+10     	; 0x14ac <UART_voidRecieveByte+0x2a>
		{
			return UDR;
    14a2:	ec e2       	ldi	r30, 0x2C	; 44
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8b 83       	std	Y+3, r24	; 0x03
    14aa:	0a c0       	rjmp	.+20     	; 0x14c0 <UART_voidRecieveByte+0x3e>

		}

	}while(--Copy_u16Timeout);
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	51 f7       	brne	.-44     	; 0x1492 <UART_voidRecieveByte+0x10>

	 /*if no data received return 0*/
	return 0;
    14be:	1b 82       	std	Y+3, r1	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <TIM2_voidInit>:

pf TIM2_pfCtcCallback ;
pf TIM2_pfOvfCallback ;

void TIM2_voidInit(void)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	#if   TIM2_MODE == TIM2_NORMAL_MODE 
		CLR_BIT(TCCR2 , 6);
    14d6:	a5 e4       	ldi	r26, 0x45	; 69
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e4       	ldi	r30, 0x45	; 69
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7b       	andi	r24, 0xBF	; 191
    14e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR2 , 3);
    14e4:	a5 e4       	ldi	r26, 0x45	; 69
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e4       	ldi	r30, 0x45	; 69
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , 6);
		SET_BIT(TCCR2 , 3);
   #endif
   
   
	TCCR2 &= (0xF8);/* clear reg 0b1111 1000 */
    14f2:	a5 e4       	ldi	r26, 0x45	; 69
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e4       	ldi	r30, 0x45	; 69
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	8c 93       	st	X, r24
	TCCR2 |=((0x03) & TIM2_PRESCALLER) ; /* write in reg */
    1500:	a5 e4       	ldi	r26, 0x45	; 69
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e4       	ldi	r30, 0x45	; 69
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	8c 93       	st	X, r24
  
	TCNT2 = 0;
    150e:	e4 e4       	ldi	r30, 0x44	; 68
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	10 82       	st	Z, r1
	OCR2  = 0;
    1514:	e3 e4       	ldi	r30, 0x43	; 67
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1
	/* Disable Interrupt  OVF CM */
	CLR_BIT(TIMSK , 6) ;
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 7b       	andi	r24, 0xBF	; 191
    1526:	8c 93       	st	X, r24
	CLR_BIT(TIMSK , 7) ;
    1528:	a9 e5       	ldi	r26, 0x59	; 89
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e9 e5       	ldi	r30, 0x59	; 89
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 77       	andi	r24, 0x7F	; 127
    1534:	8c 93       	st	X, r24
	/* Clear IF flags OVF CM */
	SET_BIT(TIFR  , 6) ;
    1536:	a8 e5       	ldi	r26, 0x58	; 88
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e8 e5       	ldi	r30, 0x58	; 88
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	8c 93       	st	X, r24
	SET_BIT(TIFR  , 7) ;
    1544:	a8 e5       	ldi	r26, 0x58	; 88
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e5       	ldi	r30, 0x58	; 88
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <TIM2_voidSetPreloadValue>:
void TIM2_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = u8PreloadValueCpy;
    1564:	e4 e4       	ldi	r30, 0x44	; 68
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	80 83       	st	Z, r24
}
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <TIM2_voidSetOutputCompareValue>:
void TIM2_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8LoadValueCpy;
    1580:	e3 e4       	ldi	r30, 0x43	; 67
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	80 83       	st	Z, r24
}
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <TIM2_voidEnableOVFIntterrupt>:
void TIM2_voidEnableOVFIntterrupt(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 6) ;
    1598:	a9 e5       	ldi	r26, 0x59	; 89
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e9 e5       	ldi	r30, 0x59	; 89
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	8c 93       	st	X, r24
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <TIM2_voidDisableOVFIntterrupt>:
void TIM2_voidDisableOVFIntterrupt(void)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 6) ;
    15b4:	a9 e5       	ldi	r26, 0x59	; 89
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e9 e5       	ldi	r30, 0x59	; 89
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 7b       	andi	r24, 0xBF	; 191
    15c0:	8c 93       	st	X, r24
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <TIM2_voidEnableCTCIntterrupt>:
void TIM2_voidEnableCTCIntterrupt(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 7) ;
    15d0:	a9 e5       	ldi	r26, 0x59	; 89
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e9 e5       	ldi	r30, 0x59	; 89
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	8c 93       	st	X, r24
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <TIM2_voidDisableCTCIntterrupt>:
void TIM2_voidDisableCTCIntterrupt(void)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 7) ;
    15ec:	a9 e5       	ldi	r26, 0x59	; 89
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e9 e5       	ldi	r30, 0x59	; 89
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	8c 93       	st	X, r24
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <TIM2_voidSetOvfCallback>:
void TIM2_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <TIM2_voidSetOvfCallback+0x6>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
	pfOvfCallbackCpy = TIM2_pfOvfCallback;
    160e:	80 91 1c 02 	lds	r24, 0x021C
    1612:	90 91 1d 02 	lds	r25, 0x021D
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <TIM2_voidSetCtcCallback>:
void TIM2_voidSetCtcCallback(pf pfCtcCallbackCpy)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <TIM2_voidSetCtcCallback+0x6>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
	pfCtcCallbackCpy = TIM2_pfCtcCallback;
    1632:	80 91 1e 02 	lds	r24, 0x021E
    1636:	90 91 1f 02 	lds	r25, 0x021F
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <TIM2_u16GetCntrValue>:

uint16 TIM2_u16GetCntrValue(void)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT2;
    1650:	e4 e4       	ldi	r30, 0x44	; 68
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <__vector_5>:

/*OVF ISR*/
void __vector_5 (void) __attribute__((signal ,used));
void __vector_5 (void)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfOvfCallback();
    168a:	e0 91 1c 02 	lds	r30, 0x021C
    168e:	f0 91 1d 02 	lds	r31, 0x021D
    1692:	09 95       	icall
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_4>:
/*CM ISR*/
void __vector_4 (void) __attribute__((signal ,used));
void __vector_4 (void)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
   TIM2_pfCtcCallback();
    16e4:	e0 91 1e 02 	lds	r30, 0x021E
    16e8:	f0 91 1f 02 	lds	r31, 0x021F
    16ec:	09 95       	icall
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti

00001714 <TIM2_voidDelayMs>:

void TIM2_voidDelayMs(uint16 u16DalayTimeCpy)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <TIM2_voidDelayMs+0x6>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
	
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <TIM0_voidInit>:
pf TIM0_pfCtcCallback ;
pf TIM0_pfOvfCallback ;
uint8 delay =0;
uint32 msec =0;
void TIM0_voidInit(void)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	#if   TIM0_MODE == TIM0_NORMAL_MODE 
		CLR_BIT(TCCR0 , 6);
		CLR_BIT(TCCR0 , 3);
	#elif TIM0_MODE == TIM0_PWM_PHASE_CORRECT_MODE
		SET_BIT(TCCR0 , 6);
    1734:	a3 e5       	ldi	r26, 0x53	; 83
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e3 e5       	ldi	r30, 0x53	; 83
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 64       	ori	r24, 0x40	; 64
    1740:	8c 93       	st	X, r24
		CLR_BIT(TCCR0 , 3);
    1742:	a3 e5       	ldi	r26, 0x53	; 83
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e3 e5       	ldi	r30, 0x53	; 83
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	87 7f       	andi	r24, 0xF7	; 247
    174e:	8c 93       	st	X, r24
   #else
		SET_BIT(TCCR0 , 6);
		SET_BIT(TCCR0 , 3);
   #endif
  
  TCCR0 &= (0xF8);/* clear reg 0b1111 1000 */
    1750:	a3 e5       	ldi	r26, 0x53	; 83
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e3 e5       	ldi	r30, 0x53	; 83
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 7f       	andi	r24, 0xF8	; 248
    175c:	8c 93       	st	X, r24
  TCCR0 |=((0x03)& TIM0_PRESCALLER) ; /* write in reg */
    175e:	a3 e5       	ldi	r26, 0x53	; 83
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e3 e5       	ldi	r30, 0x53	; 83
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	81 60       	ori	r24, 0x01	; 1
    176a:	8c 93       	st	X, r24

 TCNT0 = 0;
    176c:	e2 e5       	ldi	r30, 0x52	; 82
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	10 82       	st	Z, r1
 OCR0  = 0;
    1772:	ec e5       	ldi	r30, 0x5C	; 92
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
 /* Disable Interrupt  OVF CM */
 CLR_BIT(TIMSK , 0) ;
    1778:	a9 e5       	ldi	r26, 0x59	; 89
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e9 e5       	ldi	r30, 0x59	; 89
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	8c 93       	st	X, r24
 CLR_BIT(TIMSK , 1) ;
    1786:	a9 e5       	ldi	r26, 0x59	; 89
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 e5       	ldi	r30, 0x59	; 89
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8d 7f       	andi	r24, 0xFD	; 253
    1792:	8c 93       	st	X, r24
 /* Clear IF flags OVF CM */
 SET_BIT(TIFR  , 0) ;
    1794:	a8 e5       	ldi	r26, 0x58	; 88
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e5       	ldi	r30, 0x58	; 88
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8c 93       	st	X, r24
 SET_BIT(TIFR  , 1) ;
    17a2:	a8 e5       	ldi	r26, 0x58	; 88
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e5       	ldi	r30, 0x58	; 88
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	8c 93       	st	X, r24

}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <TIM0_voidSetPreloadValue>:
void TIM0_voidSetPreloadValue (uint8 u8PreloadValueCpy)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8PreloadValueCpy;
    17c2:	e2 e5       	ldi	r30, 0x52	; 82
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	80 83       	st	Z, r24
}
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <TIM0_voidSetOutputCompareValue>:
void TIM0_voidSetOutputCompareValue (uint8 u8LoadValueCpy)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8LoadValueCpy; 
    17de:	ec e5       	ldi	r30, 0x5C	; 92
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	80 83       	st	Z, r24
}
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <TIM0_voidEnableOVFIntterrupt>:
void TIM0_voidEnableOVFIntterrupt(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 0) ;
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <TIM0_voidDisableOVFIntterrupt>:
void TIM0_voidDisableOVFIntterrupt(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 0) ;
    1812:	a9 e5       	ldi	r26, 0x59	; 89
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e9 e5       	ldi	r30, 0x59	; 89
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	8c 93       	st	X, r24
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TIM0_voidEnableCTCIntterrupt>:
void TIM0_voidEnableCTCIntterrupt(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK , 1) ;
    182e:	a9 e5       	ldi	r26, 0x59	; 89
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e9 e5       	ldi	r30, 0x59	; 89
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	82 60       	ori	r24, 0x02	; 2
    183a:	8c 93       	st	X, r24
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <TIM0_voidDisableCTCIntterrupt>:
void TIM0_voidDisableCTCIntterrupt(void)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TIMSK , 1) ;
    184a:	a9 e5       	ldi	r26, 0x59	; 89
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e9 e5       	ldi	r30, 0x59	; 89
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8d 7f       	andi	r24, 0xFD	; 253
    1856:	8c 93       	st	X, r24
}
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <TIM0_voidSetOvfCallback>:
void TIM0_voidSetOvfCallback(pf pfOvfCallbackCpy)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <TIM0_voidSetOvfCallback+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOvfCallback = pfOvfCallbackCpy ;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	90 93 23 02 	sts	0x0223, r25
    1874:	80 93 22 02 	sts	0x0222, r24
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <TIM0_voidSetCtcCallback>:
void TIM0_voidSetCtcCallback(pf pfCtcCallbackCpy)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <TIM0_voidSetCtcCallback+0x6>
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCtcCallback = pfCtcCallbackCpy;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	90 93 21 02 	sts	0x0221, r25
    1898:	80 93 20 02 	sts	0x0220, r24
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <__vector_11>:
/*OVF ISR*/
void __vector_11 (void) __attribute__((signal ,used));
void __vector_11 (void)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter = 0;
	counter++;
    18d0:	80 91 11 02 	lds	r24, 0x0211
    18d4:	90 91 12 02 	lds	r25, 0x0212
    18d8:	a0 91 13 02 	lds	r26, 0x0213
    18dc:	b0 91 14 02 	lds	r27, 0x0214
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	a1 1d       	adc	r26, r1
    18e4:	b1 1d       	adc	r27, r1
    18e6:	80 93 11 02 	sts	0x0211, r24
    18ea:	90 93 12 02 	sts	0x0212, r25
    18ee:	a0 93 13 02 	sts	0x0213, r26
    18f2:	b0 93 14 02 	sts	0x0214, r27

	TIM0_pfOvfCallback();
    18f6:	e0 91 22 02 	lds	r30, 0x0222
    18fa:	f0 91 23 02 	lds	r31, 0x0223
    18fe:	09 95       	icall
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <__vector_10>:
/*CM ISR*/
void __vector_10 (void) __attribute__((signal ,used));
void __vector_10 (void)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	static uint32 counter = 0;
	counter++;
    1950:	80 91 15 02 	lds	r24, 0x0215
    1954:	90 91 16 02 	lds	r25, 0x0216
    1958:	a0 91 17 02 	lds	r26, 0x0217
    195c:	b0 91 18 02 	lds	r27, 0x0218
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	a1 1d       	adc	r26, r1
    1964:	b1 1d       	adc	r27, r1
    1966:	80 93 15 02 	sts	0x0215, r24
    196a:	90 93 16 02 	sts	0x0216, r25
    196e:	a0 93 17 02 	sts	0x0217, r26
    1972:	b0 93 18 02 	sts	0x0218, r27

	if( counter == msec && delay == 1){
    1976:	20 91 15 02 	lds	r18, 0x0215
    197a:	30 91 16 02 	lds	r19, 0x0216
    197e:	40 91 17 02 	lds	r20, 0x0217
    1982:	50 91 18 02 	lds	r21, 0x0218
    1986:	80 91 0d 02 	lds	r24, 0x020D
    198a:	90 91 0e 02 	lds	r25, 0x020E
    198e:	a0 91 0f 02 	lds	r26, 0x020F
    1992:	b0 91 10 02 	lds	r27, 0x0210
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	4a 07       	cpc	r20, r26
    199c:	5b 07       	cpc	r21, r27
    199e:	91 f4       	brne	.+36     	; 0x19c4 <__vector_10+0x9e>
    19a0:	80 91 0c 02 	lds	r24, 0x020C
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	71 f4       	brne	.+28     	; 0x19c4 <__vector_10+0x9e>
			counter=0;
    19a8:	10 92 15 02 	sts	0x0215, r1
    19ac:	10 92 16 02 	sts	0x0216, r1
    19b0:	10 92 17 02 	sts	0x0217, r1
    19b4:	10 92 18 02 	sts	0x0218, r1
			TIM0_pfCtcCallback();
    19b8:	e0 91 20 02 	lds	r30, 0x0220
    19bc:	f0 91 21 02 	lds	r31, 0x0221
    19c0:	09 95       	icall
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <__vector_10+0xb0>

	}
	else if(delay == 0)
    19c4:	80 91 0c 02 	lds	r24, 0x020C
    19c8:	88 23       	and	r24, r24
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <__vector_10+0xb0>
	{
		TIM0_pfCtcCallback();
    19cc:	e0 91 20 02 	lds	r30, 0x0220
    19d0:	f0 91 21 02 	lds	r31, 0x0221
    19d4:	09 95       	icall
	}

}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <TIM0_voidDelayMs>:
void TIM0_voidDelayMs(uint16 u16DalayTimeCpy)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <TIM0_voidDelayMs+0x6>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	TIM0_voidSetOutputCompareValue(250);
    1a0a:	8a ef       	ldi	r24, 0xFA	; 250
    1a0c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <TIM0_voidSetOutputCompareValue>
	delay =1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 0c 02 	sts	0x020C, r24
	msec = 4 *u16DalayTimeCpy;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	cc 01       	movw	r24, r24
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	80 93 0d 02 	sts	0x020D, r24
    1a2c:	90 93 0e 02 	sts	0x020E, r25
    1a30:	a0 93 0f 02 	sts	0x020F, r26
    1a34:	b0 93 10 02 	sts	0x0210, r27

}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <TIM0_u16GetCntrValue>:

uint16 TIM0_u16GetCntrValue(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	return (uint16)TCNT0;
    1a4a:	e2 e5       	ldi	r30, 0x52	; 82
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <TIM0_voidFPWMInit>:

void TIM0_voidFPWMInit(void){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif TIM0_PWM_MODE == TIM0_PHC_PWM_CLR_UPCNT

#define TIM0_MODE    TIM0_PWM_PHASE_CORRECT_MODE
	TIM0_voidInit();
    1a62:	0e 94 96 0b 	call	0x172c	; 0x172c <TIM0_voidInit>

	CLR_BIT(TCCR0,4);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 7e       	andi	r24, 0xEF	; 239
    1a72:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 62       	ori	r24, 0x20	; 32
    1a80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#endif


}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <SPI_voidInit>:


uint8 SPI_u8RxBuffer ; 
uint8 SPI_u8TxState  ;
void SPI_voidInit(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	/*Enable SPI */
#if  SPI_MODE == SPI_MASTER_MODE
	SPCR = (1<<6)|(1<<4)|(1<<0);
    1a90:	ed e2       	ldi	r30, 0x2D	; 45
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	81 e5       	ldi	r24, 0x51	; 81
    1a96:	80 83       	st	Z, r24
#else
	SPCR = (1<<6);

#endif

}
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <SPI_u8DataTransfer_Sync>:


void SPI_u8DataTransfer_Sync(uint8 u8DataCpy)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	SPDR  =  u8DataCpy ;
    1aaa:	ef e2       	ldi	r30, 0x2F	; 47
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	80 83       	st	Z, r24

	while(!(SPSR & (1<<7)));
    1ab2:	ee e2       	ldi	r30, 0x2E	; 46
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	dc f7       	brge	.-10     	; 0x1ab2 <SPI_u8DataTransfer_Sync+0x14>

}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <SPI_voidDataTransfer_Async>:

void SPI_voidDataTransfer_Async(uint8 u8DataCpy)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
	SPDR =  u8DataCpy ;
    1ad0:	ef e2       	ldi	r30, 0x2F	; 47
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	80 83       	st	Z, r24
	SPI_u8TxState = 2;
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	80 93 25 02 	sts	0x0225, r24
}
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <SPI_enuWriteStatus_Async>:

tenuWriteState SPI_enuWriteStatus_Async(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	tenuWriteState enuReturnStateLoc ;
	if (SPI_u8TxState == 1)
    1af0:	80 91 25 02 	lds	r24, 0x0225
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	21 f4       	brne	.+8      	; 0x1b00 <SPI_enuWriteStatus_Async+0x1a>
	{
		enuReturnStateLoc = WRITE_DONE ;
    1af8:	19 82       	std	Y+1, r1	; 0x01
		SPI_u8TxState = 0 ;
    1afa:	10 92 25 02 	sts	0x0225, r1
    1afe:	12 c0       	rjmp	.+36     	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else if (SPI_u8TxState == 2 )
    1b00:	80 91 25 02 	lds	r24, 0x0225
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <SPI_enuWriteStatus_Async+0x28>
	{
		enuReturnStateLoc = WRITE_PENDING ;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	0b c0       	rjmp	.+22     	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else if (SPI_u8TxState == 3 )
    1b0e:	80 91 25 02 	lds	r24, 0x0225
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	29 f4       	brne	.+10     	; 0x1b20 <SPI_enuWriteStatus_Async+0x3a>
	{
		enuReturnStateLoc = WRITE_NOT_DONE ;
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	89 83       	std	Y+1, r24	; 0x01
		SPI_u8TxState = 0 ;
    1b1a:	10 92 25 02 	sts	0x0225, r1
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <SPI_enuWriteStatus_Async+0x3e>
	}
	else
	{
		enuReturnStateLoc = IDLE ;
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <SPI_u8DataRecieve_Async>:

uint8 SPI_u8DataRecieve_Async(void)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	return SPI_u8RxBuffer ;
    1b36:	80 91 24 02 	lds	r24, 0x0224
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <SPI_u8DataRecieve_Sync>:
uint8 SPI_u8DataRecieve_Sync(void)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(SPSR , 7) == 0);
    1b48:	ee e2       	ldi	r30, 0x2E	; 46
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	dc f7       	brge	.-10     	; 0x1b48 <SPI_u8DataRecieve_Sync+0x8>
	/* write collision check*/
	return SPDR ;
    1b52:	ef e2       	ldi	r30, 0x2F	; 47
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <SPI_voidSetInterruptState>:

void SPI_voidSetInterruptState(uint8 u8IntStateCpy)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
	if (u8IntStateCpy == SPI_INT_ENABLE )
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	41 f4       	brne	.+16     	; 0x1b80 <SPI_voidSetInterruptState+0x22>
	{
		SET_BIT (SPCR , 7 ) ;
    1b70:	ad e2       	ldi	r26, 0x2D	; 45
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ed e2       	ldi	r30, 0x2D	; 45
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 68       	ori	r24, 0x80	; 128
    1b7c:	8c 93       	st	X, r24
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <SPI_voidSetInterruptState+0x30>
	}
	else
	{
		CLR_BIT (SPCR , 7 ) ;
    1b80:	ad e2       	ldi	r26, 0x2D	; 45
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ed e2       	ldi	r30, 0x2D	; 45
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 77       	andi	r24, 0x7F	; 127
    1b8c:	8c 93       	st	X, r24
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <__vector_12>:

void __vector_12 (void) __attribute__ ((signal , used)) ;
void __vector_12 (void)
{   
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if ( GET_BIT(SPSR , 6))
    1bb0:	ee e2       	ldi	r30, 0x2E	; 46
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 95       	swap	r24
    1bb8:	86 95       	lsr	r24
    1bba:	86 95       	lsr	r24
    1bbc:	83 70       	andi	r24, 0x03	; 3
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	88 23       	and	r24, r24
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <__vector_12+0x3c>
	{
		SPI_u8TxState  = 3 ;
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	80 93 25 02 	sts	0x0225, r24
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <__vector_12+0x42>
	}
	else 
	{
		SPI_u8TxState  = 1 ;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 25 02 	sts	0x0225, r24
	}
	SPI_u8RxBuffer = SPDR ;
    1bd8:	ef e2       	ldi	r30, 0x2F	; 47
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 93 24 02 	sts	0x0224, r24
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <GIE_voidEnable>:
#include "GIE.h"
#include "GIE_cfg.h"
#include "GIE_priv.h"

void GIE_voidEnable(void)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1c00:	af e5       	ldi	r26, 0x5F	; 95
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ef e5       	ldi	r30, 0x5F	; 95
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 68       	ori	r24, 0x80	; 128
    1c0c:	8c 93       	st	X, r24
}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1c1c:	af e5       	ldi	r26, 0x5F	; 95
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ef e5       	ldi	r30, 0x5F	; 95
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	8c 93       	st	X, r24
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <EXTINT2_voidInit>:


pf EXTINT2_pfCallback ;

void EXTINT2_voidInit(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62

#if EXTINT2_SENSE_MODE == Falling_Edge
	CLR_BIT(MCUCSR , 6) ;

#else
	SET_BIT(MCUCSR , 6) ;
    1c38:	a4 e5       	ldi	r26, 0x54	; 84
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e4 e5       	ldi	r30, 0x54	; 84
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 64       	ori	r24, 0x40	; 64
    1c44:	8c 93       	st	X, r24
#endif

	CLR_BIT(GICR,5); // Disable External interrupt 0
    1c46:	ab e5       	ldi	r26, 0x5B	; 91
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	eb e5       	ldi	r30, 0x5B	; 91
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8f 7d       	andi	r24, 0xDF	; 223
    1c52:	8c 93       	st	X, r24
	SET_BIT(GIFR,5); //Clear External interrupt 0 Flag
    1c54:	aa e5       	ldi	r26, 0x5A	; 90
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ea e5       	ldi	r30, 0x5A	; 90
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 62       	ori	r24, 0x20	; 32
    1c60:	8c 93       	st	X, r24

}
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <EXTINT2_voidEnable>:

void EXTINT2_voidEnable(void)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,5);
    1c70:	ab e5       	ldi	r26, 0x5B	; 91
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	eb e5       	ldi	r30, 0x5B	; 91
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 62       	ori	r24, 0x20	; 32
    1c7c:	8c 93       	st	X, r24
}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <EXTINT2_voidDisable>:

void EXTINT2_voidDisable(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    1c8c:	ab e5       	ldi	r26, 0x5B	; 91
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	eb e5       	ldi	r30, 0x5B	; 91
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8f 7d       	andi	r24, 0xDF	; 223
    1c98:	8c 93       	st	X, r24
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <EXTINT2_voidSetCallBack>:

void EXTINT2_voidSetCallBack(pf pfCallbackCpy)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <EXTINT2_voidSetCallBack+0x6>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
	EXTINT2_pfCallback = pfCallbackCpy ;
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	90 93 27 02 	sts	0x0227, r25
    1cb6:	80 93 26 02 	sts	0x0226, r24
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	2f 93       	push	r18
    1cd0:	3f 93       	push	r19
    1cd2:	4f 93       	push	r20
    1cd4:	5f 93       	push	r21
    1cd6:	6f 93       	push	r22
    1cd8:	7f 93       	push	r23
    1cda:	8f 93       	push	r24
    1cdc:	9f 93       	push	r25
    1cde:	af 93       	push	r26
    1ce0:	bf 93       	push	r27
    1ce2:	ef 93       	push	r30
    1ce4:	ff 93       	push	r31
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
	EXTINT2_pfCallback();
    1cee:	e0 91 26 02 	lds	r30, 0x0226
    1cf2:	f0 91 27 02 	lds	r31, 0x0227
    1cf6:	09 95       	icall
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <EXTINT1_voidInit>:


pf EXTINT1_pfCallback ;

void EXTINT1_voidInit(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62

#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 2) ;
    1d26:	a5 e5       	ldi	r26, 0x55	; 85
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e5 e5       	ldi	r30, 0x55	; 85
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8b 7f       	andi	r24, 0xFB	; 251
    1d32:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 3) ;
    1d34:	a5 e5       	ldi	r26, 0x55	; 85
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e5 e5       	ldi	r30, 0x55	; 85
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 7f       	andi	r24, 0xF7	; 247
    1d40:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 2) ;
	SET_BIT(MCUCR , 3) ;
#endif

	CLR_BIT(GICR,7); // Disable External interrupt 0
    1d42:	ab e5       	ldi	r26, 0x5B	; 91
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	eb e5       	ldi	r30, 0x5B	; 91
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 77       	andi	r24, 0x7F	; 127
    1d4e:	8c 93       	st	X, r24
	SET_BIT(GIFR,7); //Clear External interrupt 0 Flag
    1d50:	aa e5       	ldi	r26, 0x5A	; 90
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ea e5       	ldi	r30, 0x5A	; 90
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 68       	ori	r24, 0x80	; 128
    1d5c:	8c 93       	st	X, r24

}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <EXTINT1_voidEnable>:

void EXTINT1_voidEnable(void)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);
    1d6c:	ab e5       	ldi	r26, 0x5B	; 91
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	eb e5       	ldi	r30, 0x5B	; 91
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 68       	ori	r24, 0x80	; 128
    1d78:	8c 93       	st	X, r24
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <EXTINT1_voidDisable>:

void EXTINT1_voidDisable(void)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    1d88:	ab e5       	ldi	r26, 0x5B	; 91
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	eb e5       	ldi	r30, 0x5B	; 91
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 77       	andi	r24, 0x7F	; 127
    1d94:	8c 93       	st	X, r24
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <EXTINT1_voidSetCallBack>:

void EXTINT1_voidSetCallBack(pf pfCallbackCpy)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <EXTINT1_voidSetCallBack+0x6>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	EXTINT1_pfCallback = pfCallbackCpy ;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	90 93 29 02 	sts	0x0229, r25
    1db2:	80 93 28 02 	sts	0x0228, r24
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <EXTINT1_voidSetSenseValue>:

void EXTINT1_voidSetSenseValue(uint8 u8SenseValueCpy)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <EXTINT1_voidSetSenseValue+0x6>
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseValueCpy)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3b 83       	std	Y+3, r19	; 0x03
    1dd6:	2a 83       	std	Y+2, r18	; 0x02
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	8a 30       	cpi	r24, 0x0A	; 10
    1dde:	91 05       	cpc	r25, r1
    1de0:	31 f0       	breq	.+12     	; 0x1dee <EXTINT1_voidSetSenseValue+0x2e>
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	2f 30       	cpi	r18, 0x0F	; 15
    1de8:	31 05       	cpc	r19, r1
    1dea:	81 f0       	breq	.+32     	; 0x1e0c <EXTINT1_voidSetSenseValue+0x4c>
    1dec:	1d c0       	rjmp	.+58     	; 0x1e28 <EXTINT1_voidSetSenseValue+0x68>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,2) ;
    1dee:	a5 e5       	ldi	r26, 0x55	; 85
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e5       	ldi	r30, 0x55	; 85
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8b 7f       	andi	r24, 0xFB	; 251
    1dfa:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3) ;
    1dfc:	a5 e5       	ldi	r26, 0x55	; 85
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e5       	ldi	r30, 0x55	; 85
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	88 60       	ori	r24, 0x08	; 8
    1e08:	8c 93       	st	X, r24
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <EXTINT1_voidSetSenseValue+0x68>
		break;
		case RISING_EDGE:
			SET_BIT(MCUCR,2) ;
    1e0c:	a5 e5       	ldi	r26, 0x55	; 85
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e5 e5       	ldi	r30, 0x55	; 85
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	84 60       	ori	r24, 0x04	; 4
    1e18:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3) ;
    1e1a:	a5 e5       	ldi	r26, 0x55	; 85
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e5 e5       	ldi	r30, 0x55	; 85
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 60       	ori	r24, 0x08	; 8
    1e26:	8c 93       	st	X, r24
		break;

	}
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	EXTINT1_pfCallback();
    1e5e:	e0 91 28 02 	lds	r30, 0x0228
    1e62:	f0 91 29 02 	lds	r31, 0x0229
    1e66:	09 95       	icall
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <EXTINT0_voidInit>:


pf EXTINT0_pfCallback ;

void EXTINT0_voidInit(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62

#if EXTINT0_SENSE_MODE == LOW_LEVEL
	CLR_BIT(MCUCR , 0) ;
    1e96:	a5 e5       	ldi	r26, 0x55	; 85
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e5 e5       	ldi	r30, 0x55	; 85
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8e 7f       	andi	r24, 0xFE	; 254
    1ea2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , 1) ;
    1ea4:	a5 e5       	ldi	r26, 0x55	; 85
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e5 e5       	ldi	r30, 0x55	; 85
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8d 7f       	andi	r24, 0xFD	; 253
    1eb0:	8c 93       	st	X, r24
#else
	SET_BIT(MCUCR , 0) ;
	SET_BIT(MCUCR , 1) ;
#endif 

	CLR_BIT(GICR,6); // Disable External interrupt 0
    1eb2:	ab e5       	ldi	r26, 0x5B	; 91
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	eb e5       	ldi	r30, 0x5B	; 91
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7b       	andi	r24, 0xBF	; 191
    1ebe:	8c 93       	st	X, r24
	SET_BIT(GIFR,6); //Clear External interrupt 0 Flag 
    1ec0:	aa e5       	ldi	r26, 0x5A	; 90
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ea e5       	ldi	r30, 0x5A	; 90
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 64       	ori	r24, 0x40	; 64
    1ecc:	8c 93       	st	X, r24

}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <EXTINT0_voidEnable>:

void EXTINT0_voidEnable(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    1edc:	ab e5       	ldi	r26, 0x5B	; 91
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	eb e5       	ldi	r30, 0x5B	; 91
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 64       	ori	r24, 0x40	; 64
    1ee8:	8c 93       	st	X, r24
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <EXTINT0_voidDisable>:

void EXTINT0_voidDisable(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    1ef8:	ab e5       	ldi	r26, 0x5B	; 91
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	eb e5       	ldi	r30, 0x5B	; 91
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 7b       	andi	r24, 0xBF	; 191
    1f04:	8c 93       	st	X, r24
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallbackCpy)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <EXTINT0_voidSetCallBack+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCallback = pfCallbackCpy ;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	90 93 2b 02 	sts	0x022B, r25
    1f22:	80 93 2a 02 	sts	0x022A, r24
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <EXTINT0_voidSetSenseValue>:

void EXTINT0_voidSetSenseValue(uint8 u8SenseValueCpy)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <EXTINT0_voidSetSenseValue+0x6>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseValueCpy)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3b 83       	std	Y+3, r19	; 0x03
    1f46:	2a 83       	std	Y+2, r18	; 0x02
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	8a 30       	cpi	r24, 0x0A	; 10
    1f4e:	91 05       	cpc	r25, r1
    1f50:	31 f0       	breq	.+12     	; 0x1f5e <EXTINT0_voidSetSenseValue+0x2e>
    1f52:	2a 81       	ldd	r18, Y+2	; 0x02
    1f54:	3b 81       	ldd	r19, Y+3	; 0x03
    1f56:	2f 30       	cpi	r18, 0x0F	; 15
    1f58:	31 05       	cpc	r19, r1
    1f5a:	81 f0       	breq	.+32     	; 0x1f7c <EXTINT0_voidSetSenseValue+0x4c>
    1f5c:	1d c0       	rjmp	.+58     	; 0x1f98 <EXTINT0_voidSetSenseValue+0x68>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,0) ;
    1f5e:	a5 e5       	ldi	r26, 0x55	; 85
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 e5       	ldi	r30, 0x55	; 85
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8e 7f       	andi	r24, 0xFE	; 254
    1f6a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1) ;
    1f6c:	a5 e5       	ldi	r26, 0x55	; 85
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e5 e5       	ldi	r30, 0x55	; 85
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	82 60       	ori	r24, 0x02	; 2
    1f78:	8c 93       	st	X, r24
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <EXTINT0_voidSetSenseValue+0x68>
		break;
		case RISING_EDGE:
			SET_BIT(MCUCR,0) ;
    1f7c:	a5 e5       	ldi	r26, 0x55	; 85
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e5 e5       	ldi	r30, 0x55	; 85
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	81 60       	ori	r24, 0x01	; 1
    1f88:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1) ;
    1f8a:	a5 e5       	ldi	r26, 0x55	; 85
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e5 e5       	ldi	r30, 0x55	; 85
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	82 60       	ori	r24, 0x02	; 2
    1f96:	8c 93       	st	X, r24
		break;

	}
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	2f 93       	push	r18
    1fb0:	3f 93       	push	r19
    1fb2:	4f 93       	push	r20
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCallback();
    1fce:	e0 91 2a 02 	lds	r30, 0x022A
    1fd2:	f0 91 2b 02 	lds	r31, 0x022B
    1fd6:	09 95       	icall
}
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	ff 91       	pop	r31
    1fde:	ef 91       	pop	r30
    1fe0:	bf 91       	pop	r27
    1fe2:	af 91       	pop	r26
    1fe4:	9f 91       	pop	r25
    1fe6:	8f 91       	pop	r24
    1fe8:	7f 91       	pop	r23
    1fea:	6f 91       	pop	r22
    1fec:	5f 91       	pop	r21
    1fee:	4f 91       	pop	r20
    1ff0:	3f 91       	pop	r19
    1ff2:	2f 91       	pop	r18
    1ff4:	0f 90       	pop	r0
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	0f 90       	pop	r0
    1ffa:	1f 90       	pop	r1
    1ffc:	18 95       	reti

00001ffe <DIO_voidInit>:
#include  "DIO_priv.h"



void DIO_voidInit(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
    2006:	ea e3       	ldi	r30, 0x3A	; 58
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8e ef       	ldi	r24, 0xFE	; 254
    200c:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
    200e:	e7 e3       	ldi	r30, 0x37	; 55
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	87 eb       	ldi	r24, 0xB7	; 183
    2014:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
    2016:	e4 e3       	ldi	r30, 0x34	; 52
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	8f eb       	ldi	r24, 0xBF	; 191
    201c:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
    201e:	e1 e3       	ldi	r30, 0x31	; 49
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	81 ef       	ldi	r24, 0xF1	; 241
    2024:	80 83       	st	Z, r24


}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31 */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <DIO_enuWritePin+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <DIO_enuWritePin+0x8>
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    203e:	19 82       	std	Y+1, r1	; 0x01

	switch (u8PinValueCpy)
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3d 83       	std	Y+5, r19	; 0x05
    2048:	2c 83       	std	Y+4, r18	; 0x04
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	09 f4       	brne	.+2      	; 0x2054 <DIO_enuWritePin+0x28>
    2052:	77 c0       	rjmp	.+238    	; 0x2142 <DIO_enuWritePin+0x116>
    2054:	2c 81       	ldd	r18, Y+4	; 0x04
    2056:	3d 81       	ldd	r19, Y+5	; 0x05
    2058:	21 30       	cpi	r18, 0x01	; 1
    205a:	31 05       	cpc	r19, r1
    205c:	09 f0       	breq	.+2      	; 0x2060 <DIO_enuWritePin+0x34>
    205e:	e6 c0       	rjmp	.+460    	; 0x222c <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	a0 f4       	brcc	.+40     	; 0x208e <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;
    2066:	ab e3       	ldi	r26, 0x3B	; 59
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	eb e3       	ldi	r30, 0x3B	; 59
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_enuWritePin+0x58>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_enuWritePin+0x54>
    2088:	84 2b       	or	r24, r20
    208a:	8c 93       	st	X, r24
    208c:	d1 c0       	rjmp	.+418    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	d0 f0       	brcs	.+52     	; 0x20c8 <DIO_enuWritePin+0x9c>
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 31       	cpi	r24, 0x10	; 16
    2098:	b8 f4       	brcc	.+46     	; 0x20c8 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    209a:	a8 e3       	ldi	r26, 0x38	; 56
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 e3       	ldi	r30, 0x38	; 56
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 01       	movw	r18, r24
    20ae:	27 70       	andi	r18, 0x07	; 7
    20b0:	30 70       	andi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <DIO_enuWritePin+0x92>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <DIO_enuWritePin+0x8e>
    20c2:	84 2b       	or	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	b4 c0       	rjmp	.+360    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	80 31       	cpi	r24, 0x10	; 16
    20cc:	d0 f0       	brcs	.+52     	; 0x2102 <DIO_enuWritePin+0xd6>
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 31       	cpi	r24, 0x18	; 24
    20d2:	b8 f4       	brcc	.+46     	; 0x2102 <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    20d4:	a5 e3       	ldi	r26, 0x35	; 53
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9c 01       	movw	r18, r24
    20e8:	27 70       	andi	r18, 0x07	; 7
    20ea:	30 70       	andi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <DIO_enuWritePin+0xcc>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <DIO_enuWritePin+0xc8>
    20fc:	84 2b       	or	r24, r20
    20fe:	8c 93       	st	X, r24
    2100:	97 c0       	rjmp	.+302    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	88 31       	cpi	r24, 0x18	; 24
    2106:	d0 f0       	brcs	.+52     	; 0x213c <DIO_enuWritePin+0x110>
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	80 32       	cpi	r24, 0x20	; 32
    210c:	b8 f4       	brcc	.+46     	; 0x213c <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    210e:	a2 e3       	ldi	r26, 0x32	; 50
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e2 e3       	ldi	r30, 0x32	; 50
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 01       	movw	r18, r24
    2122:	27 70       	andi	r18, 0x07	; 7
    2124:	30 70       	andi	r19, 0x00	; 0
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 2e       	mov	r0, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <DIO_enuWritePin+0x106>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <DIO_enuWritePin+0x102>
    2136:	84 2b       	or	r24, r20
    2138:	8c 93       	st	X, r24
    213a:	7a c0       	rjmp	.+244    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	77 c0       	rjmp	.+238    	; 0x2230 <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	88 30       	cpi	r24, 0x08	; 8
    2146:	a8 f4       	brcc	.+42     	; 0x2172 <DIO_enuWritePin+0x146>
				{
					CLR_BIT(ODRA , u8PinNumCpy ) ;
    2148:	ab e3       	ldi	r26, 0x3B	; 59
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	eb e3       	ldi	r30, 0x3B	; 59
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	48 2f       	mov	r20, r24
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 2e       	mov	r0, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <DIO_enuWritePin+0x13a>
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <DIO_enuWritePin+0x136>
    216a:	80 95       	com	r24
    216c:	84 23       	and	r24, r20
    216e:	8c 93       	st	X, r24
    2170:	5f c0       	rjmp	.+190    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	88 30       	cpi	r24, 0x08	; 8
    2176:	d8 f0       	brcs	.+54     	; 0x21ae <DIO_enuWritePin+0x182>
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	80 31       	cpi	r24, 0x10	; 16
    217c:	c0 f4       	brcc	.+48     	; 0x21ae <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    217e:	a8 e3       	ldi	r26, 0x38	; 56
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e8 e3       	ldi	r30, 0x38	; 56
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	48 2f       	mov	r20, r24
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 01       	movw	r18, r24
    2192:	27 70       	andi	r18, 0x07	; 7
    2194:	30 70       	andi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <DIO_enuWritePin+0x176>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <DIO_enuWritePin+0x172>
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	41 c0       	rjmp	.+130    	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	80 31       	cpi	r24, 0x10	; 16
    21b2:	d8 f0       	brcs	.+54     	; 0x21ea <DIO_enuWritePin+0x1be>
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	88 31       	cpi	r24, 0x18	; 24
    21b8:	c0 f4       	brcc	.+48     	; 0x21ea <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    21ba:	a5 e3       	ldi	r26, 0x35	; 53
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e5 e3       	ldi	r30, 0x35	; 53
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 01       	movw	r18, r24
    21ce:	27 70       	andi	r18, 0x07	; 7
    21d0:	30 70       	andi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <DIO_enuWritePin+0x1b2>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <DIO_enuWritePin+0x1ae>
    21e2:	80 95       	com	r24
    21e4:	84 23       	and	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	23 c0       	rjmp	.+70     	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	88 31       	cpi	r24, 0x18	; 24
    21ee:	d8 f0       	brcs	.+54     	; 0x2226 <DIO_enuWritePin+0x1fa>
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	80 32       	cpi	r24, 0x20	; 32
    21f4:	c0 f4       	brcc	.+48     	; 0x2226 <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    21f6:	a2 e3       	ldi	r26, 0x32	; 50
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e2 e3       	ldi	r30, 0x32	; 50
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	48 2f       	mov	r20, r24
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9c 01       	movw	r18, r24
    220a:	27 70       	andi	r18, 0x07	; 7
    220c:	30 70       	andi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 2e       	mov	r0, r18
    2214:	02 c0       	rjmp	.+4      	; 0x221a <DIO_enuWritePin+0x1ee>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	0a 94       	dec	r0
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <DIO_enuWritePin+0x1ea>
    221e:	80 95       	com	r24
    2220:	84 23       	and	r24, r20
    2222:	8c 93       	st	X, r24
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_enuWritePin+0x204>
				}

			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	89 83       	std	Y+1, r24	; 0x01
			break ;

		}

	return enuReturnStatusLoc ;
    2230:	89 81       	ldd	r24, Y+1	; 0x01

}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <DIO_enuReadPin+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <DIO_enuReadPin+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	7c 83       	std	Y+4, r23	; 0x04
    2252:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2254:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL_PTR)
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	09 f4       	brne	.+2      	; 0x2260 <DIO_enuReadPin+0x1e>
    225e:	6e c0       	rjmp	.+220    	; 0x233c <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	88 30       	cpi	r24, 0x08	; 8
    2264:	a0 f4       	brcc	.+40     	; 0x228e <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;
    2266:	e9 e3       	ldi	r30, 0x39	; 57
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a9 01       	movw	r20, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_enuReadPin+0x3c>
    227a:	55 95       	asr	r21
    227c:	47 95       	ror	r20
    227e:	8a 95       	dec	r24
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_enuReadPin+0x38>
    2282:	ca 01       	movw	r24, r20
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	eb 81       	ldd	r30, Y+3	; 0x03
    2288:	fc 81       	ldd	r31, Y+4	; 0x04
    228a:	80 83       	st	Z, r24
    228c:	59 c0       	rjmp	.+178    	; 0x2340 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	88 30       	cpi	r24, 0x08	; 8
    2292:	c8 f0       	brcs	.+50     	; 0x22c6 <DIO_enuReadPin+0x84>
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	80 31       	cpi	r24, 0x10	; 16
    2298:	b0 f4       	brcc	.+44     	; 0x22c6 <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    229a:	e6 e3       	ldi	r30, 0x36	; 54
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	87 70       	andi	r24, 0x07	; 7
    22ac:	90 70       	andi	r25, 0x00	; 0
    22ae:	a9 01       	movw	r20, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <DIO_enuReadPin+0x74>
    22b2:	55 95       	asr	r21
    22b4:	47 95       	ror	r20
    22b6:	8a 95       	dec	r24
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <DIO_enuReadPin+0x70>
    22ba:	ca 01       	movw	r24, r20
    22bc:	81 70       	andi	r24, 0x01	; 1
    22be:	eb 81       	ldd	r30, Y+3	; 0x03
    22c0:	fc 81       	ldd	r31, Y+4	; 0x04
    22c2:	80 83       	st	Z, r24
    22c4:	3d c0       	rjmp	.+122    	; 0x2340 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	80 31       	cpi	r24, 0x10	; 16
    22ca:	c8 f0       	brcs	.+50     	; 0x22fe <DIO_enuReadPin+0xbc>
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	88 31       	cpi	r24, 0x18	; 24
    22d0:	b0 f4       	brcc	.+44     	; 0x22fe <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    22d2:	e3 e3       	ldi	r30, 0x33	; 51
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	87 70       	andi	r24, 0x07	; 7
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	a9 01       	movw	r20, r18
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <DIO_enuReadPin+0xac>
    22ea:	55 95       	asr	r21
    22ec:	47 95       	ror	r20
    22ee:	8a 95       	dec	r24
    22f0:	e2 f7       	brpl	.-8      	; 0x22ea <DIO_enuReadPin+0xa8>
    22f2:	ca 01       	movw	r24, r20
    22f4:	81 70       	andi	r24, 0x01	; 1
    22f6:	eb 81       	ldd	r30, Y+3	; 0x03
    22f8:	fc 81       	ldd	r31, Y+4	; 0x04
    22fa:	80 83       	st	Z, r24
    22fc:	21 c0       	rjmp	.+66     	; 0x2340 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	88 31       	cpi	r24, 0x18	; 24
    2302:	c8 f0       	brcs	.+50     	; 0x2336 <DIO_enuReadPin+0xf4>
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	80 32       	cpi	r24, 0x20	; 32
    2308:	b0 f4       	brcc	.+44     	; 0x2336 <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    230a:	e0 e3       	ldi	r30, 0x30	; 48
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	87 70       	andi	r24, 0x07	; 7
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	a9 01       	movw	r20, r18
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <DIO_enuReadPin+0xe4>
    2322:	55 95       	asr	r21
    2324:	47 95       	ror	r20
    2326:	8a 95       	dec	r24
    2328:	e2 f7       	brpl	.-8      	; 0x2322 <DIO_enuReadPin+0xe0>
    232a:	ca 01       	movw	r24, r20
    232c:	81 70       	andi	r24, 0x01	; 1
    232e:	eb 81       	ldd	r30, Y+3	; 0x03
    2330:	fc 81       	ldd	r31, Y+4	; 0x04
    2332:	80 83       	st	Z, r24
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    233c:	83 e0       	ldi	r24, 0x03	; 3
    233e:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStatusLoc ;
    2340:	89 81       	ldd	r24, Y+1	; 0x01

}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <DIO_enuPullWrite>:

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <DIO_enuPullWrite+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	6a 81       	ldd	r22, Y+2	; 0x02
    2362:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <DIO_enuWriteBus>:

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <DIO_enuWriteBus+0xa>
    237a:	00 d0       	rcall	.+0      	; 0x237c <DIO_enuWriteBus+0xc>
    237c:	0f 92       	push	r0
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
    2386:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2388:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	09 f4       	brne	.+2      	; 0x2394 <DIO_enuWriteBus+0x24>
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	81 32       	cpi	r24, 0x21	; 33
    2398:	c8 f5       	brcc	.+114    	; 0x240c <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    239a:	19 82       	std	Y+1, r1	; 0x01
    239c:	32 c0       	rjmp	.+100    	; 0x2402 <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	c9 01       	movw	r24, r18
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	28 0f       	add	r18, r24
    23ac:	39 1f       	adc	r19, r25
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	8c 01       	movw	r16, r24
    23b4:	02 0f       	add	r16, r18
    23b6:	13 1f       	adc	r17, r19
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	c9 01       	movw	r24, r18
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	28 0f       	add	r18, r24
    23c6:	39 1f       	adc	r19, r25
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	40 81       	ld	r20, Z
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	c9 01       	movw	r24, r18
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	28 0f       	add	r18, r24
    23e2:	39 1f       	adc	r19, r25
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	84 2f       	mov	r24, r20
    23f2:	69 2f       	mov	r22, r25
    23f4:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    23f8:	f8 01       	movw	r30, r16
    23fa:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	99 81       	ldd	r25, Y+1	; 0x01
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	98 17       	cp	r25, r24
    2408:	50 f2       	brcs	.-108    	; 0x239e <DIO_enuWriteBus+0x2e>
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_enuWriteBus+0xa6>
		}

	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	08 95       	ret

0000242c <DIO_enuReadBus>:

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <DIO_enuReadBus+0xa>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <DIO_enuReadBus+0xc>
    2438:	0f 92       	push	r0
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2444:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;

	if(pastrPinMappingCpy != NULL_PTR )
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	09 f4       	brne	.+2      	; 0x2450 <DIO_enuReadBus+0x24>
    244e:	40 c0       	rjmp	.+128    	; 0x24d0 <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	81 32       	cpi	r24, 0x21	; 33
    2454:	d0 f5       	brcc	.+116    	; 0x24ca <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	33 c0       	rjmp	.+102    	; 0x24c0 <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	c9 01       	movw	r24, r18
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	28 0f       	add	r18, r24
    2468:	39 1f       	adc	r19, r25
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	8c 01       	movw	r16, r24
    2470:	02 0f       	add	r16, r18
    2472:	13 1f       	adc	r17, r19
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	c9 01       	movw	r24, r18
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	28 0f       	add	r18, r24
    2482:	39 1f       	adc	r19, r25
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	40 81       	ld	r20, Z
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	c9 01       	movw	r24, r18
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	28 0f       	add	r18, r24
    249e:	39 1f       	adc	r19, r25
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	82 0f       	add	r24, r18
    24a6:	93 1f       	adc	r25, r19
    24a8:	9c 01       	movw	r18, r24
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	84 2f       	mov	r24, r20
    24b0:	b9 01       	movw	r22, r18
    24b2:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
    24b6:	f8 01       	movw	r30, r16
    24b8:	82 83       	std	Z+2, r24	; 0x02

	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	99 81       	ldd	r25, Y+1	; 0x01
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	98 17       	cp	r25, r24
    24c6:	48 f2       	brcs	.-110    	; 0x245a <DIO_enuReadBus+0x2e>
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <DIO_enuReadBus+0xa8>
		}

	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	08 95       	ret

000024ea <DIO_enuWritePinDir>:

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <DIO_enuWritePinDir+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <DIO_enuWritePinDir+0x8>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	8a 83       	std	Y+2, r24	; 0x02
    24fa:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    24fc:	19 82       	std	Y+1, r1	; 0x01

	switch (u8PinDirCpy)
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3d 83       	std	Y+5, r19	; 0x05
    2506:	2c 83       	std	Y+4, r18	; 0x04
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	09 f4       	brne	.+2      	; 0x2512 <DIO_enuWritePinDir+0x28>
    2510:	77 c0       	rjmp	.+238    	; 0x2600 <DIO_enuWritePinDir+0x116>
    2512:	2c 81       	ldd	r18, Y+4	; 0x04
    2514:	3d 81       	ldd	r19, Y+5	; 0x05
    2516:	21 30       	cpi	r18, 0x01	; 1
    2518:	31 05       	cpc	r19, r1
    251a:	09 f0       	breq	.+2      	; 0x251e <DIO_enuWritePinDir+0x34>
    251c:	e6 c0       	rjmp	.+460    	; 0x26ea <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	88 30       	cpi	r24, 0x08	; 8
    2522:	a0 f4       	brcc	.+40     	; 0x254c <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;
    2524:	aa e3       	ldi	r26, 0x3A	; 58
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ea e3       	ldi	r30, 0x3A	; 58
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	48 2f       	mov	r20, r24
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 2e       	mov	r0, r18
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <DIO_enuWritePinDir+0x58>
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	0a 94       	dec	r0
    2544:	e2 f7       	brpl	.-8      	; 0x253e <DIO_enuWritePinDir+0x54>
    2546:	84 2b       	or	r24, r20
    2548:	8c 93       	st	X, r24
    254a:	d1 c0       	rjmp	.+418    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	88 30       	cpi	r24, 0x08	; 8
    2550:	d0 f0       	brcs	.+52     	; 0x2586 <DIO_enuWritePinDir+0x9c>
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	80 31       	cpi	r24, 0x10	; 16
    2556:	b8 f4       	brcc	.+46     	; 0x2586 <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    2558:	a7 e3       	ldi	r26, 0x37	; 55
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e7 e3       	ldi	r30, 0x37	; 55
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9c 01       	movw	r18, r24
    256c:	27 70       	andi	r18, 0x07	; 7
    256e:	30 70       	andi	r19, 0x00	; 0
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 2e       	mov	r0, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_enuWritePinDir+0x92>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	0a 94       	dec	r0
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_enuWritePinDir+0x8e>
    2580:	84 2b       	or	r24, r20
    2582:	8c 93       	st	X, r24
    2584:	b4 c0       	rjmp	.+360    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	80 31       	cpi	r24, 0x10	; 16
    258a:	d0 f0       	brcs	.+52     	; 0x25c0 <DIO_enuWritePinDir+0xd6>
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	88 31       	cpi	r24, 0x18	; 24
    2590:	b8 f4       	brcc	.+46     	; 0x25c0 <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2592:	a4 e3       	ldi	r26, 0x34	; 52
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e4 e3       	ldi	r30, 0x34	; 52
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	88 2f       	mov	r24, r24
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 01       	movw	r18, r24
    25a6:	27 70       	andi	r18, 0x07	; 7
    25a8:	30 70       	andi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_enuWritePinDir+0xcc>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_enuWritePinDir+0xc8>
    25ba:	84 2b       	or	r24, r20
    25bc:	8c 93       	st	X, r24
    25be:	97 c0       	rjmp	.+302    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	88 31       	cpi	r24, 0x18	; 24
    25c4:	d0 f0       	brcs	.+52     	; 0x25fa <DIO_enuWritePinDir+0x110>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 32       	cpi	r24, 0x20	; 32
    25ca:	b8 f4       	brcc	.+46     	; 0x25fa <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    25cc:	a1 e3       	ldi	r26, 0x31	; 49
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e1 e3       	ldi	r30, 0x31	; 49
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9c 01       	movw	r18, r24
    25e0:	27 70       	andi	r18, 0x07	; 7
    25e2:	30 70       	andi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_enuWritePinDir+0x106>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_enuWritePinDir+0x102>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	7a c0       	rjmp	.+244    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	77 c0       	rjmp	.+238    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}

			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	88 30       	cpi	r24, 0x08	; 8
    2604:	a8 f4       	brcc	.+42     	; 0x2630 <DIO_enuWritePinDir+0x146>
				{
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    2606:	aa e3       	ldi	r26, 0x3A	; 58
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ea e3       	ldi	r30, 0x3A	; 58
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <DIO_enuWritePinDir+0x13a>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <DIO_enuWritePinDir+0x136>
    2628:	80 95       	com	r24
    262a:	84 23       	and	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	5f c0       	rjmp	.+190    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 30       	cpi	r24, 0x08	; 8
    2634:	d8 f0       	brcs	.+54     	; 0x266c <DIO_enuWritePinDir+0x182>
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	80 31       	cpi	r24, 0x10	; 16
    263a:	c0 f4       	brcc	.+48     	; 0x266c <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    263c:	a7 e3       	ldi	r26, 0x37	; 55
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e7 e3       	ldi	r30, 0x37	; 55
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	48 2f       	mov	r20, r24
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 01       	movw	r18, r24
    2650:	27 70       	andi	r18, 0x07	; 7
    2652:	30 70       	andi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_enuWritePinDir+0x176>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_enuWritePinDir+0x172>
    2664:	80 95       	com	r24
    2666:	84 23       	and	r24, r20
    2668:	8c 93       	st	X, r24
    266a:	41 c0       	rjmp	.+130    	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	80 31       	cpi	r24, 0x10	; 16
    2670:	d8 f0       	brcs	.+54     	; 0x26a8 <DIO_enuWritePinDir+0x1be>
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	88 31       	cpi	r24, 0x18	; 24
    2676:	c0 f4       	brcc	.+48     	; 0x26a8 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    2678:	a4 e3       	ldi	r26, 0x34	; 52
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e4 e3       	ldi	r30, 0x34	; 52
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9c 01       	movw	r18, r24
    268c:	27 70       	andi	r18, 0x07	; 7
    268e:	30 70       	andi	r19, 0x00	; 0
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	02 2e       	mov	r0, r18
    2696:	02 c0       	rjmp	.+4      	; 0x269c <DIO_enuWritePinDir+0x1b2>
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	0a 94       	dec	r0
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <DIO_enuWritePinDir+0x1ae>
    26a0:	80 95       	com	r24
    26a2:	84 23       	and	r24, r20
    26a4:	8c 93       	st	X, r24
    26a6:	23 c0       	rjmp	.+70     	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	88 31       	cpi	r24, 0x18	; 24
    26ac:	d8 f0       	brcs	.+54     	; 0x26e4 <DIO_enuWritePinDir+0x1fa>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	80 32       	cpi	r24, 0x20	; 32
    26b2:	c0 f4       	brcc	.+48     	; 0x26e4 <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    26b4:	a1 e3       	ldi	r26, 0x31	; 49
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e1 e3       	ldi	r30, 0x31	; 49
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	48 2f       	mov	r20, r24
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9c 01       	movw	r18, r24
    26c8:	27 70       	andi	r18, 0x07	; 7
    26ca:	30 70       	andi	r19, 0x00	; 0
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	02 2e       	mov	r0, r18
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <DIO_enuWritePinDir+0x1ee>
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	0a 94       	dec	r0
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <DIO_enuWritePinDir+0x1ea>
    26dc:	80 95       	com	r24
    26de:	84 23       	and	r24, r20
    26e0:	8c 93       	st	X, r24
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	89 83       	std	Y+1, r24	; 0x01
			break ;

		}

	return enuReturnStatusLoc ;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01


}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <DIO_enuTogglePin>:

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <DIO_enuTogglePin+0x6>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <DIO_enuTogglePin+0x8>
    2708:	0f 92       	push	r0
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	8b 83       	std	Y+3, r24	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    2710:	19 82       	std	Y+1, r1	; 0x01

	 uint8 u8PinValueCpy;

	 enuReturnStatusLoc = DIO_enuReadPin(u8PinNumCpy , &u8PinValueCpy );
    2712:	9e 01       	movw	r18, r28
    2714:	2e 5f       	subi	r18, 0xFE	; 254
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	b9 01       	movw	r22, r18
    271c:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
    2720:	89 83       	std	Y+1, r24	; 0x01

	 if(enuReturnStatusLoc == E_OK){
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	88 23       	and	r24, r24
    2726:	e1 f4       	brne	.+56     	; 0x2760 <DIO_enuTogglePin+0x60>

	 	switch(u8PinValueCpy){
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	3d 83       	std	Y+5, r19	; 0x05
    2730:	2c 83       	std	Y+4, r18	; 0x04
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	59 f0       	breq	.+22     	; 0x2750 <DIO_enuTogglePin+0x50>
    273a:	2c 81       	ldd	r18, Y+4	; 0x04
    273c:	3d 81       	ldd	r19, Y+5	; 0x05
    273e:	21 30       	cpi	r18, 0x01	; 1
    2740:	31 05       	cpc	r19, r1
    2742:	61 f4       	brne	.+24     	; 0x275c <DIO_enuTogglePin+0x5c>

	 	case DIO_u8HIGH:
	 		enuReturnStatusLoc = DIO_enuWritePin( u8PinNumCpy ,  DIO_u8LOW);
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	08 c0       	rjmp	.+16     	; 0x2760 <DIO_enuTogglePin+0x60>
	 	break ;

	 	case DIO_u8LOW:
	 		enuReturnStatusLoc = DIO_enuWritePin( u8PinNumCpy ,  DIO_u8HIGH);
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	61 e0       	ldi	r22, 0x01	; 1
    2754:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <DIO_enuTogglePin+0x60>
	 	break ;

	 	default: enuReturnStatusLoc = E_NOK_CONFIG_PARM_ERROR ;
    275c:	84 e0       	ldi	r24, 0x04	; 4
    275e:	89 83       	std	Y+1, r24	; 0x01
	 }
	 else{

	 }

	return enuReturnStatusLoc ;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <ADC_voidInit>:

void Dummy(void);
pf ADC_pfCallback;
uint16 ADC_ReadValue;
void ADC_voidInit(void)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLTAGE_REFERENCE == AVCC
    CLR_BIT(ADMUX, REFS1);
    277a:	a7 e2       	ldi	r26, 0x27	; 39
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e7 e2       	ldi	r30, 0x27	; 39
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8f 77       	andi	r24, 0x7F	; 127
    2786:	8c 93       	st	X, r24
    SET_BIT(ADMUX, REFS0);
    2788:	a7 e2       	ldi	r26, 0x27	; 39
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e7 e2       	ldi	r30, 0x27	; 39
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	80 64       	ori	r24, 0x40	; 64
    2794:	8c 93       	st	X, r24
#endif

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    SET_BIT(ADMUX, ADLAR);
#else
    CLR_BIT(ADMUX, ADLAR);
    2796:	a7 e2       	ldi	r26, 0x27	; 39
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e7 e2       	ldi	r30, 0x27	; 39
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 7d       	andi	r24, 0xDF	; 223
    27a2:	8c 93       	st	X, r24
#endif
    // selecting from ADC0 to ADC 7
    ADMUX |= ADC_CHANNEL_NUM;
    27a4:	a7 e2       	ldi	r26, 0x27	; 39
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e7 e2       	ldi	r30, 0x27	; 39
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	8c 93       	st	X, r24
// The ADC will start a conversion on a positive edge of the selected trigger signal
#if ADC_AUTO_TRIGGIR_MODE == AUTO_TRIGGIR_ENABLE
    SET_BIT(ADCSRA, ADATE);
    27b0:	a6 e2       	ldi	r26, 0x26	; 38
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e6 e2       	ldi	r30, 0x26	; 38
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	80 62       	ori	r24, 0x20	; 32
    27bc:	8c 93       	st	X, r24
    SFIOR |= ADC_AUTO_TRIGGIR_SOURCE;
    27be:	a0 e5       	ldi	r26, 0x50	; 80
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e0 e5       	ldi	r30, 0x50	; 80
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8c 93       	st	X, r24
#else
    CLR_BIT(ADCSRA, ADATE);
#endif
    // setting prescaler value
    ADCSRA |= ADC_PRESCALLER;
    27ca:	a6 e2       	ldi	r26, 0x26	; 38
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e6 e2       	ldi	r30, 0x26	; 38
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	81 60       	ori	r24, 0x01	; 1
    27d6:	8c 93       	st	X, r24
    // do nothing if the pointer to function was not assigned an address.
    ADC_pfCallback = Dummy;
    27d8:	85 e1       	ldi	r24, 0x15	; 21
    27da:	95 e1       	ldi	r25, 0x15	; 21
    27dc:	90 93 2d 02 	sts	0x022D, r25
    27e0:	80 93 2c 02 	sts	0x022C, r24

    CLR_BIT(ADCSRA, ADIE); /* Disable interrupt  */
    27e4:	a6 e2       	ldi	r26, 0x26	; 38
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e6 e2       	ldi	r30, 0x26	; 38
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	87 7f       	andi	r24, 0xF7	; 247
    27f0:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADIF); /* Clear interrupt flag */
    27f2:	a6 e2       	ldi	r26, 0x26	; 38
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e6 e2       	ldi	r30, 0x26	; 38
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	80 61       	ori	r24, 0x10	; 16
    27fe:	8c 93       	st	X, r24
}
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <ADC_voidEnable>:
void ADC_voidEnable(void)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADEN);
    280e:	a6 e2       	ldi	r26, 0x26	; 38
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e6 e2       	ldi	r30, 0x26	; 38
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	8c 93       	st	X, r24
}
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <ADC_voidDisable>:
void ADC_voidDisable(void)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADEN);
    282a:	a6 e2       	ldi	r26, 0x26	; 38
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e6 e2       	ldi	r30, 0x26	; 38
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	8f 77       	andi	r24, 0x7F	; 127
    2836:	8c 93       	st	X, r24
}
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <ADC_voidInterruptEnable>:
void ADC_voidInterruptEnable(void)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADIE);
    2846:	a6 e2       	ldi	r26, 0x26	; 38
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e6 e2       	ldi	r30, 0x26	; 38
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	88 60       	ori	r24, 0x08	; 8
    2852:	8c 93       	st	X, r24
}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <ADC_voidInterruptDisable>:
void ADC_voidInterruptDisable(void)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADIE);
    2862:	a6 e2       	ldi	r26, 0x26	; 38
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e6 e2       	ldi	r30, 0x26	; 38
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	87 7f       	andi	r24, 0xF7	; 247
    286e:	8c 93       	st	X, r24
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <ADC_voidSetCallback+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
    ADC_pfCallback = pfCallbackCpy;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	90 93 2d 02 	sts	0x022D, r25
    288c:	80 93 2c 02 	sts	0x022C, r24
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <ADC_u16ReadSync>:
uint16 ADC_u16ReadSync(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <ADC_u16ReadSync+0x6>
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    uint16 u16ReadValueLoc;

    SET_BIT(ADCSRA, ADSC); /*Start conversion */
    28a4:	a6 e2       	ldi	r26, 0x26	; 38
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e6 e2       	ldi	r30, 0x26	; 38
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 64       	ori	r24, 0x40	; 64
    28b0:	8c 93       	st	X, r24
                           //		flag = 0;

    /*Polling IF */
    // the interrupt flag is set when the conversion ends.

    while (GET_BIT(ADCSRA, ADIF) == 0)
    28b2:	e6 e2       	ldi	r30, 0x26	; 38
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	82 95       	swap	r24
    28ba:	8f 70       	andi	r24, 0x0F	; 15
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	81 70       	andi	r24, 0x01	; 1
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	a9 f3       	breq	.-22     	; 0x28b2 <ADC_u16ReadSync+0x18>
        //	while(ADCSRA & (1<<ADSC));

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    u16ReadValueLoc = ADCH;
#else
    u16ReadValueLoc = ADCL | ADCH << 8;
    28c8:	e4 e2       	ldi	r30, 0x24	; 36
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	e5 e2       	ldi	r30, 0x25	; 37
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	98 2f       	mov	r25, r24
    28de:	88 27       	eor	r24, r24
    28e0:	82 2b       	or	r24, r18
    28e2:	93 2b       	or	r25, r19
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
#endif
    SET_BIT(ADCSRA, ADIF); /* Clear event flag */
    28e8:	a6 e2       	ldi	r26, 0x26	; 38
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e6 e2       	ldi	r30, 0x26	; 38
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	80 61       	ori	r24, 0x10	; 16
    28f4:	8c 93       	st	X, r24
    return u16ReadValueLoc;
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <ADC_voidStartConversion>:
void ADC_voidStartConversion(void)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, 6);
    290c:	a6 e2       	ldi	r26, 0x26	; 38
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e6 e2       	ldi	r30, 0x26	; 38
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	80 64       	ori	r24, 0x40	; 64
    2918:	8c 93       	st	X, r24
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <ADC_u16ReadASync>:

uint16 ADC_u16ReadASync(void)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    return ADC_ReadValue;
    2928:	80 91 2e 02 	lds	r24, 0x022E
    292c:	90 91 2f 02 	lds	r25, 0x022F
}
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <ADC_f32NumtoVolt>:
float32 ADC_f32NumtoVolt(uint16 u16ReadCpy)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <ADC_f32NumtoVolt+0x6>
    293c:	00 d0       	rcall	.+0      	; 0x293e <ADC_f32NumtoVolt+0x8>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <ADC_f32NumtoVolt+0xa>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    // assuming AREF = VCC
    float32 volt;

    volt = (float32)u16ReadCpy * 5 / 1023;
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	cc 01       	movw	r24, r24
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 ea       	ldi	r20, 0xA0	; 160
    2968:	50 e4       	ldi	r21, 0x40	; 64
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 ec       	ldi	r19, 0xC0	; 192
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	54 e4       	ldi	r21, 0x44	; 68
    297e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	ab 83       	std	Y+3, r26	; 0x03
    298c:	bc 83       	std	Y+4, r27	; 0x04
    return volt;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	ab 81       	ldd	r26, Y+3	; 0x03
    2994:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	26 96       	adiw	r28, 0x06	; 6
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <__vector_16>:
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
    29ac:	1f 92       	push	r1
    29ae:	0f 92       	push	r0
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	0f 92       	push	r0
    29b4:	11 24       	eor	r1, r1
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62

#if ADC_ADJUSTMENT_MODE == ADC_LEFT
    ADC_ReadValue = ADCH;
#else
    ADC_ReadValue = ADCH << 8 | ADCL;
    29d6:	e5 e2       	ldi	r30, 0x25	; 37
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	38 2f       	mov	r19, r24
    29e2:	22 27       	eor	r18, r18
    29e4:	e4 e2       	ldi	r30, 0x24	; 36
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	82 2b       	or	r24, r18
    29f0:	93 2b       	or	r25, r19
    29f2:	90 93 2f 02 	sts	0x022F, r25
    29f6:	80 93 2e 02 	sts	0x022E, r24
#endif
    ADC_pfCallback();
    29fa:	e0 91 2c 02 	lds	r30, 0x022C
    29fe:	f0 91 2d 02 	lds	r31, 0x022D
    2a02:	09 95       	icall
}
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	ff 91       	pop	r31
    2a0a:	ef 91       	pop	r30
    2a0c:	bf 91       	pop	r27
    2a0e:	af 91       	pop	r26
    2a10:	9f 91       	pop	r25
    2a12:	8f 91       	pop	r24
    2a14:	7f 91       	pop	r23
    2a16:	6f 91       	pop	r22
    2a18:	5f 91       	pop	r21
    2a1a:	4f 91       	pop	r20
    2a1c:	3f 91       	pop	r19
    2a1e:	2f 91       	pop	r18
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <Dummy>:

void Dummy(void) {}
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <SEV_enuWrite>:
//	{0,0,0,0,1,0,0}
//};


tenuErrorStatus SEV_enuWrite(uint8 u8SevNumCpy , uint8 u8ValueCpy)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <SEV_enuWrite+0x6>
    2a3e:	0f 92       	push	r0
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	8a 83       	std	Y+2, r24	; 0x02
    2a46:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = E_OK;
    2a48:	19 82       	std	Y+1, r1	; 0x01
	
	if(u8SevNumCpy < SEV_MAX_NUM)
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	e0 f4       	brcc	.+56     	; 0x2a88 <SEV_enuWrite+0x50>
	{
		if(u8ValueCpy <= SEV_u8WRITE_NUM_9)
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	8a 30       	cpi	r24, 0x0A	; 10
    2a54:	b0 f4       	brcc	.+44     	; 0x2a82 <SEV_enuWrite+0x4a>
		{
			Sev_voidHelp(u8SevNumCpy , u8ValueCpy , SEV_astrPinMapping[u8SevNumCpy].u8SevConnection);
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	c9 01       	movw	r24, r18
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	82 0f       	add	r24, r18
    2a6c:	93 1f       	adc	r25, r19
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e9 56       	subi	r30, 0x69	; 105
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	90 81       	ld	r25, Z
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	6b 81       	ldd	r22, Y+3	; 0x03
    2a7a:	49 2f       	mov	r20, r25
    2a7c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <Sev_voidHelp>
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <SEV_enuWrite+0x54>
		}
		else
		{
			 enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <SEV_enuWrite+0x54>
		}
		
	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <SEV_enuWrite2Digits>:

tenuErrorStatus SEV_enuWrite2Digits(uint8 u8SevNumCpy1 ,uint8 u8SevNumCpy0, uint8 u8ValueCpy)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <SEV_enuWrite2Digits+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <SEV_enuWrite2Digits+0x8>
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
    2aa8:	6b 83       	std	Y+3, r22	; 0x03
    2aaa:	4c 83       	std	Y+4, r20	; 0x04
	tenuErrorStatus enuReturnStateLoc = E_OK;
    2aac:	19 82       	std	Y+1, r1	; 0x01

	if(u8SevNumCpy0 < SEV_MAX_NUM || u8SevNumCpy1 < SEV_MAX_NUM)
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	20 f0       	brcs	.+8      	; 0x2abc <SEV_enuWrite2Digits+0x22>
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <SEV_enuWrite2Digits+0x22>
    2aba:	3e c0       	rjmp	.+124    	; 0x2b38 <SEV_enuWrite2Digits+0x9e>
	{
		if(u8ValueCpy <= 99)
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	84 36       	cpi	r24, 0x64	; 100
    2ac0:	c0 f5       	brcc	.+112    	; 0x2b32 <SEV_enuWrite2Digits+0x98>
		{
			Sev_voidHelp(u8SevNumCpy1 , u8ValueCpy/10 , SEV_astrPinMapping[u8SevNumCpy1].u8SevConnection);
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9a e0       	ldi	r25, 0x0A	; 10
    2ac6:	69 2f       	mov	r22, r25
    2ac8:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <__udivmodqi4>
    2acc:	48 2f       	mov	r20, r24
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	82 0f       	add	r24, r18
    2ae4:	93 1f       	adc	r25, r19
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e9 56       	subi	r30, 0x69	; 105
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	90 81       	ld	r25, Z
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	64 2f       	mov	r22, r20
    2af2:	49 2f       	mov	r20, r25
    2af4:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <Sev_voidHelp>
			Sev_voidHelp(u8SevNumCpy0 , u8ValueCpy%10 , SEV_astrPinMapping[u8SevNumCpy0].u8SevConnection);
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9a e0       	ldi	r25, 0x0A	; 10
    2afc:	69 2f       	mov	r22, r25
    2afe:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <__udivmodqi4>
    2b02:	89 2f       	mov	r24, r25
    2b04:	48 2f       	mov	r20, r24
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	c9 01       	movw	r24, r18
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	82 0f       	add	r24, r18
    2b1c:	93 1f       	adc	r25, r19
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e9 56       	subi	r30, 0x69	; 105
    2b22:	fe 4f       	sbci	r31, 0xFE	; 254
    2b24:	90 81       	ld	r25, Z
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	64 2f       	mov	r22, r20
    2b2a:	49 2f       	mov	r20, r25
    2b2c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <Sev_voidHelp>
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <SEV_enuWrite2Digits+0xa2>
		}
		else
		{
			 enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <SEV_enuWrite2Digits+0xa2>
		}

	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <SEV_enuMode>:


tenuErrorStatus SEV_enuMode(uint8 u8SevNumCpy  , uint8 u8ModeCpy)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <SEV_enuMode+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <SEV_enuMode+0x8>
    2b54:	0f 92       	push	r0
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	8a 83       	std	Y+2, r24	; 0x02
    2b5c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = E_OK ;
    2b5e:	19 82       	std	Y+1, r1	; 0x01
	
	if (u8SevNumCpy < SEV_MAX_NUM )
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <SEV_enuMode+0x1c>
    2b66:	b5 c0       	rjmp	.+362    	; 0x2cd2 <SEV_enuMode+0x186>
	{
		switch(u8ModeCpy)
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3d 83       	std	Y+5, r19	; 0x05
    2b70:	2c 83       	std	Y+4, r18	; 0x04
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <SEV_enuMode+0x30>
    2b7a:	57 c0       	rjmp	.+174    	; 0x2c2a <SEV_enuMode+0xde>
    2b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b80:	21 30       	cpi	r18, 0x01	; 1
    2b82:	31 05       	cpc	r19, r1
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <SEV_enuMode+0x3c>
    2b86:	a2 c0       	rjmp	.+324    	; 0x2ccc <SEV_enuMode+0x180>
		{
			case  SEV_u8ON :
				if(SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_ANODE)
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	c9 01       	movw	r24, r18
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	82 0f       	add	r24, r18
    2b9e:	93 1f       	adc	r25, r19
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	e9 56       	subi	r30, 0x69	; 105
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	80 81       	ld	r24, Z
    2ba8:	88 23       	and	r24, r24
    2baa:	a9 f4       	brne	.+42     	; 0x2bd6 <SEV_enuMode+0x8a>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8HIGH) ;
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	ea 56       	subi	r30, 0x6A	; 106
    2bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bca:	80 81       	ld	r24, Z
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	80 c0       	rjmp	.+256    	; 0x2cd6 <SEV_enuMode+0x18a>
				}
				else if (SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_CATHODE)
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	c9 01       	movw	r24, r18
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	82 0f       	add	r24, r18
    2bec:	93 1f       	adc	r25, r19
    2bee:	fc 01       	movw	r30, r24
    2bf0:	e9 56       	subi	r30, 0x69	; 105
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	80 81       	ld	r24, Z
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	a9 f4       	brne	.+42     	; 0x2c24 <SEV_enuMode+0xd8>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8LOW) ;
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	c9 01       	movw	r24, r18
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	82 0f       	add	r24, r18
    2c10:	93 1f       	adc	r25, r19
    2c12:	fc 01       	movw	r30, r24
    2c14:	ea 56       	subi	r30, 0x6A	; 106
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	80 81       	ld	r24, Z
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	59 c0       	rjmp	.+178    	; 0x2cd6 <SEV_enuMode+0x18a>
				}
				else 
				{
					 enuReturnStateLoc = E_NOK_CONFIG_PARM_ERROR ;
    2c24:	84 e0       	ldi	r24, 0x04	; 4
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	56 c0       	rjmp	.+172    	; 0x2cd6 <SEV_enuMode+0x18a>
				}
			break ;
			case SEV_u8OFF :
				if(SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_ANODE)
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	c9 01       	movw	r24, r18
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	82 0f       	add	r24, r18
    2c40:	93 1f       	adc	r25, r19
    2c42:	fc 01       	movw	r30, r24
    2c44:	e9 56       	subi	r30, 0x69	; 105
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 23       	and	r24, r24
    2c4c:	a9 f4       	brne	.+42     	; 0x2c78 <SEV_enuMode+0x12c>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8LOW) ;
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	c9 01       	movw	r24, r18
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	82 0f       	add	r24, r18
    2c64:	93 1f       	adc	r25, r19
    2c66:	fc 01       	movw	r30, r24
    2c68:	ea 56       	subi	r30, 0x6A	; 106
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	80 81       	ld	r24, Z
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	2f c0       	rjmp	.+94     	; 0x2cd6 <SEV_enuMode+0x18a>
				}
				else if (SEV_astrPinMapping[u8SevNumCpy].u8SevConnection == SEV_u8COMMON_CATHODE)
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	c9 01       	movw	r24, r18
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	82 0f       	add	r24, r18
    2c8e:	93 1f       	adc	r25, r19
    2c90:	fc 01       	movw	r30, r24
    2c92:	e9 56       	subi	r30, 0x69	; 105
    2c94:	fe 4f       	sbci	r31, 0xFE	; 254
    2c96:	80 81       	ld	r24, Z
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	a9 f4       	brne	.+42     	; 0x2cc6 <SEV_enuMode+0x17a>
				{
					enuReturnStateLoc = DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevCommonPin , DIO_u8HIGH) ;
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	c9 01       	movw	r24, r18
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	82 0f       	add	r24, r18
    2cb2:	93 1f       	adc	r25, r19
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	ea 56       	subi	r30, 0x6A	; 106
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	80 81       	ld	r24, Z
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	08 c0       	rjmp	.+16     	; 0x2cd6 <SEV_enuMode+0x18a>
				}
				else 
				{
					 enuReturnStateLoc = E_NOK_CONFIG_PARM_ERROR ;
    2cc6:	84 e0       	ldi	r24, 0x04	; 4
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <SEV_enuMode+0x18a>
				}
			break;
			default:
				enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    2ccc:	82 e0       	ldi	r24, 0x02	; 2
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <SEV_enuMode+0x18a>
			break ;
		}
	}
	else
	{
		enuReturnStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <Sev_voidHelp>:


static  void Sev_voidHelp(uint8 u8SevNumCpy , uint8 u8ValueCpy , uint8 u8ModeCpy)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	61 97       	sbiw	r28, 0x11	; 17
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	6a 83       	std	Y+2, r22	; 0x02
    2d00:	4b 83       	std	Y+3, r20	; 0x03
	if (u8ModeCpy == SEV_u8COMMON_CATHODE)
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <Sev_voidHelp+0x22>
    2d08:	db c0       	rjmp	.+438    	; 0x2ec0 <Sev_voidHelp+0x1d8>
	{
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[0],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_A);
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	c9 01       	movw	r24, r18
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	82 0f       	add	r24, r18
    2d20:	93 1f       	adc	r25, r19
    2d22:	fc 01       	movw	r30, r24
    2d24:	e1 57       	subi	r30, 0x71	; 113
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	20 81       	ld	r18, Z
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	fc 01       	movw	r30, r24
    2d32:	eb 57       	subi	r30, 0x7B	; 123
    2d34:	fe 4f       	sbci	r31, 0xFE	; 254
    2d36:	80 81       	ld	r24, Z
    2d38:	81 70       	andi	r24, 0x01	; 1
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	82 2f       	mov	r24, r18
    2d3e:	69 2f       	mov	r22, r25
    2d40:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[1],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_B);
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	82 0f       	add	r24, r18
    2d5a:	93 1f       	adc	r25, r19
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e0 57       	subi	r30, 0x70	; 112
    2d60:	fe 4f       	sbci	r31, 0xFE	; 254
    2d62:	20 81       	ld	r18, Z
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	eb 57       	subi	r30, 0x7B	; 123
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	80 81       	ld	r24, Z
    2d72:	86 95       	lsr	r24
    2d74:	81 70       	andi	r24, 0x01	; 1
    2d76:	98 2f       	mov	r25, r24
    2d78:	82 2f       	mov	r24, r18
    2d7a:	69 2f       	mov	r22, r25
    2d7c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[2],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_C);
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	c9 01       	movw	r24, r18
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	82 0f       	add	r24, r18
    2d96:	93 1f       	adc	r25, r19
    2d98:	fc 01       	movw	r30, r24
    2d9a:	ef 56       	subi	r30, 0x6F	; 111
    2d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9e:	20 81       	ld	r18, Z
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	fc 01       	movw	r30, r24
    2da8:	eb 57       	subi	r30, 0x7B	; 123
    2daa:	fe 4f       	sbci	r31, 0xFE	; 254
    2dac:	80 81       	ld	r24, Z
    2dae:	86 95       	lsr	r24
    2db0:	86 95       	lsr	r24
    2db2:	81 70       	andi	r24, 0x01	; 1
    2db4:	98 2f       	mov	r25, r24
    2db6:	82 2f       	mov	r24, r18
    2db8:	69 2f       	mov	r22, r25
    2dba:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[3],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_D);
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	c9 01       	movw	r24, r18
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	82 0f       	add	r24, r18
    2dd4:	93 1f       	adc	r25, r19
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	ee 56       	subi	r30, 0x6E	; 110
    2dda:	fe 4f       	sbci	r31, 0xFE	; 254
    2ddc:	20 81       	ld	r18, Z
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	fc 01       	movw	r30, r24
    2de6:	eb 57       	subi	r30, 0x7B	; 123
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	80 81       	ld	r24, Z
    2dec:	86 95       	lsr	r24
    2dee:	86 95       	lsr	r24
    2df0:	86 95       	lsr	r24
    2df2:	81 70       	andi	r24, 0x01	; 1
    2df4:	98 2f       	mov	r25, r24
    2df6:	82 2f       	mov	r24, r18
    2df8:	69 2f       	mov	r22, r25
    2dfa:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[4],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_E);
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	c9 01       	movw	r24, r18
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	82 0f       	add	r24, r18
    2e14:	93 1f       	adc	r25, r19
    2e16:	fc 01       	movw	r30, r24
    2e18:	ed 56       	subi	r30, 0x6D	; 109
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	20 81       	ld	r18, Z
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	fc 01       	movw	r30, r24
    2e26:	eb 57       	subi	r30, 0x7B	; 123
    2e28:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2a:	80 81       	ld	r24, Z
    2e2c:	82 95       	swap	r24
    2e2e:	8f 70       	andi	r24, 0x0F	; 15
    2e30:	81 70       	andi	r24, 0x01	; 1
    2e32:	98 2f       	mov	r25, r24
    2e34:	82 2f       	mov	r24, r18
    2e36:	69 2f       	mov	r22, r25
    2e38:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[5],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_F);
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	c9 01       	movw	r24, r18
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	82 0f       	add	r24, r18
    2e52:	93 1f       	adc	r25, r19
    2e54:	fc 01       	movw	r30, r24
    2e56:	ec 56       	subi	r30, 0x6C	; 108
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	20 81       	ld	r18, Z
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	fc 01       	movw	r30, r24
    2e64:	eb 57       	subi	r30, 0x7B	; 123
    2e66:	fe 4f       	sbci	r31, 0xFE	; 254
    2e68:	80 81       	ld	r24, Z
    2e6a:	82 95       	swap	r24
    2e6c:	86 95       	lsr	r24
    2e6e:	87 70       	andi	r24, 0x07	; 7
    2e70:	81 70       	andi	r24, 0x01	; 1
    2e72:	98 2f       	mov	r25, r24
    2e74:	82 2f       	mov	r24, r18
    2e76:	69 2f       	mov	r22, r25
    2e78:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[6],SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_G);
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	c9 01       	movw	r24, r18
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	fc 01       	movw	r30, r24
    2e96:	eb 56       	subi	r30, 0x6B	; 107
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	20 81       	ld	r18, Z
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	eb 57       	subi	r30, 0x7B	; 123
    2ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea8:	80 81       	ld	r24, Z
    2eaa:	82 95       	swap	r24
    2eac:	86 95       	lsr	r24
    2eae:	86 95       	lsr	r24
    2eb0:	83 70       	andi	r24, 0x03	; 3
    2eb2:	81 70       	andi	r24, 0x01	; 1
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	82 2f       	mov	r24, r18
    2eb8:	69 2f       	mov	r22, r25
    2eba:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    2ebe:	01 c1       	rjmp	.+514    	; 0x30c2 <Sev_voidHelp+0x3da>
	}
	else  if(u8ModeCpy == SEV_u8COMMON_ANODE)
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	88 23       	and	r24, r24
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <Sev_voidHelp+0x1e0>
    2ec6:	fd c0       	rjmp	.+506    	; 0x30c2 <Sev_voidHelp+0x3da>
	{
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[0],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_A);
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	c9 01       	movw	r24, r18
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	82 0f       	add	r24, r18
    2ede:	93 1f       	adc	r25, r19
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e1 57       	subi	r30, 0x71	; 113
    2ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee6:	80 81       	ld	r24, Z
    2ee8:	89 8b       	std	Y+17, r24	; 0x11
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	eb 57       	subi	r30, 0x7B	; 123
    2ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef6:	80 81       	ld	r24, Z
    2ef8:	81 70       	andi	r24, 0x01	; 1
    2efa:	18 8a       	std	Y+16, r1	; 0x10
    2efc:	88 23       	and	r24, r24
    2efe:	11 f4       	brne	.+4      	; 0x2f04 <Sev_voidHelp+0x21c>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	88 8b       	std	Y+16, r24	; 0x10
    2f04:	89 89       	ldd	r24, Y+17	; 0x11
    2f06:	68 89       	ldd	r22, Y+16	; 0x10
    2f08:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[1],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_B);
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	c9 01       	movw	r24, r18
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	82 0f       	add	r24, r18
    2f22:	93 1f       	adc	r25, r19
    2f24:	fc 01       	movw	r30, r24
    2f26:	e0 57       	subi	r30, 0x70	; 112
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	88 2f       	mov	r24, r24
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	fc 01       	movw	r30, r24
    2f36:	eb 57       	subi	r30, 0x7B	; 123
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	80 81       	ld	r24, Z
    2f3c:	86 95       	lsr	r24
    2f3e:	81 70       	andi	r24, 0x01	; 1
    2f40:	1e 86       	std	Y+14, r1	; 0x0e
    2f42:	88 23       	and	r24, r24
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <Sev_voidHelp+0x262>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	8e 87       	std	Y+14, r24	; 0x0e
    2f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4c:	6e 85       	ldd	r22, Y+14	; 0x0e
    2f4e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[2],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_C);
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	c9 01       	movw	r24, r18
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	82 0f       	add	r24, r18
    2f68:	93 1f       	adc	r25, r19
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	ef 56       	subi	r30, 0x6F	; 111
    2f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f70:	80 81       	ld	r24, Z
    2f72:	8d 87       	std	Y+13, r24	; 0x0d
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	eb 57       	subi	r30, 0x7B	; 123
    2f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f80:	80 81       	ld	r24, Z
    2f82:	86 95       	lsr	r24
    2f84:	86 95       	lsr	r24
    2f86:	81 70       	andi	r24, 0x01	; 1
    2f88:	1c 86       	std	Y+12, r1	; 0x0c
    2f8a:	88 23       	and	r24, r24
    2f8c:	11 f4       	brne	.+4      	; 0x2f92 <Sev_voidHelp+0x2aa>
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	8c 87       	std	Y+12, r24	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f96:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[3],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_D);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	82 0f       	add	r24, r18
    2fb0:	93 1f       	adc	r25, r19
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	ee 56       	subi	r30, 0x6E	; 110
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	80 81       	ld	r24, Z
    2fba:	8b 87       	std	Y+11, r24	; 0x0b
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	eb 57       	subi	r30, 0x7B	; 123
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	80 81       	ld	r24, Z
    2fca:	86 95       	lsr	r24
    2fcc:	86 95       	lsr	r24
    2fce:	86 95       	lsr	r24
    2fd0:	81 70       	andi	r24, 0x01	; 1
    2fd2:	1a 86       	std	Y+10, r1	; 0x0a
    2fd4:	88 23       	and	r24, r24
    2fd6:	11 f4       	brne	.+4      	; 0x2fdc <Sev_voidHelp+0x2f4>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	8a 87       	std	Y+10, r24	; 0x0a
    2fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fde:	6a 85       	ldd	r22, Y+10	; 0x0a
    2fe0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[4],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_E);
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	c9 01       	movw	r24, r18
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	82 0f       	add	r24, r18
    2ffa:	93 1f       	adc	r25, r19
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	ed 56       	subi	r30, 0x6D	; 109
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	80 81       	ld	r24, Z
    3004:	89 87       	std	Y+9, r24	; 0x09
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	fc 01       	movw	r30, r24
    300e:	eb 57       	subi	r30, 0x7B	; 123
    3010:	fe 4f       	sbci	r31, 0xFE	; 254
    3012:	80 81       	ld	r24, Z
    3014:	82 95       	swap	r24
    3016:	8f 70       	andi	r24, 0x0F	; 15
    3018:	81 70       	andi	r24, 0x01	; 1
    301a:	18 86       	std	Y+8, r1	; 0x08
    301c:	88 23       	and	r24, r24
    301e:	11 f4       	brne	.+4      	; 0x3024 <Sev_voidHelp+0x33c>
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	88 87       	std	Y+8, r24	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	68 85       	ldd	r22, Y+8	; 0x08
    3028:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[5],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_F);
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	c9 01       	movw	r24, r18
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	82 0f       	add	r24, r18
    3042:	93 1f       	adc	r25, r19
    3044:	fc 01       	movw	r30, r24
    3046:	ec 56       	subi	r30, 0x6C	; 108
    3048:	fe 4f       	sbci	r31, 0xFE	; 254
    304a:	80 81       	ld	r24, Z
    304c:	8f 83       	std	Y+7, r24	; 0x07
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	fc 01       	movw	r30, r24
    3056:	eb 57       	subi	r30, 0x7B	; 123
    3058:	fe 4f       	sbci	r31, 0xFE	; 254
    305a:	80 81       	ld	r24, Z
    305c:	82 95       	swap	r24
    305e:	86 95       	lsr	r24
    3060:	87 70       	andi	r24, 0x07	; 7
    3062:	81 70       	andi	r24, 0x01	; 1
    3064:	1e 82       	std	Y+6, r1	; 0x06
    3066:	88 23       	and	r24, r24
    3068:	11 f4       	brne	.+4      	; 0x306e <Sev_voidHelp+0x386>
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	8e 83       	std	Y+6, r24	; 0x06
    306e:	8f 81       	ldd	r24, Y+7	; 0x07
    3070:	6e 81       	ldd	r22, Y+6	; 0x06
    3072:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(SEV_astrPinMapping[u8SevNumCpy].u8SevPins[6],!SEV_astrbfPinValue[u8ValueCpy].u8Sev_pin_G);
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	c9 01       	movw	r24, r18
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	82 0f       	add	r24, r18
    308c:	93 1f       	adc	r25, r19
    308e:	fc 01       	movw	r30, r24
    3090:	eb 56       	subi	r30, 0x6B	; 107
    3092:	fe 4f       	sbci	r31, 0xFE	; 254
    3094:	80 81       	ld	r24, Z
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	fc 01       	movw	r30, r24
    30a0:	eb 57       	subi	r30, 0x7B	; 123
    30a2:	fe 4f       	sbci	r31, 0xFE	; 254
    30a4:	80 81       	ld	r24, Z
    30a6:	82 95       	swap	r24
    30a8:	86 95       	lsr	r24
    30aa:	86 95       	lsr	r24
    30ac:	83 70       	andi	r24, 0x03	; 3
    30ae:	81 70       	andi	r24, 0x01	; 1
    30b0:	1c 82       	std	Y+4, r1	; 0x04
    30b2:	88 23       	and	r24, r24
    30b4:	11 f4       	brne	.+4      	; 0x30ba <Sev_voidHelp+0x3d2>
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	8c 83       	std	Y+4, r24	; 0x04
    30ba:	8d 81       	ldd	r24, Y+5	; 0x05
    30bc:	6c 81       	ldd	r22, Y+4	; 0x04
    30be:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	else
	{
		
	}
	
}
    30c2:	61 96       	adiw	r28, 0x11	; 17
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <Relay_voidInit>:
#include "RELAY_priv.h"
static void Relay_ONNC_OFFNO(uint8 u8RelayNumCpy , uint8 u8Mode);
static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode);

void Relay_voidInit(void)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	00 d0       	rcall	.+0      	; 0x30da <Relay_voidInit+0x6>
    30da:	0f 92       	push	r0
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < RELAY_MAX_NUM  ; u8CntrLoc++)
    30e0:	19 82       	std	Y+1, r1	; 0x01
    30e2:	8f c0       	rjmp	.+286    	; 0x3202 <Relay_voidInit+0x12e>
	{
		switch( (Relay_astrPinMapping[u8CntrLoc].u8PinNumbers) )
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	c9 01       	movw	r24, r18
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	fc 01       	movw	r30, r24
    30fa:	ef 55       	subi	r30, 0x5F	; 95
    30fc:	fe 4f       	sbci	r31, 0xFE	; 254
    30fe:	80 81       	ld	r24, Z
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	3b 83       	std	Y+3, r19	; 0x03
    3106:	2a 83       	std	Y+2, r18	; 0x02
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	81 30       	cpi	r24, 0x01	; 1
    310e:	91 05       	cpc	r25, r1
    3110:	09 f4       	brne	.+2      	; 0x3114 <Relay_voidInit+0x40>
    3112:	45 c0       	rjmp	.+138    	; 0x319e <Relay_voidInit+0xca>
    3114:	2a 81       	ldd	r18, Y+2	; 0x02
    3116:	3b 81       	ldd	r19, Y+3	; 0x03
    3118:	22 30       	cpi	r18, 0x02	; 2
    311a:	31 05       	cpc	r19, r1
    311c:	09 f0       	breq	.+2      	; 0x3120 <Relay_voidInit+0x4c>
    311e:	5f c0       	rjmp	.+190    	; 0x31de <Relay_voidInit+0x10a>
		{
		case Relay_intSupply:
		{
			if(Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map >= DIO_u8PIN_0  &&
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	c9 01       	movw	r24, r18
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	fc 01       	movw	r30, r24
    3136:	ed 55       	subi	r30, 0x5D	; 93
    3138:	fe 4f       	sbci	r31, 0xFE	; 254
    313a:	80 81       	ld	r24, Z
    313c:	80 32       	cpi	r24, 0x20	; 32
    313e:	f8 f4       	brcc	.+62     	; 0x317e <Relay_voidInit+0xaa>
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	c9 01       	movw	r24, r18
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	82 0f       	add	r24, r18
    3152:	93 1f       	adc	r25, r19
    3154:	fc 01       	movw	r30, r24
    3156:	ec 55       	subi	r30, 0x5C	; 92
    3158:	fe 4f       	sbci	r31, 0xFE	; 254
    315a:	80 81       	ld	r24, Z
    315c:	80 32       	cpi	r24, 0x20	; 32
    315e:	78 f4       	brcc	.+30     	; 0x317e <Relay_voidInit+0xaa>
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map <= DIO_u8PIN_31 &&
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin2Map >= DIO_u8PIN_0  &&
			   Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin2Map <= DIO_u8PIN_31)
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_OK;
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	c9 01       	movw	r24, r18
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	fc 01       	movw	r30, r24
    3176:	eb 55       	subi	r30, 0x5B	; 91
    3178:	fe 4f       	sbci	r31, 0xFE	; 254
    317a:	10 82       	st	Z, r1
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <Relay_voidInit+0x128>
			}
			else
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	c9 01       	movw	r24, r18
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	82 0f       	add	r24, r18
    3190:	93 1f       	adc	r25, r19
    3192:	fc 01       	movw	r30, r24
    3194:	eb 55       	subi	r30, 0x5B	; 91
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	80 83       	st	Z, r24
    319c:	2f c0       	rjmp	.+94     	; 0x31fc <Relay_voidInit+0x128>
		}
		break;

		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap >= DIO_u8PIN_0  &&
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	c9 01       	movw	r24, r18
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	82 0f       	add	r24, r18
    31b0:	93 1f       	adc	r25, r19
    31b2:	fc 01       	movw	r30, r24
    31b4:	ec 55       	subi	r30, 0x5C	; 92
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	80 81       	ld	r24, Z
    31ba:	80 32       	cpi	r24, 0x20	; 32
    31bc:	f8 f0       	brcs	.+62     	; 0x31fc <Relay_voidInit+0x128>
			{

			}
			else
			{
				Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	c9 01       	movw	r24, r18
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	88 0f       	add	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	82 0f       	add	r24, r18
    31d0:	93 1f       	adc	r25, r19
    31d2:	fc 01       	movw	r30, r24
    31d4:	eb 55       	subi	r30, 0x5B	; 91
    31d6:	fe 4f       	sbci	r31, 0xFE	; 254
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	80 83       	st	Z, r24
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <Relay_voidInit+0x128>
			}
		}
		break;

		default:
			Relay_astrPinMapping[u8CntrLoc].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	c9 01       	movw	r24, r18
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	82 0f       	add	r24, r18
    31f0:	93 1f       	adc	r25, r19
    31f2:	fc 01       	movw	r30, r24
    31f4:	eb 55       	subi	r30, 0x5B	; 91
    31f6:	fe 4f       	sbci	r31, 0xFE	; 254
    31f8:	84 e0       	ldi	r24, 0x04	; 4
    31fa:	80 83       	st	Z, r24
static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode);

void Relay_voidInit(void)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < RELAY_MAX_NUM  ; u8CntrLoc++)
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	82 30       	cpi	r24, 0x02	; 2
    3206:	08 f4       	brcc	.+2      	; 0x320a <Relay_voidInit+0x136>
    3208:	6d cf       	rjmp	.-294    	; 0x30e4 <Relay_voidInit+0x10>
		break;
		}

	}

}
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <Relay_enuState>:


tenuErrorStatus Relay_enuState (uint8 u8RelayNumCpy , uint8 u8Mode)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	00 d0       	rcall	.+0      	; 0x321c <Relay_enuState+0x6>
    321c:	00 d0       	rcall	.+0      	; 0x321e <Relay_enuState+0x8>
    321e:	0f 92       	push	r0
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	8a 83       	std	Y+2, r24	; 0x02
    3226:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus Relay_ErrorState = E_OK;
    3228:	19 82       	std	Y+1, r1	; 0x01

	switch (u8Mode) {
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	3d 83       	std	Y+5, r19	; 0x05
    3232:	2c 83       	std	Y+4, r18	; 0x04
    3234:	8c 81       	ldd	r24, Y+4	; 0x04
    3236:	9d 81       	ldd	r25, Y+5	; 0x05
    3238:	85 35       	cpi	r24, 0x55	; 85
    323a:	91 05       	cpc	r25, r1
    323c:	31 f0       	breq	.+12     	; 0x324a <Relay_enuState+0x34>
    323e:	2c 81       	ldd	r18, Y+4	; 0x04
    3240:	3d 81       	ldd	r19, Y+5	; 0x05
    3242:	26 36       	cpi	r18, 0x66	; 102
    3244:	31 05       	cpc	r19, r1
    3246:	71 f1       	breq	.+92     	; 0x32a4 <Relay_enuState+0x8e>
    3248:	5a c0       	rjmp	.+180    	; 0x32fe <Relay_enuState+0xe8>
		case RELAY_ON:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNO)
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	c9 01       	movw	r24, r18
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	82 0f       	add	r24, r18
    325c:	93 1f       	adc	r25, r19
    325e:	fc 01       	movw	r30, r24
    3260:	ee 55       	subi	r30, 0x5E	; 94
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	80 81       	ld	r24, Z
    3266:	85 31       	cpi	r24, 0x15	; 21
    3268:	29 f4       	brne	.+10     	; 0x3274 <Relay_enuState+0x5e>
			{
				Relay_ONNC_OFFNO(u8RelayNumCpy , u8Mode);
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	6b 81       	ldd	r22, Y+3	; 0x03
    326e:	0e 94 8a 19 	call	0x3314	; 0x3314 <Relay_ONNC_OFFNO>
    3272:	47 c0       	rjmp	.+142    	; 0x3302 <Relay_enuState+0xec>

			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNC)
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	c9 01       	movw	r24, r18
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	82 0f       	add	r24, r18
    3286:	93 1f       	adc	r25, r19
    3288:	fc 01       	movw	r30, r24
    328a:	ee 55       	subi	r30, 0x5E	; 94
    328c:	fe 4f       	sbci	r31, 0xFE	; 254
    328e:	80 81       	ld	r24, Z
    3290:	8f 3f       	cpi	r24, 0xFF	; 255
    3292:	29 f4       	brne	.+10     	; 0x329e <Relay_enuState+0x88>
			{
				Relay_OFFNC_ONNO(u8RelayNumCpy , u8Mode);
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	6b 81       	ldd	r22, Y+3	; 0x03
    3298:	0e 94 2c 1a 	call	0x3458	; 0x3458 <Relay_OFFNC_ONNO>
    329c:	32 c0       	rjmp	.+100    	; 0x3302 <Relay_enuState+0xec>

			}
			else
			{
				Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    329e:	84 e0       	ldi	r24, 0x04	; 4
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	2f c0       	rjmp	.+94     	; 0x3302 <Relay_enuState+0xec>

		break;

		case RELAY_OFF:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNO)
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	c9 01       	movw	r24, r18
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	82 0f       	add	r24, r18
    32b6:	93 1f       	adc	r25, r19
    32b8:	fc 01       	movw	r30, r24
    32ba:	ee 55       	subi	r30, 0x5E	; 94
    32bc:	fe 4f       	sbci	r31, 0xFE	; 254
    32be:	80 81       	ld	r24, Z
    32c0:	85 31       	cpi	r24, 0x15	; 21
    32c2:	29 f4       	brne	.+10     	; 0x32ce <Relay_enuState+0xb8>
			{
				Relay_OFFNC_ONNO(u8RelayNumCpy , u8Mode);
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	6b 81       	ldd	r22, Y+3	; 0x03
    32c8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <Relay_OFFNC_ONNO>
    32cc:	1a c0       	rjmp	.+52     	; 0x3302 <Relay_enuState+0xec>

			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8ACMode == Relay_ACNC)
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	28 2f       	mov	r18, r24
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	c9 01       	movw	r24, r18
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	fc 01       	movw	r30, r24
    32e4:	ee 55       	subi	r30, 0x5E	; 94
    32e6:	fe 4f       	sbci	r31, 0xFE	; 254
    32e8:	80 81       	ld	r24, Z
    32ea:	8f 3f       	cpi	r24, 0xFF	; 255
    32ec:	29 f4       	brne	.+10     	; 0x32f8 <Relay_enuState+0xe2>
			{
				Relay_ONNC_OFFNO(u8RelayNumCpy , u8Mode);
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	6b 81       	ldd	r22, Y+3	; 0x03
    32f2:	0e 94 8a 19 	call	0x3314	; 0x3314 <Relay_ONNC_OFFNO>
    32f6:	05 c0       	rjmp	.+10     	; 0x3302 <Relay_enuState+0xec>

			}
			else
			{
				Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    32f8:	84 e0       	ldi	r24, 0x04	; 4
    32fa:	89 83       	std	Y+1, r24	; 0x01
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <Relay_enuState+0xec>
		}

		break;

		default:
			Relay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    32fe:	84 e0       	ldi	r24, 0x04	; 4
    3300:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	return Relay_ErrorState;
    3302:	89 81       	ldd	r24, Y+1	; 0x01
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	08 95       	ret

00003314 <Relay_ONNC_OFFNO>:


static void Relay_ONNC_OFFNO(uint8 u8RelayNumCpy , uint8 u8Mode)
{
    3314:	df 93       	push	r29
    3316:	cf 93       	push	r28
    3318:	00 d0       	rcall	.+0      	; 0x331a <Relay_ONNC_OFFNO+0x6>
    331a:	00 d0       	rcall	.+0      	; 0x331c <Relay_ONNC_OFFNO+0x8>
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	6a 83       	std	Y+2, r22	; 0x02
	switch(Relay_astrPinMapping[u8RelayNumCpy].u8PinNumbers)
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	c9 01       	movw	r24, r18
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	82 0f       	add	r24, r18
    3336:	93 1f       	adc	r25, r19
    3338:	fc 01       	movw	r30, r24
    333a:	ef 55       	subi	r30, 0x5F	; 95
    333c:	fe 4f       	sbci	r31, 0xFE	; 254
    333e:	80 81       	ld	r24, Z
    3340:	28 2f       	mov	r18, r24
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	3c 83       	std	Y+4, r19	; 0x04
    3346:	2b 83       	std	Y+3, r18	; 0x03
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	91 05       	cpc	r25, r1
    3350:	49 f1       	breq	.+82     	; 0x33a4 <Relay_ONNC_OFFNO+0x90>
    3352:	2b 81       	ldd	r18, Y+3	; 0x03
    3354:	3c 81       	ldd	r19, Y+4	; 0x04
    3356:	22 30       	cpi	r18, 0x02	; 2
    3358:	31 05       	cpc	r19, r1
    335a:	09 f0       	breq	.+2      	; 0x335e <Relay_ONNC_OFFNO+0x4a>
    335c:	76 c0       	rjmp	.+236    	; 0x344a <Relay_ONNC_OFFNO+0x136>
	{
		case Relay_intSupply:
		{

			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH );
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	c9 01       	movw	r24, r18
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	82 0f       	add	r24, r18
    3370:	93 1f       	adc	r25, r19
    3372:	fc 01       	movw	r30, r24
    3374:	ed 55       	subi	r30, 0x5D	; 93
    3376:	fe 4f       	sbci	r31, 0xFE	; 254
    3378:	80 81       	ld	r24, Z
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	c9 01       	movw	r24, r18
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	88 0f       	add	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	82 0f       	add	r24, r18
    3392:	93 1f       	adc	r25, r19
    3394:	fc 01       	movw	r30, r24
    3396:	ec 55       	subi	r30, 0x5C	; 92
    3398:	fe 4f       	sbci	r31, 0xFE	; 254
    339a:	80 81       	ld	r24, Z
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    33a2:	53 c0       	rjmp	.+166    	; 0x344a <Relay_ONNC_OFFNO+0x136>
		}
	break;

		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extHIGH)
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	c9 01       	movw	r24, r18
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	82 0f       	add	r24, r18
    33b6:	93 1f       	adc	r25, r19
    33b8:	fc 01       	movw	r30, r24
    33ba:	ed 55       	subi	r30, 0x5D	; 93
    33bc:	fe 4f       	sbci	r31, 0xFE	; 254
    33be:	80 81       	ld	r24, Z
    33c0:	8a 3c       	cpi	r24, 0xCA	; 202
    33c2:	91 f4       	brne	.+36     	; 0x33e8 <Relay_ONNC_OFFNO+0xd4>
			{

				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	c9 01       	movw	r24, r18
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	82 0f       	add	r24, r18
    33d6:	93 1f       	adc	r25, r19
    33d8:	fc 01       	movw	r30, r24
    33da:	ec 55       	subi	r30, 0x5C	; 92
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	80 81       	ld	r24, Z
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    33e6:	31 c0       	rjmp	.+98     	; 0x344a <Relay_ONNC_OFFNO+0x136>
			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extLOW)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	c9 01       	movw	r24, r18
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	82 0f       	add	r24, r18
    33fa:	93 1f       	adc	r25, r19
    33fc:	fc 01       	movw	r30, r24
    33fe:	ed 55       	subi	r30, 0x5D	; 93
    3400:	fe 4f       	sbci	r31, 0xFE	; 254
    3402:	80 81       	ld	r24, Z
    3404:	85 3c       	cpi	r24, 0xC5	; 197
    3406:	91 f4       	brne	.+36     	; 0x342c <Relay_ONNC_OFFNO+0x118>
			{

				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	c9 01       	movw	r24, r18
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	fc 01       	movw	r30, r24
    341e:	ec 55       	subi	r30, 0x5C	; 92
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	80 81       	ld	r24, Z
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    342a:	0f c0       	rjmp	.+30     	; 0x344a <Relay_ONNC_OFFNO+0x136>
			}
			else
			{
				Relay_astrPinMapping[u8RelayNumCpy].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	c9 01       	movw	r24, r18
    3434:	88 0f       	add	r24, r24
    3436:	99 1f       	adc	r25, r25
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	82 0f       	add	r24, r18
    343e:	93 1f       	adc	r25, r19
    3440:	fc 01       	movw	r30, r24
    3442:	eb 55       	subi	r30, 0x5B	; 91
    3444:	fe 4f       	sbci	r31, 0xFE	; 254
    3446:	84 e0       	ldi	r24, 0x04	; 4
    3448:	80 83       	st	Z, r24
			break;
		}
	break;
	}

}
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <Relay_OFFNC_ONNO>:

static void Relay_OFFNC_ONNO(uint8 u8RelayNumCpy , uint8 u8Mode)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <Relay_OFFNC_ONNO+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <Relay_OFFNC_ONNO+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	6a 83       	std	Y+2, r22	; 0x02
	switch(Relay_astrPinMapping[u8RelayNumCpy].u8PinNumbers)
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	c9 01       	movw	r24, r18
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	82 0f       	add	r24, r18
    347a:	93 1f       	adc	r25, r19
    347c:	fc 01       	movw	r30, r24
    347e:	ef 55       	subi	r30, 0x5F	; 95
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	80 81       	ld	r24, Z
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	3c 83       	std	Y+4, r19	; 0x04
    348a:	2b 83       	std	Y+3, r18	; 0x03
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	81 30       	cpi	r24, 0x01	; 1
    3492:	91 05       	cpc	r25, r1
    3494:	49 f1       	breq	.+82     	; 0x34e8 <Relay_OFFNC_ONNO+0x90>
    3496:	2b 81       	ldd	r18, Y+3	; 0x03
    3498:	3c 81       	ldd	r19, Y+4	; 0x04
    349a:	22 30       	cpi	r18, 0x02	; 2
    349c:	31 05       	cpc	r19, r1
    349e:	09 f0       	breq	.+2      	; 0x34a2 <Relay_OFFNC_ONNO+0x4a>
    34a0:	76 c0       	rjmp	.+236    	; 0x358e <Relay_OFFNC_ONNO+0x136>
	{
		case Relay_intSupply:
		{
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	c9 01       	movw	r24, r18
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	82 0f       	add	r24, r18
    34b4:	93 1f       	adc	r25, r19
    34b6:	fc 01       	movw	r30, r24
    34b8:	ed 55       	subi	r30, 0x5D	; 93
    34ba:	fe 4f       	sbci	r31, 0xFE	; 254
    34bc:	80 81       	ld	r24, Z
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
			DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	c9 01       	movw	r24, r18
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	82 0f       	add	r24, r18
    34d6:	93 1f       	adc	r25, r19
    34d8:	fc 01       	movw	r30, r24
    34da:	ec 55       	subi	r30, 0x5C	; 92
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	80 81       	ld	r24, Z
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    34e6:	53 c0       	rjmp	.+166    	; 0x358e <Relay_OFFNC_ONNO+0x136>
		}
		break;
		case Relay_extSupply:
		{
			if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extHIGH)
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	c9 01       	movw	r24, r18
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	82 0f       	add	r24, r18
    34fa:	93 1f       	adc	r25, r19
    34fc:	fc 01       	movw	r30, r24
    34fe:	ed 55       	subi	r30, 0x5D	; 93
    3500:	fe 4f       	sbci	r31, 0xFE	; 254
    3502:	80 81       	ld	r24, Z
    3504:	8a 3c       	cpi	r24, 0xCA	; 202
    3506:	91 f4       	brne	.+36     	; 0x352c <Relay_OFFNC_ONNO+0xd4>
			{
				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	c9 01       	movw	r24, r18
    3510:	88 0f       	add	r24, r24
    3512:	99 1f       	adc	r25, r25
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	82 0f       	add	r24, r18
    351a:	93 1f       	adc	r25, r19
    351c:	fc 01       	movw	r30, r24
    351e:	ec 55       	subi	r30, 0x5C	; 92
    3520:	fe 4f       	sbci	r31, 0xFE	; 254
    3522:	80 81       	ld	r24, Z
    3524:	61 e0       	ldi	r22, 0x01	; 1
    3526:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    352a:	31 c0       	rjmp	.+98     	; 0x358e <Relay_OFFNC_ONNO+0x136>
			}
			else if(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == Relay_u8extLOW)
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	c9 01       	movw	r24, r18
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	fc 01       	movw	r30, r24
    3542:	ed 55       	subi	r30, 0x5D	; 93
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	80 81       	ld	r24, Z
    3548:	85 3c       	cpi	r24, 0xC5	; 197
    354a:	91 f4       	brne	.+36     	; 0x3570 <Relay_OFFNC_ONNO+0x118>
			{
				DIO_enuWritePin(Relay_astrPinMapping[u8RelayNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	c9 01       	movw	r24, r18
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	82 0f       	add	r24, r18
    355e:	93 1f       	adc	r25, r19
    3560:	fc 01       	movw	r30, r24
    3562:	ec 55       	subi	r30, 0x5C	; 92
    3564:	fe 4f       	sbci	r31, 0xFE	; 254
    3566:	80 81       	ld	r24, Z
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    356e:	0f c0       	rjmp	.+30     	; 0x358e <Relay_OFFNC_ONNO+0x136>
			}
			else
			{
				Relay_astrPinMapping[u8RelayNumCpy].tenuRelay_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	28 2f       	mov	r18, r24
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	c9 01       	movw	r24, r18
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	82 0f       	add	r24, r18
    3582:	93 1f       	adc	r25, r19
    3584:	fc 01       	movw	r30, r24
    3586:	eb 55       	subi	r30, 0x5B	; 91
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	84 e0       	ldi	r24, 0x04	; 4
    358c:	80 83       	st	Z, r24
			break;
		}
		break;
	}

}
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <LM35_vidInit>:
static float32 LM35_u16ReadTempAsync(uint8 LM35_u8ChannelNum);

uint8 LM35_u8Channel;

void LM35_vidInit(uint8 LM35_u8ChannelNum)
{
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	89 83       	std	Y+1, r24	; 0x01
	LM35_u8Channel = LM35_u8ChannelNum;
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	80 93 30 02 	sts	0x0230, r24
	if(LM35_astrChannelMapping[LM35_u8ChannelNum].u8ReadMode == LM35_ReadSynch)
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	c9 01       	movw	r24, r18
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	82 1b       	sub	r24, r18
    35c4:	93 0b       	sbc	r25, r19
    35c6:	fc 01       	movw	r30, r24
    35c8:	e4 55       	subi	r30, 0x54	; 84
    35ca:	fe 4f       	sbci	r31, 0xFE	; 254
    35cc:	80 81       	ld	r24, Z
    35ce:	86 36       	cpi	r24, 0x66	; 102
    35d0:	79 f4       	brne	.+30     	; 0x35f0 <LM35_vidInit+0x54>
	{
		DIO_voidInit();
    35d2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <DIO_voidInit>
		ADC_voidEnable();
    35d6:	0e 94 03 14 	call	0x2806	; 0x2806 <ADC_voidEnable>
		ADC_voidInit();
    35da:	0e 94 b9 13 	call	0x2772	; 0x2772 <ADC_voidInit>
		ADC_voidEnable();
    35de:	0e 94 03 14 	call	0x2806	; 0x2806 <ADC_voidEnable>
		LCD_voidInit();
    35e2:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <LCD_voidInit>
		DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8HIGH);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_enuPullWrite>
    35ee:	18 c0       	rjmp	.+48     	; 0x3620 <LM35_vidInit+0x84>
	}
	else
	{
		DIO_voidInit();
    35f0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <DIO_voidInit>
		GIE_voidDisable();
    35f4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <GIE_voidDisable>
		ADC_voidEnable();
    35f8:	0e 94 03 14 	call	0x2806	; 0x2806 <ADC_voidEnable>
		ADC_voidInit();
    35fc:	0e 94 b9 13 	call	0x2772	; 0x2772 <ADC_voidInit>
		ADC_voidEnable();
    3600:	0e 94 03 14 	call	0x2806	; 0x2806 <ADC_voidEnable>
		LCD_voidInit();
    3604:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <LCD_voidInit>
		ADC_voidSetCallback(LM35_u16ReadTempUpdate);
    3608:	8f e4       	ldi	r24, 0x4F	; 79
    360a:	9b e1       	ldi	r25, 0x1B	; 27
    360c:	0e 94 3b 14 	call	0x2876	; 0x2876 <ADC_voidSetCallback>
		DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8HIGH);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_enuPullWrite>
		ADC_voidInterruptEnable();
    3618:	0e 94 1f 14 	call	0x283e	; 0x283e <ADC_voidInterruptEnable>
		GIE_voidEnable();
    361c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <GIE_voidEnable>
	}
}
    3620:	0f 90       	pop	r0
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <LM35_u16ReadTemp>:

float32 LM35_u16ReadTemp(uint8 LM35_u8ChannelNum)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	00 d0       	rcall	.+0      	; 0x362e <LM35_u16ReadTemp+0x6>
    362e:	00 d0       	rcall	.+0      	; 0x3630 <LM35_u16ReadTemp+0x8>
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	8d 83       	std	Y+5, r24	; 0x05
	float32 f32_LM35Temp;
	if(LM35_astrChannelMapping[LM35_u8ChannelNum].u8ReadMode == LM35_ReadSynch)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	c9 01       	movw	r24, r18
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	82 1b       	sub	r24, r18
    364e:	93 0b       	sbc	r25, r19
    3650:	fc 01       	movw	r30, r24
    3652:	e4 55       	subi	r30, 0x54	; 84
    3654:	fe 4f       	sbci	r31, 0xFE	; 254
    3656:	80 81       	ld	r24, Z
    3658:	86 36       	cpi	r24, 0x66	; 102
    365a:	51 f4       	brne	.+20     	; 0x3670 <LM35_u16ReadTemp+0x48>
	{
		f32_LM35Temp = LM35_u16ReadTempSync(LM35_u8ChannelNum);
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LM35_u16ReadTempSync>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	ab 83       	std	Y+3, r26	; 0x03
    366c:	bc 83       	std	Y+4, r27	; 0x04
    366e:	09 c0       	rjmp	.+18     	; 0x3682 <LM35_u16ReadTemp+0x5a>

	}
	else
	{
		f32_LM35Temp = LM35_u16ReadTempAsync(LM35_u8ChannelNum);
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	0e 94 31 1c 	call	0x3862	; 0x3862 <LM35_u16ReadTempAsync>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04

	}
	return f32_LM35Temp;
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	ab 81       	ldd	r26, Y+3	; 0x03
    3688:	bc 81       	ldd	r27, Y+4	; 0x04
}
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <LM35_u16ReadTempUpdate>:

void LM35_u16ReadTempUpdate(void)
{
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62

	if( LM35_astrChannelMapping[LM35_u8Channel].u8ReadMode == LM35_ReadSynch)
    36aa:	80 91 30 02 	lds	r24, 0x0230
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	c9 01       	movw	r24, r18
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	82 1b       	sub	r24, r18
    36c2:	93 0b       	sbc	r25, r19
    36c4:	fc 01       	movw	r30, r24
    36c6:	e4 55       	subi	r30, 0x54	; 84
    36c8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ca:	80 81       	ld	r24, Z
    36cc:	86 36       	cpi	r24, 0x66	; 102
    36ce:	51 f5       	brne	.+84     	; 0x3724 <LM35_u16ReadTempUpdate+0x86>
	{
		LM35_astrChannelMapping[LM35_u8Channel].f32ChannelValue =
    36d0:	80 91 30 02 	lds	r24, 0x0230
    36d4:	08 2f       	mov	r16, r24
    36d6:	10 e0       	ldi	r17, 0x00	; 0
    36d8:	80 91 30 02 	lds	r24, 0x0230
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	c9 01       	movw	r24, r18
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	82 1b       	sub	r24, r18
    36f0:	93 0b       	sbc	r25, r19
    36f2:	fc 01       	movw	r30, r24
    36f4:	e5 55       	subi	r30, 0x55	; 85
    36f6:	fe 4f       	sbci	r31, 0xFE	; 254
    36f8:	80 81       	ld	r24, Z
    36fa:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LM35_u16ReadTempSync>
    36fe:	9b 01       	movw	r18, r22
    3700:	ac 01       	movw	r20, r24
    3702:	c8 01       	movw	r24, r16
    3704:	88 0f       	add	r24, r24
    3706:	99 1f       	adc	r25, r25
    3708:	88 0f       	add	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	80 1b       	sub	r24, r16
    3712:	91 0b       	sbc	r25, r17
    3714:	fc 01       	movw	r30, r24
    3716:	e3 55       	subi	r30, 0x53	; 83
    3718:	fe 4f       	sbci	r31, 0xFE	; 254
    371a:	20 83       	st	Z, r18
    371c:	31 83       	std	Z+1, r19	; 0x01
    371e:	42 83       	std	Z+2, r20	; 0x02
    3720:	53 83       	std	Z+3, r21	; 0x03
    3722:	4f c0       	rjmp	.+158    	; 0x37c2 <LM35_u16ReadTempUpdate+0x124>
				LM35_u16ReadTempSync(LM35_astrChannelMapping[LM35_u8Channel].u8ADCChannelMap);
	}
	else if (LM35_astrChannelMapping[LM35_u8Channel].u8ReadMode == LM35_ReadAsynch)
    3724:	80 91 30 02 	lds	r24, 0x0230
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	c9 01       	movw	r24, r18
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	82 1b       	sub	r24, r18
    373c:	93 0b       	sbc	r25, r19
    373e:	fc 01       	movw	r30, r24
    3740:	e4 55       	subi	r30, 0x54	; 84
    3742:	fe 4f       	sbci	r31, 0xFE	; 254
    3744:	80 81       	ld	r24, Z
    3746:	8c 3c       	cpi	r24, 0xCC	; 204
    3748:	51 f5       	brne	.+84     	; 0x379e <LM35_u16ReadTempUpdate+0x100>
	{
		LM35_astrChannelMapping[LM35_u8Channel].f32ChannelValue =
    374a:	80 91 30 02 	lds	r24, 0x0230
    374e:	08 2f       	mov	r16, r24
    3750:	10 e0       	ldi	r17, 0x00	; 0
    3752:	80 91 30 02 	lds	r24, 0x0230
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	c9 01       	movw	r24, r18
    375c:	88 0f       	add	r24, r24
    375e:	99 1f       	adc	r25, r25
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	88 0f       	add	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	82 1b       	sub	r24, r18
    376a:	93 0b       	sbc	r25, r19
    376c:	fc 01       	movw	r30, r24
    376e:	e5 55       	subi	r30, 0x55	; 85
    3770:	fe 4f       	sbci	r31, 0xFE	; 254
    3772:	80 81       	ld	r24, Z
    3774:	0e 94 31 1c 	call	0x3862	; 0x3862 <LM35_u16ReadTempAsync>
    3778:	9b 01       	movw	r18, r22
    377a:	ac 01       	movw	r20, r24
    377c:	c8 01       	movw	r24, r16
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	80 1b       	sub	r24, r16
    378c:	91 0b       	sbc	r25, r17
    378e:	fc 01       	movw	r30, r24
    3790:	e3 55       	subi	r30, 0x53	; 83
    3792:	fe 4f       	sbci	r31, 0xFE	; 254
    3794:	20 83       	st	Z, r18
    3796:	31 83       	std	Z+1, r19	; 0x01
    3798:	42 83       	std	Z+2, r20	; 0x02
    379a:	53 83       	std	Z+3, r21	; 0x03
    379c:	12 c0       	rjmp	.+36     	; 0x37c2 <LM35_u16ReadTempUpdate+0x124>
							LM35_u16ReadTempAsync(LM35_astrChannelMapping[LM35_u8Channel].u8ADCChannelMap);
	}
	else
	{
		LM35_astrChannelMapping[LM35_u8Channel].tenuLM35_ErrorState = E_NOK_CONFIG_PARM_ERROR ;
    379e:	80 91 30 02 	lds	r24, 0x0230
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	c9 01       	movw	r24, r18
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	88 0f       	add	r24, r24
    37ae:	99 1f       	adc	r25, r25
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	82 1b       	sub	r24, r18
    37b6:	93 0b       	sbc	r25, r19
    37b8:	fc 01       	movw	r30, r24
    37ba:	ef 54       	subi	r30, 0x4F	; 79
    37bc:	fe 4f       	sbci	r31, 0xFE	; 254
    37be:	84 e0       	ldi	r24, 0x04	; 4
    37c0:	80 83       	st	Z, r24
	}

}
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

000037cc <LM35_u16ReadTempSync>:


static float32 LM35_u16ReadTempSync(uint8 LM35_u8ChannelNum)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	27 97       	sbiw	r28, 0x07	; 7
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	8f 83       	std	Y+7, r24	; 0x07
	uint16 LM35Value;
	float32 Temp = 0;
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	a0 e0       	ldi	r26, 0x00	; 0
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	9a 83       	std	Y+2, r25	; 0x02
    37ee:	ab 83       	std	Y+3, r26	; 0x03
    37f0:	bc 83       	std	Y+4, r27	; 0x04
	ADC_voidStartConversion();
    37f2:	0e 94 82 14 	call	0x2904	; 0x2904 <ADC_voidStartConversion>

	LM35Value = ADC_u16ReadSync();
    37f6:	0e 94 4d 14 	call	0x289a	; 0x289a <ADC_u16ReadSync>
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05


	Temp = ( (((float)LM35Value)/(1023.0*2)) * 1000 );
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	cc 01       	movw	r24, r24
    3804:	a0 e0       	ldi	r26, 0x00	; 0
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 ec       	ldi	r19, 0xC0	; 192
    381c:	4f ef       	ldi	r20, 0xFF	; 255
    381e:	54 e4       	ldi	r21, 0x44	; 68
    3820:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	4a e7       	ldi	r20, 0x7A	; 122
    3832:	54 e4       	ldi	r21, 0x44	; 68
    3834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	89 83       	std	Y+1, r24	; 0x01
    383e:	9a 83       	std	Y+2, r25	; 0x02
    3840:	ab 83       	std	Y+3, r26	; 0x03
    3842:	bc 83       	std	Y+4, r27	; 0x04

	return Temp;
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	9a 81       	ldd	r25, Y+2	; 0x02
    3848:	ab 81       	ldd	r26, Y+3	; 0x03
    384a:	bc 81       	ldd	r27, Y+4	; 0x04

}
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	27 96       	adiw	r28, 0x07	; 7
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <LM35_u16ReadTempAsync>:
static float32 LM35_u16ReadTempAsync(uint8 LM35_u8ChannelNum)
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	27 97       	sbiw	r28, 0x07	; 7
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	8f 83       	std	Y+7, r24	; 0x07
	uint16 LM35Value;
	float Temp = 0;
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	a0 e0       	ldi	r26, 0x00	; 0
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	ab 83       	std	Y+3, r26	; 0x03
    3886:	bc 83       	std	Y+4, r27	; 0x04

	ADC_voidStartConversion();
    3888:	0e 94 82 14 	call	0x2904	; 0x2904 <ADC_voidStartConversion>
	LM35Value = ADC_u16ReadASync();
    388c:	0e 94 90 14 	call	0x2920	; 0x2920 <ADC_u16ReadASync>
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05

	Temp = ( (((float)LM35Value)/(1023.0*2)) * 1000 );
    3894:	8d 81       	ldd	r24, Y+5	; 0x05
    3896:	9e 81       	ldd	r25, Y+6	; 0x06
    3898:	cc 01       	movw	r24, r24
    389a:	a0 e0       	ldi	r26, 0x00	; 0
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	bc 01       	movw	r22, r24
    38a0:	cd 01       	movw	r24, r26
    38a2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 ec       	ldi	r19, 0xC0	; 192
    38b2:	4f ef       	ldi	r20, 0xFF	; 255
    38b4:	54 e4       	ldi	r21, 0x44	; 68
    38b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	4a e7       	ldi	r20, 0x7A	; 122
    38c8:	54 e4       	ldi	r21, 0x44	; 68
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	ab 83       	std	Y+3, r26	; 0x03
    38d8:	bc 83       	std	Y+4, r27	; 0x04

	return Temp;
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	9a 81       	ldd	r25, Y+2	; 0x02
    38de:	ab 81       	ldd	r26, Y+3	; 0x03
    38e0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	27 96       	adiw	r28, 0x07	; 7
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <LED_enuWriteValue>:
#include "LED_cfg.h"
#include "LED_priv.h"


tenuErrorStatus LED_enuWriteValue (uint8 u8LedNumCpy , uint8 u8LedValueCpy  )
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <LED_enuWriteValue+0x6>
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <LED_enuWriteValue+0x8>
    3900:	0f 92       	push	r0
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
    3906:	8a 83       	std	Y+2, r24	; 0x02
    3908:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    390a:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    390c:	8a 81       	ldd	r24, Y+2	; 0x02
    390e:	83 30       	cpi	r24, 0x03	; 3
    3910:	08 f0       	brcs	.+2      	; 0x3914 <LED_enuWriteValue+0x1c>
    3912:	7c c0       	rjmp	.+248    	; 0x3a0c <LED_enuWriteValue+0x114>
	{
		switch(u8LedValueCpy)
    3914:	8b 81       	ldd	r24, Y+3	; 0x03
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	3d 83       	std	Y+5, r19	; 0x05
    391c:	2c 83       	std	Y+4, r18	; 0x04
    391e:	8c 81       	ldd	r24, Y+4	; 0x04
    3920:	9d 81       	ldd	r25, Y+5	; 0x05
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	d9 f1       	breq	.+118    	; 0x399c <LED_enuWriteValue+0xa4>
    3926:	2c 81       	ldd	r18, Y+4	; 0x04
    3928:	3d 81       	ldd	r19, Y+5	; 0x05
    392a:	21 30       	cpi	r18, 0x01	; 1
    392c:	31 05       	cpc	r19, r1
    392e:	09 f0       	breq	.+2      	; 0x3932 <LED_enuWriteValue+0x3a>
    3930:	6a c0       	rjmp	.+212    	; 0x3a06 <LED_enuWriteValue+0x10e>
		{
			case LED_u8ON :
				if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	88 2f       	mov	r24, r24
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	fc 01       	movw	r30, r24
    393e:	ed 54       	subi	r30, 0x4D	; 77
    3940:	fe 4f       	sbci	r31, 0xFE	; 254
    3942:	80 81       	ld	r24, Z
    3944:	8a 3a       	cpi	r24, 0xAA	; 170
    3946:	71 f4       	brne	.+28     	; 0x3964 <LED_enuWriteValue+0x6c>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	88 2f       	mov	r24, r24
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	fc 01       	movw	r30, r24
    3954:	ee 54       	subi	r30, 0x4E	; 78
    3956:	fe 4f       	sbci	r31, 0xFE	; 254
    3958:	80 81       	ld	r24, Z
    395a:	61 e0       	ldi	r22, 0x01	; 1
    395c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    3960:	89 83       	std	Y+1, r24	; 0x01
    3962:	56 c0       	rjmp	.+172    	; 0x3a10 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	fc 01       	movw	r30, r24
    3970:	ed 54       	subi	r30, 0x4D	; 77
    3972:	fe 4f       	sbci	r31, 0xFE	; 254
    3974:	80 81       	ld	r24, Z
    3976:	85 35       	cpi	r24, 0x55	; 85
    3978:	71 f4       	brne	.+28     	; 0x3996 <LED_enuWriteValue+0x9e>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;			
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	88 2f       	mov	r24, r24
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	fc 01       	movw	r30, r24
    3986:	ee 54       	subi	r30, 0x4E	; 78
    3988:	fe 4f       	sbci	r31, 0xFE	; 254
    398a:	80 81       	ld	r24, Z
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    3992:	89 83       	std	Y+1, r24	; 0x01
    3994:	3d c0       	rjmp	.+122    	; 0x3a10 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    3996:	84 e0       	ldi	r24, 0x04	; 4
    3998:	89 83       	std	Y+1, r24	; 0x01
    399a:	3a c0       	rjmp	.+116    	; 0x3a10 <LED_enuWriteValue+0x118>
				}
			break ;
			case LED_u8OFF:
			   if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	fc 01       	movw	r30, r24
    39a8:	ed 54       	subi	r30, 0x4D	; 77
    39aa:	fe 4f       	sbci	r31, 0xFE	; 254
    39ac:	80 81       	ld	r24, Z
    39ae:	8a 3a       	cpi	r24, 0xAA	; 170
    39b0:	71 f4       	brne	.+28     	; 0x39ce <LED_enuWriteValue+0xd6>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	88 0f       	add	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	fc 01       	movw	r30, r24
    39be:	ee 54       	subi	r30, 0x4E	; 78
    39c0:	fe 4f       	sbci	r31, 0xFE	; 254
    39c2:	80 81       	ld	r24, Z
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    39ca:	89 83       	std	Y+1, r24	; 0x01
    39cc:	21 c0       	rjmp	.+66     	; 0x3a10 <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	88 2f       	mov	r24, r24
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	fc 01       	movw	r30, r24
    39da:	ed 54       	subi	r30, 0x4D	; 77
    39dc:	fe 4f       	sbci	r31, 0xFE	; 254
    39de:	80 81       	ld	r24, Z
    39e0:	85 35       	cpi	r24, 0x55	; 85
    39e2:	71 f4       	brne	.+28     	; 0x3a00 <LED_enuWriteValue+0x108>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;			
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	88 0f       	add	r24, r24
    39ec:	99 1f       	adc	r25, r25
    39ee:	fc 01       	movw	r30, r24
    39f0:	ee 54       	subi	r30, 0x4E	; 78
    39f2:	fe 4f       	sbci	r31, 0xFE	; 254
    39f4:	80 81       	ld	r24, Z
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	08 c0       	rjmp	.+16     	; 0x3a10 <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    3a00:	84 e0       	ldi	r24, 0x04	; 4
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <LED_enuWriteValue+0x118>
				}					
			break ;
			default :
				enuReturnStatLoc =E_NOK_PARAM_OUT_OF_RANGE ;
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <LED_enuWriteValue+0x118>
            break ;				
		}
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3a0c:	82 e0       	ldi	r24, 0x02	; 2
    3a0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <LED_enuToggle>:

tenuErrorStatus LED_enuToggle (uint8 u8LedNumCpy )
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <LED_enuToggle+0x6>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    3a2e:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
    3a32:	83 30       	cpi	r24, 0x03	; 3
    3a34:	68 f4       	brcc	.+26     	; 0x3a50 <LED_enuToggle+0x2e>
	{
		enuReturnStatLoc = DIO_enuTogglePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap);
    3a36:	8a 81       	ldd	r24, Y+2	; 0x02
    3a38:	88 2f       	mov	r24, r24
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	fc 01       	movw	r30, r24
    3a42:	ee 54       	subi	r30, 0x4E	; 78
    3a44:	fe 4f       	sbci	r31, 0xFE	; 254
    3a46:	80 81       	ld	r24, Z
    3a48:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_enuTogglePin>
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <LED_enuToggle+0x32>
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    3a50:	82 e0       	ldi	r24, 0x02	; 2
    3a52:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <LED_enuAllOff>:


tenuErrorStatus LED_enuAllOff (void)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <LED_enuAllOff+0x6>
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntCpy;
	tenuErrorStatus enuReturnStatLoc = E_OK ;
    3a6a:	19 82       	std	Y+1, r1	; 0x01
	for(u8CntCpy = 0 ; u8CntCpy <LED_MAX_NUM ; u8CntCpy++)
    3a6c:	1a 82       	std	Y+2, r1	; 0x02
    3a6e:	07 c0       	rjmp	.+14     	; 0x3a7e <LED_enuAllOff+0x1e>
	{
		LED_enuWriteValue( u8CntCpy , LED_u8OFF);
    3a70:	8a 81       	ldd	r24, Y+2	; 0x02
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <LED_enuWriteValue>

tenuErrorStatus LED_enuAllOff (void)
{
	uint8 u8CntCpy;
	tenuErrorStatus enuReturnStatLoc = E_OK ;
	for(u8CntCpy = 0 ; u8CntCpy <LED_MAX_NUM ; u8CntCpy++)
    3a78:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7a:	8f 5f       	subi	r24, 0xFF	; 255
    3a7c:	8a 83       	std	Y+2, r24	; 0x02
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	83 30       	cpi	r24, 0x03	; 3
    3a82:	b0 f3       	brcs	.-20     	; 0x3a70 <LED_enuAllOff+0x10>
	{
		LED_enuWriteValue( u8CntCpy , LED_u8OFF);
	}
	return enuReturnStatLoc;
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	08 95       	ret

00003a90 <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
    3a90:	0f 93       	push	r16
    3a92:	1f 93       	push	r17
    3a94:	df 93       	push	r29
    3a96:	cf 93       	push	r28
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	c6 5c       	subi	r28, 0xC6	; 198
    3a9e:	d0 40       	sbci	r29, 0x00	; 0
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    3aaa:	fe 01       	movw	r30, r28
    3aac:	ea 53       	subi	r30, 0x3A	; 58
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	10 82       	st	Z, r1
    3ab2:	0c 94 42 28 	jmp	0x5084	; 0x5084 <LCD_voidInit+0x15f4>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ef 53       	subi	r30, 0x3F	; 63
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a0 ef       	ldi	r26, 0xF0	; 240
    3ac2:	b1 e4       	ldi	r27, 0x41	; 65
    3ac4:	80 83       	st	Z, r24
    3ac6:	91 83       	std	Z+1, r25	; 0x01
    3ac8:	a2 83       	std	Z+2, r26	; 0x02
    3aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	8e 01       	movw	r16, r28
    3ace:	03 54       	subi	r16, 0x43	; 67
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ef 53       	subi	r30, 0x3F	; 63
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	f8 01       	movw	r30, r16
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3afa:	fe 01       	movw	r30, r28
    3afc:	e3 54       	subi	r30, 0x43	; 67
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	44 f4       	brge	.+16     	; 0x3b28 <LCD_voidInit+0x98>
		__ticks = 1;
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e5 54       	subi	r30, 0x45	; 69
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	64 c0       	rjmp	.+200    	; 0x3bf0 <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e3 54       	subi	r30, 0x43	; 67
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	3f ef       	ldi	r19, 0xFF	; 255
    3b3a:	4f e7       	ldi	r20, 0x7F	; 127
    3b3c:	57 e4       	ldi	r21, 0x47	; 71
    3b3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b42:	18 16       	cp	r1, r24
    3b44:	0c f0       	brlt	.+2      	; 0x3b48 <LCD_voidInit+0xb8>
    3b46:	43 c0       	rjmp	.+134    	; 0x3bce <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ef 53       	subi	r30, 0x3F	; 63
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	60 81       	ld	r22, Z
    3b50:	71 81       	ldd	r23, Z+1	; 0x01
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e2       	ldi	r20, 0x20	; 32
    3b5c:	51 e4       	ldi	r21, 0x41	; 65
    3b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	8e 01       	movw	r16, r28
    3b68:	05 54       	subi	r16, 0x45	; 69
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	f8 01       	movw	r30, r16
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
    3b7e:	1f c0       	rjmp	.+62     	; 0x3bbe <LCD_voidInit+0x12e>
    3b80:	fe 01       	movw	r30, r28
    3b82:	e7 54       	subi	r30, 0x47	; 71
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	88 ec       	ldi	r24, 0xC8	; 200
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e7 54       	subi	r30, 0x47	; 71
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <LCD_voidInit+0x108>
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e7 54       	subi	r30, 0x47	; 71
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	de 01       	movw	r26, r28
    3ba8:	a5 54       	subi	r26, 0x45	; 69
    3baa:	bf 4f       	sbci	r27, 0xFF	; 255
    3bac:	fe 01       	movw	r30, r28
    3bae:	e5 54       	subi	r30, 0x45	; 69
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	11 96       	adiw	r26, 0x01	; 1
    3bba:	9c 93       	st	X, r25
    3bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e5 54       	subi	r30, 0x45	; 69
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	d1 f6       	brne	.-76     	; 0x3b80 <LCD_voidInit+0xf0>
    3bcc:	28 c0       	rjmp	.+80     	; 0x3c1e <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	8e 01       	movw	r16, r28
    3bd0:	05 54       	subi	r16, 0x45	; 69
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e3 54       	subi	r30, 0x43	; 67
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	60 81       	ld	r22, Z
    3bdc:	71 81       	ldd	r23, Z+1	; 0x01
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	f8 01       	movw	r30, r16
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
    3bf0:	de 01       	movw	r26, r28
    3bf2:	a9 54       	subi	r26, 0x49	; 73
    3bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e5 54       	subi	r30, 0x45	; 69
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 81       	ld	r24, Z
    3bfe:	91 81       	ldd	r25, Z+1	; 0x01
    3c00:	11 96       	adiw	r26, 0x01	; 1
    3c02:	9c 93       	st	X, r25
    3c04:	8e 93       	st	-X, r24
    3c06:	fe 01       	movw	r30, r28
    3c08:	e9 54       	subi	r30, 0x49	; 73
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <LCD_voidInit+0x180>
    3c14:	fe 01       	movw	r30, r28
    3c16:	e9 54       	subi	r30, 0x49	; 73
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ea 53       	subi	r30, 0x3A	; 58
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	80 81       	ld	r24, Z
    3c26:	28 2f       	mov	r18, r24
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	c9 01       	movw	r24, r18
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	82 0f       	add	r24, r18
    3c32:	93 1f       	adc	r25, r19
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	e8 54       	subi	r30, 0x48	; 72
    3c40:	fe 4f       	sbci	r31, 0xFE	; 254
    3c42:	80 81       	ld	r24, Z
    3c44:	82 95       	swap	r24
    3c46:	86 95       	lsr	r24
    3c48:	87 70       	andi	r24, 0x07	; 7
    3c4a:	81 70       	andi	r24, 0x01	; 1
    3c4c:	81 30       	cpi	r24, 0x01	; 1
    3c4e:	09 f0       	breq	.+2      	; 0x3c52 <LCD_voidInit+0x1c2>
    3c50:	bf c3       	rjmp	.+1918   	; 0x43d0 <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
    3c52:	fe 01       	movw	r30, r28
    3c54:	ea 53       	subi	r30, 0x3A	; 58
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	80 81       	ld	r24, Z
    3c5a:	28 2f       	mov	r18, r24
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	c9 01       	movw	r24, r18
    3c60:	88 0f       	add	r24, r24
    3c62:	99 1f       	adc	r25, r25
    3c64:	82 0f       	add	r24, r18
    3c66:	93 1f       	adc	r25, r19
    3c68:	88 0f       	add	r24, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	fc 01       	movw	r30, r24
    3c72:	e8 54       	subi	r30, 0x48	; 72
    3c74:	fe 4f       	sbci	r31, 0xFE	; 254
    3c76:	80 81       	ld	r24, Z
    3c78:	81 70       	andi	r24, 0x01	; 1
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	88 0f       	add	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	48 2f       	mov	r20, r24
    3c8c:	40 63       	ori	r20, 0x30	; 48
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ea 53       	subi	r30, 0x3A	; 58
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	28 2f       	mov	r18, r24
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	c9 01       	movw	r24, r18
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	82 0f       	add	r24, r18
    3ca2:	93 1f       	adc	r25, r19
    3ca4:	88 0f       	add	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	88 0f       	add	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	fc 01       	movw	r30, r24
    3cae:	e8 54       	subi	r30, 0x48	; 72
    3cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb2:	80 81       	ld	r24, Z
    3cb4:	86 95       	lsr	r24
    3cb6:	81 70       	andi	r24, 0x01	; 1
    3cb8:	88 2f       	mov	r24, r24
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	88 0f       	add	r24, r24
    3cc2:	99 1f       	adc	r25, r25
    3cc4:	84 2b       	or	r24, r20
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	eb 53       	subi	r30, 0x3B	; 59
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ea 53       	subi	r30, 0x3A	; 58
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	de 01       	movw	r26, r28
    3cd6:	ab 53       	subi	r26, 0x3B	; 59
    3cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	6c 91       	ld	r22, X
    3cde:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	ed 54       	subi	r30, 0x4D	; 77
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	a0 e8       	ldi	r26, 0x80	; 128
    3cee:	bf e3       	ldi	r27, 0x3F	; 63
    3cf0:	80 83       	st	Z, r24
    3cf2:	91 83       	std	Z+1, r25	; 0x01
    3cf4:	a2 83       	std	Z+2, r26	; 0x02
    3cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf8:	8e 01       	movw	r16, r28
    3cfa:	01 55       	subi	r16, 0x51	; 81
    3cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 54       	subi	r30, 0x4D	; 77
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	4a ef       	ldi	r20, 0xFA	; 250
    3d12:	54 e4       	ldi	r21, 0x44	; 68
    3d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	f8 01       	movw	r30, r16
    3d1e:	80 83       	st	Z, r24
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	a2 83       	std	Z+2, r26	; 0x02
    3d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d26:	fe 01       	movw	r30, r28
    3d28:	e1 55       	subi	r30, 0x51	; 81
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	60 81       	ld	r22, Z
    3d2e:	71 81       	ldd	r23, Z+1	; 0x01
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e8       	ldi	r20, 0x80	; 128
    3d3a:	5f e3       	ldi	r21, 0x3F	; 63
    3d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d40:	88 23       	and	r24, r24
    3d42:	44 f4       	brge	.+16     	; 0x3d54 <LCD_voidInit+0x2c4>
		__ticks = 1;
    3d44:	fe 01       	movw	r30, r28
    3d46:	e3 55       	subi	r30, 0x53	; 83
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
    3d52:	64 c0       	rjmp	.+200    	; 0x3e1c <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    3d54:	fe 01       	movw	r30, r28
    3d56:	e1 55       	subi	r30, 0x51	; 81
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	60 81       	ld	r22, Z
    3d5c:	71 81       	ldd	r23, Z+1	; 0x01
    3d5e:	82 81       	ldd	r24, Z+2	; 0x02
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	3f ef       	ldi	r19, 0xFF	; 255
    3d66:	4f e7       	ldi	r20, 0x7F	; 127
    3d68:	57 e4       	ldi	r21, 0x47	; 71
    3d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6e:	18 16       	cp	r1, r24
    3d70:	0c f0       	brlt	.+2      	; 0x3d74 <LCD_voidInit+0x2e4>
    3d72:	43 c0       	rjmp	.+134    	; 0x3dfa <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d74:	fe 01       	movw	r30, r28
    3d76:	ed 54       	subi	r30, 0x4D	; 77
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	60 81       	ld	r22, Z
    3d7c:	71 81       	ldd	r23, Z+1	; 0x01
    3d7e:	82 81       	ldd	r24, Z+2	; 0x02
    3d80:	93 81       	ldd	r25, Z+3	; 0x03
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	40 e2       	ldi	r20, 0x20	; 32
    3d88:	51 e4       	ldi	r21, 0x41	; 65
    3d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	8e 01       	movw	r16, r28
    3d94:	03 55       	subi	r16, 0x53	; 83
    3d96:	1f 4f       	sbci	r17, 0xFF	; 255
    3d98:	bc 01       	movw	r22, r24
    3d9a:	cd 01       	movw	r24, r26
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	f8 01       	movw	r30, r16
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	80 83       	st	Z, r24
    3daa:	1f c0       	rjmp	.+62     	; 0x3dea <LCD_voidInit+0x35a>
    3dac:	fe 01       	movw	r30, r28
    3dae:	e5 55       	subi	r30, 0x55	; 85
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	88 ec       	ldi	r24, 0xC8	; 200
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	80 83       	st	Z, r24
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e5 55       	subi	r30, 0x55	; 85
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <LCD_voidInit+0x334>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e5 55       	subi	r30, 0x55	; 85
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd2:	de 01       	movw	r26, r28
    3dd4:	a3 55       	subi	r26, 0x53	; 83
    3dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e3 55       	subi	r30, 0x53	; 83
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	11 96       	adiw	r26, 0x01	; 1
    3de6:	9c 93       	st	X, r25
    3de8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	fe 01       	movw	r30, r28
    3dec:	e3 55       	subi	r30, 0x53	; 83
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	d1 f6       	brne	.-76     	; 0x3dac <LCD_voidInit+0x31c>
    3df8:	27 c0       	rjmp	.+78     	; 0x3e48 <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfa:	8e 01       	movw	r16, r28
    3dfc:	03 55       	subi	r16, 0x53	; 83
    3dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3e00:	fe 01       	movw	r30, r28
    3e02:	e1 55       	subi	r30, 0x51	; 81
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	f8 01       	movw	r30, r16
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	80 83       	st	Z, r24
    3e1c:	de 01       	movw	r26, r28
    3e1e:	a7 55       	subi	r26, 0x57	; 87
    3e20:	bf 4f       	sbci	r27, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	e3 55       	subi	r30, 0x53	; 83
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	8d 93       	st	X+, r24
    3e2e:	9c 93       	st	X, r25
    3e30:	fe 01       	movw	r30, r28
    3e32:	e7 55       	subi	r30, 0x57	; 87
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 81       	ld	r24, Z
    3e38:	91 81       	ldd	r25, Z+1	; 0x01
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	f1 f7       	brne	.-4      	; 0x3e3a <LCD_voidInit+0x3aa>
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e7 55       	subi	r30, 0x57	; 87
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	91 83       	std	Z+1, r25	; 0x01
    3e46:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
    3e48:	fe 01       	movw	r30, r28
    3e4a:	ea 53       	subi	r30, 0x3A	; 58
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	80 81       	ld	r24, Z
    3e50:	28 2f       	mov	r18, r24
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	c9 01       	movw	r24, r18
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	82 0f       	add	r24, r18
    3e5c:	93 1f       	adc	r25, r19
    3e5e:	88 0f       	add	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	88 0f       	add	r24, r24
    3e64:	99 1f       	adc	r25, r25
    3e66:	fc 01       	movw	r30, r24
    3e68:	e8 54       	subi	r30, 0x48	; 72
    3e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6c:	80 81       	ld	r24, Z
    3e6e:	86 95       	lsr	r24
    3e70:	86 95       	lsr	r24
    3e72:	81 70       	andi	r24, 0x01	; 1
    3e74:	88 2f       	mov	r24, r24
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	88 0f       	add	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	48 2f       	mov	r20, r24
    3e82:	48 60       	ori	r20, 0x08	; 8
    3e84:	fe 01       	movw	r30, r28
    3e86:	ea 53       	subi	r30, 0x3A	; 58
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	80 81       	ld	r24, Z
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	c9 01       	movw	r24, r18
    3e92:	88 0f       	add	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	82 0f       	add	r24, r18
    3e98:	93 1f       	adc	r25, r19
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	e8 54       	subi	r30, 0x48	; 72
    3ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea8:	80 81       	ld	r24, Z
    3eaa:	86 95       	lsr	r24
    3eac:	86 95       	lsr	r24
    3eae:	86 95       	lsr	r24
    3eb0:	81 70       	andi	r24, 0x01	; 1
    3eb2:	88 2f       	mov	r24, r24
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	48 2b       	or	r20, r24
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	ea 53       	subi	r30, 0x3A	; 58
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 81       	ld	r24, Z
    3ec4:	28 2f       	mov	r18, r24
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	c9 01       	movw	r24, r18
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	82 0f       	add	r24, r18
    3ed0:	93 1f       	adc	r25, r19
    3ed2:	88 0f       	add	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	88 0f       	add	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	fc 01       	movw	r30, r24
    3edc:	e8 54       	subi	r30, 0x48	; 72
    3ede:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee0:	80 81       	ld	r24, Z
    3ee2:	82 95       	swap	r24
    3ee4:	8f 70       	andi	r24, 0x0F	; 15
    3ee6:	81 70       	andi	r24, 0x01	; 1
    3ee8:	84 2b       	or	r24, r20
    3eea:	fe 01       	movw	r30, r28
    3eec:	eb 53       	subi	r30, 0x3B	; 59
    3eee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef0:	80 83       	st	Z, r24
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ea 53       	subi	r30, 0x3A	; 58
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	de 01       	movw	r26, r28
    3efa:	ab 53       	subi	r26, 0x3B	; 59
    3efc:	bf 4f       	sbci	r27, 0xFF	; 255
    3efe:	80 81       	ld	r24, Z
    3f00:	6c 91       	ld	r22, X
    3f02:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    3f06:	fe 01       	movw	r30, r28
    3f08:	eb 55       	subi	r30, 0x5B	; 91
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	a0 e8       	ldi	r26, 0x80	; 128
    3f12:	bf e3       	ldi	r27, 0x3F	; 63
    3f14:	80 83       	st	Z, r24
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	a2 83       	std	Z+2, r26	; 0x02
    3f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1c:	8e 01       	movw	r16, r28
    3f1e:	0f 55       	subi	r16, 0x5F	; 95
    3f20:	1f 4f       	sbci	r17, 0xFF	; 255
    3f22:	fe 01       	movw	r30, r28
    3f24:	eb 55       	subi	r30, 0x5B	; 91
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	4a ef       	ldi	r20, 0xFA	; 250
    3f36:	54 e4       	ldi	r21, 0x44	; 68
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	f8 01       	movw	r30, r16
    3f42:	80 83       	st	Z, r24
    3f44:	91 83       	std	Z+1, r25	; 0x01
    3f46:	a2 83       	std	Z+2, r26	; 0x02
    3f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ef 55       	subi	r30, 0x5F	; 95
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e8       	ldi	r20, 0x80	; 128
    3f5e:	5f e3       	ldi	r21, 0x3F	; 63
    3f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f64:	88 23       	and	r24, r24
    3f66:	44 f4       	brge	.+16     	; 0x3f78 <LCD_voidInit+0x4e8>
		__ticks = 1;
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e1 56       	subi	r30, 0x61	; 97
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	80 83       	st	Z, r24
    3f76:	64 c0       	rjmp	.+200    	; 0x4040 <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    3f78:	fe 01       	movw	r30, r28
    3f7a:	ef 55       	subi	r30, 0x5F	; 95
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	60 81       	ld	r22, Z
    3f80:	71 81       	ldd	r23, Z+1	; 0x01
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	93 81       	ldd	r25, Z+3	; 0x03
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	3f ef       	ldi	r19, 0xFF	; 255
    3f8a:	4f e7       	ldi	r20, 0x7F	; 127
    3f8c:	57 e4       	ldi	r21, 0x47	; 71
    3f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f92:	18 16       	cp	r1, r24
    3f94:	0c f0       	brlt	.+2      	; 0x3f98 <LCD_voidInit+0x508>
    3f96:	43 c0       	rjmp	.+134    	; 0x401e <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f98:	fe 01       	movw	r30, r28
    3f9a:	eb 55       	subi	r30, 0x5B	; 91
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8e 01       	movw	r16, r28
    3fb8:	01 56       	subi	r16, 0x61	; 97
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	f8 01       	movw	r30, r16
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    3fce:	1f c0       	rjmp	.+62     	; 0x400e <LCD_voidInit+0x57e>
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e3 56       	subi	r30, 0x63	; 99
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	88 ec       	ldi	r24, 0xC8	; 200
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	80 83       	st	Z, r24
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e3 56       	subi	r30, 0x63	; 99
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <LCD_voidInit+0x558>
    3fec:	fe 01       	movw	r30, r28
    3fee:	e3 56       	subi	r30, 0x63	; 99
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff6:	de 01       	movw	r26, r28
    3ff8:	a1 56       	subi	r26, 0x61	; 97
    3ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e1 56       	subi	r30, 0x61	; 97
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	11 96       	adiw	r26, 0x01	; 1
    400a:	9c 93       	st	X, r25
    400c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400e:	fe 01       	movw	r30, r28
    4010:	e1 56       	subi	r30, 0x61	; 97
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	80 81       	ld	r24, Z
    4016:	91 81       	ldd	r25, Z+1	; 0x01
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	d1 f6       	brne	.-76     	; 0x3fd0 <LCD_voidInit+0x540>
    401c:	27 c0       	rjmp	.+78     	; 0x406c <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401e:	8e 01       	movw	r16, r28
    4020:	01 56       	subi	r16, 0x61	; 97
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
    4024:	fe 01       	movw	r30, r28
    4026:	ef 55       	subi	r30, 0x5F	; 95
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	60 81       	ld	r22, Z
    402c:	71 81       	ldd	r23, Z+1	; 0x01
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	93 81       	ldd	r25, Z+3	; 0x03
    4032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	f8 01       	movw	r30, r16
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
    4040:	de 01       	movw	r26, r28
    4042:	a5 56       	subi	r26, 0x65	; 101
    4044:	bf 4f       	sbci	r27, 0xFF	; 255
    4046:	fe 01       	movw	r30, r28
    4048:	e1 56       	subi	r30, 0x61	; 97
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	91 81       	ldd	r25, Z+1	; 0x01
    4050:	8d 93       	st	X+, r24
    4052:	9c 93       	st	X, r25
    4054:	fe 01       	movw	r30, r28
    4056:	e5 56       	subi	r30, 0x65	; 101
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	80 81       	ld	r24, Z
    405c:	91 81       	ldd	r25, Z+1	; 0x01
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	f1 f7       	brne	.-4      	; 0x405e <LCD_voidInit+0x5ce>
    4062:	fe 01       	movw	r30, r28
    4064:	e5 56       	subi	r30, 0x65	; 101
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	91 83       	std	Z+1, r25	; 0x01
    406a:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
    406c:	fe 01       	movw	r30, r28
    406e:	ea 53       	subi	r30, 0x3A	; 58
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	61 e0       	ldi	r22, 0x01	; 1
    4076:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    407a:	fe 01       	movw	r30, r28
    407c:	e9 56       	subi	r30, 0x69	; 105
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e0       	ldi	r26, 0x00	; 0
    4086:	b0 e4       	ldi	r27, 0x40	; 64
    4088:	80 83       	st	Z, r24
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	a2 83       	std	Z+2, r26	; 0x02
    408e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4090:	8e 01       	movw	r16, r28
    4092:	0d 56       	subi	r16, 0x6D	; 109
    4094:	1f 4f       	sbci	r17, 0xFF	; 255
    4096:	fe 01       	movw	r30, r28
    4098:	e9 56       	subi	r30, 0x69	; 105
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	60 81       	ld	r22, Z
    409e:	71 81       	ldd	r23, Z+1	; 0x01
    40a0:	82 81       	ldd	r24, Z+2	; 0x02
    40a2:	93 81       	ldd	r25, Z+3	; 0x03
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	4a ef       	ldi	r20, 0xFA	; 250
    40aa:	54 e4       	ldi	r21, 0x44	; 68
    40ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	f8 01       	movw	r30, r16
    40b6:	80 83       	st	Z, r24
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	a2 83       	std	Z+2, r26	; 0x02
    40bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40be:	fe 01       	movw	r30, r28
    40c0:	ed 56       	subi	r30, 0x6D	; 109
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	60 81       	ld	r22, Z
    40c6:	71 81       	ldd	r23, Z+1	; 0x01
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e8       	ldi	r20, 0x80	; 128
    40d2:	5f e3       	ldi	r21, 0x3F	; 63
    40d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40d8:	88 23       	and	r24, r24
    40da:	44 f4       	brge	.+16     	; 0x40ec <LCD_voidInit+0x65c>
		__ticks = 1;
    40dc:	fe 01       	movw	r30, r28
    40de:	ef 56       	subi	r30, 0x6F	; 111
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	91 83       	std	Z+1, r25	; 0x01
    40e8:	80 83       	st	Z, r24
    40ea:	64 c0       	rjmp	.+200    	; 0x41b4 <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    40ec:	fe 01       	movw	r30, r28
    40ee:	ed 56       	subi	r30, 0x6D	; 109
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	60 81       	ld	r22, Z
    40f4:	71 81       	ldd	r23, Z+1	; 0x01
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	3f ef       	ldi	r19, 0xFF	; 255
    40fe:	4f e7       	ldi	r20, 0x7F	; 127
    4100:	57 e4       	ldi	r21, 0x47	; 71
    4102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4106:	18 16       	cp	r1, r24
    4108:	0c f0       	brlt	.+2      	; 0x410c <LCD_voidInit+0x67c>
    410a:	43 c0       	rjmp	.+134    	; 0x4192 <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410c:	fe 01       	movw	r30, r28
    410e:	e9 56       	subi	r30, 0x69	; 105
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	60 81       	ld	r22, Z
    4114:	71 81       	ldd	r23, Z+1	; 0x01
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	8e 01       	movw	r16, r28
    412c:	0f 56       	subi	r16, 0x6F	; 111
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	f8 01       	movw	r30, r16
    413e:	91 83       	std	Z+1, r25	; 0x01
    4140:	80 83       	st	Z, r24
    4142:	1f c0       	rjmp	.+62     	; 0x4182 <LCD_voidInit+0x6f2>
    4144:	fe 01       	movw	r30, r28
    4146:	e1 57       	subi	r30, 0x71	; 113
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	88 ec       	ldi	r24, 0xC8	; 200
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	91 83       	std	Z+1, r25	; 0x01
    4150:	80 83       	st	Z, r24
    4152:	fe 01       	movw	r30, r28
    4154:	e1 57       	subi	r30, 0x71	; 113
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	80 81       	ld	r24, Z
    415a:	91 81       	ldd	r25, Z+1	; 0x01
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <LCD_voidInit+0x6cc>
    4160:	fe 01       	movw	r30, r28
    4162:	e1 57       	subi	r30, 0x71	; 113
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416a:	de 01       	movw	r26, r28
    416c:	af 56       	subi	r26, 0x6F	; 111
    416e:	bf 4f       	sbci	r27, 0xFF	; 255
    4170:	fe 01       	movw	r30, r28
    4172:	ef 56       	subi	r30, 0x6F	; 111
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	80 81       	ld	r24, Z
    4178:	91 81       	ldd	r25, Z+1	; 0x01
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	11 96       	adiw	r26, 0x01	; 1
    417e:	9c 93       	st	X, r25
    4180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4182:	fe 01       	movw	r30, r28
    4184:	ef 56       	subi	r30, 0x6F	; 111
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	80 81       	ld	r24, Z
    418a:	91 81       	ldd	r25, Z+1	; 0x01
    418c:	00 97       	sbiw	r24, 0x00	; 0
    418e:	d1 f6       	brne	.-76     	; 0x4144 <LCD_voidInit+0x6b4>
    4190:	27 c0       	rjmp	.+78     	; 0x41e0 <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4192:	8e 01       	movw	r16, r28
    4194:	0f 56       	subi	r16, 0x6F	; 111
    4196:	1f 4f       	sbci	r17, 0xFF	; 255
    4198:	fe 01       	movw	r30, r28
    419a:	ed 56       	subi	r30, 0x6D	; 109
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	60 81       	ld	r22, Z
    41a0:	71 81       	ldd	r23, Z+1	; 0x01
    41a2:	82 81       	ldd	r24, Z+2	; 0x02
    41a4:	93 81       	ldd	r25, Z+3	; 0x03
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	f8 01       	movw	r30, r16
    41b0:	91 83       	std	Z+1, r25	; 0x01
    41b2:	80 83       	st	Z, r24
    41b4:	de 01       	movw	r26, r28
    41b6:	a3 57       	subi	r26, 0x73	; 115
    41b8:	bf 4f       	sbci	r27, 0xFF	; 255
    41ba:	fe 01       	movw	r30, r28
    41bc:	ef 56       	subi	r30, 0x6F	; 111
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	80 81       	ld	r24, Z
    41c2:	91 81       	ldd	r25, Z+1	; 0x01
    41c4:	8d 93       	st	X+, r24
    41c6:	9c 93       	st	X, r25
    41c8:	fe 01       	movw	r30, r28
    41ca:	e3 57       	subi	r30, 0x73	; 115
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	f1 f7       	brne	.-4      	; 0x41d2 <LCD_voidInit+0x742>
    41d6:	fe 01       	movw	r30, r28
    41d8:	e3 57       	subi	r30, 0x73	; 115
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	80 83       	st	Z, r24
		    _delay_ms(2);
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
    41e0:	fe 01       	movw	r30, r28
    41e2:	ea 53       	subi	r30, 0x3A	; 58
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	28 2f       	mov	r18, r24
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	c9 01       	movw	r24, r18
    41ee:	88 0f       	add	r24, r24
    41f0:	99 1f       	adc	r25, r25
    41f2:	82 0f       	add	r24, r18
    41f4:	93 1f       	adc	r25, r19
    41f6:	88 0f       	add	r24, r24
    41f8:	99 1f       	adc	r25, r25
    41fa:	88 0f       	add	r24, r24
    41fc:	99 1f       	adc	r25, r25
    41fe:	fc 01       	movw	r30, r24
    4200:	e8 54       	subi	r30, 0x48	; 72
    4202:	fe 4f       	sbci	r31, 0xFE	; 254
    4204:	80 81       	ld	r24, Z
    4206:	82 95       	swap	r24
    4208:	86 95       	lsr	r24
    420a:	86 95       	lsr	r24
    420c:	83 70       	andi	r24, 0x03	; 3
    420e:	81 70       	andi	r24, 0x01	; 1
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	48 2f       	mov	r20, r24
    421a:	44 60       	ori	r20, 0x04	; 4
    421c:	fe 01       	movw	r30, r28
    421e:	ea 53       	subi	r30, 0x3A	; 58
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 81       	ld	r24, Z
    4224:	28 2f       	mov	r18, r24
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	c9 01       	movw	r24, r18
    422a:	88 0f       	add	r24, r24
    422c:	99 1f       	adc	r25, r25
    422e:	82 0f       	add	r24, r18
    4230:	93 1f       	adc	r25, r19
    4232:	88 0f       	add	r24, r24
    4234:	99 1f       	adc	r25, r25
    4236:	88 0f       	add	r24, r24
    4238:	99 1f       	adc	r25, r25
    423a:	fc 01       	movw	r30, r24
    423c:	e8 54       	subi	r30, 0x48	; 72
    423e:	fe 4f       	sbci	r31, 0xFE	; 254
    4240:	80 81       	ld	r24, Z
    4242:	88 1f       	adc	r24, r24
    4244:	88 27       	eor	r24, r24
    4246:	88 1f       	adc	r24, r24
    4248:	84 2b       	or	r24, r20
    424a:	fe 01       	movw	r30, r28
    424c:	eb 53       	subi	r30, 0x3B	; 59
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    4252:	fe 01       	movw	r30, r28
    4254:	ea 53       	subi	r30, 0x3A	; 58
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	de 01       	movw	r26, r28
    425a:	ab 53       	subi	r26, 0x3B	; 59
    425c:	bf 4f       	sbci	r27, 0xFF	; 255
    425e:	80 81       	ld	r24, Z
    4260:	6c 91       	ld	r22, X
    4262:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4266:	fe 01       	movw	r30, r28
    4268:	e7 57       	subi	r30, 0x77	; 119
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	a0 e0       	ldi	r26, 0x00	; 0
    4272:	b0 e4       	ldi	r27, 0x40	; 64
    4274:	80 83       	st	Z, r24
    4276:	91 83       	std	Z+1, r25	; 0x01
    4278:	a2 83       	std	Z+2, r26	; 0x02
    427a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427c:	8e 01       	movw	r16, r28
    427e:	0b 57       	subi	r16, 0x7B	; 123
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	fe 01       	movw	r30, r28
    4284:	e7 57       	subi	r30, 0x77	; 119
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	60 81       	ld	r22, Z
    428a:	71 81       	ldd	r23, Z+1	; 0x01
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	93 81       	ldd	r25, Z+3	; 0x03
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	4a ef       	ldi	r20, 0xFA	; 250
    4296:	54 e4       	ldi	r21, 0x44	; 68
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	f8 01       	movw	r30, r16
    42a2:	80 83       	st	Z, r24
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	a2 83       	std	Z+2, r26	; 0x02
    42a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42aa:	fe 01       	movw	r30, r28
    42ac:	eb 57       	subi	r30, 0x7B	; 123
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	60 81       	ld	r22, Z
    42b2:	71 81       	ldd	r23, Z+1	; 0x01
    42b4:	82 81       	ldd	r24, Z+2	; 0x02
    42b6:	93 81       	ldd	r25, Z+3	; 0x03
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e8       	ldi	r20, 0x80	; 128
    42be:	5f e3       	ldi	r21, 0x3F	; 63
    42c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42c4:	88 23       	and	r24, r24
    42c6:	44 f4       	brge	.+16     	; 0x42d8 <LCD_voidInit+0x848>
		__ticks = 1;
    42c8:	fe 01       	movw	r30, r28
    42ca:	ed 57       	subi	r30, 0x7D	; 125
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	80 83       	st	Z, r24
    42d6:	64 c0       	rjmp	.+200    	; 0x43a0 <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    42d8:	fe 01       	movw	r30, r28
    42da:	eb 57       	subi	r30, 0x7B	; 123
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	3f ef       	ldi	r19, 0xFF	; 255
    42ea:	4f e7       	ldi	r20, 0x7F	; 127
    42ec:	57 e4       	ldi	r21, 0x47	; 71
    42ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f2:	18 16       	cp	r1, r24
    42f4:	0c f0       	brlt	.+2      	; 0x42f8 <LCD_voidInit+0x868>
    42f6:	43 c0       	rjmp	.+134    	; 0x437e <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f8:	fe 01       	movw	r30, r28
    42fa:	e7 57       	subi	r30, 0x77	; 119
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	82 81       	ldd	r24, Z+2	; 0x02
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	40 e2       	ldi	r20, 0x20	; 32
    430c:	51 e4       	ldi	r21, 0x41	; 65
    430e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	8e 01       	movw	r16, r28
    4318:	0d 57       	subi	r16, 0x7D	; 125
    431a:	1f 4f       	sbci	r17, 0xFF	; 255
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	f8 01       	movw	r30, r16
    432a:	91 83       	std	Z+1, r25	; 0x01
    432c:	80 83       	st	Z, r24
    432e:	1f c0       	rjmp	.+62     	; 0x436e <LCD_voidInit+0x8de>
    4330:	fe 01       	movw	r30, r28
    4332:	ef 57       	subi	r30, 0x7F	; 127
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	88 ec       	ldi	r24, 0xC8	; 200
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	fe 01       	movw	r30, r28
    4340:	ef 57       	subi	r30, 0x7F	; 127
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	f1 f7       	brne	.-4      	; 0x4348 <LCD_voidInit+0x8b8>
    434c:	fe 01       	movw	r30, r28
    434e:	ef 57       	subi	r30, 0x7F	; 127
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4356:	de 01       	movw	r26, r28
    4358:	ad 57       	subi	r26, 0x7D	; 125
    435a:	bf 4f       	sbci	r27, 0xFF	; 255
    435c:	fe 01       	movw	r30, r28
    435e:	ed 57       	subi	r30, 0x7D	; 125
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	11 96       	adiw	r26, 0x01	; 1
    436a:	9c 93       	st	X, r25
    436c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436e:	fe 01       	movw	r30, r28
    4370:	ed 57       	subi	r30, 0x7D	; 125
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	80 81       	ld	r24, Z
    4376:	91 81       	ldd	r25, Z+1	; 0x01
    4378:	00 97       	sbiw	r24, 0x00	; 0
    437a:	d1 f6       	brne	.-76     	; 0x4330 <LCD_voidInit+0x8a0>
    437c:	7a c6       	rjmp	.+3316   	; 0x5072 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    437e:	8e 01       	movw	r16, r28
    4380:	0d 57       	subi	r16, 0x7D	; 125
    4382:	1f 4f       	sbci	r17, 0xFF	; 255
    4384:	fe 01       	movw	r30, r28
    4386:	eb 57       	subi	r30, 0x7B	; 123
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	60 81       	ld	r22, Z
    438c:	71 81       	ldd	r23, Z+1	; 0x01
    438e:	82 81       	ldd	r24, Z+2	; 0x02
    4390:	93 81       	ldd	r25, Z+3	; 0x03
    4392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	f8 01       	movw	r30, r16
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	80 83       	st	Z, r24
    43a0:	de 01       	movw	r26, r28
    43a2:	a1 58       	subi	r26, 0x81	; 129
    43a4:	bf 4f       	sbci	r27, 0xFF	; 255
    43a6:	fe 01       	movw	r30, r28
    43a8:	ed 57       	subi	r30, 0x7D	; 125
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	80 81       	ld	r24, Z
    43ae:	91 81       	ldd	r25, Z+1	; 0x01
    43b0:	11 96       	adiw	r26, 0x01	; 1
    43b2:	9c 93       	st	X, r25
    43b4:	8e 93       	st	-X, r24
    43b6:	fe 01       	movw	r30, r28
    43b8:	e1 58       	subi	r30, 0x81	; 129
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <LCD_voidInit+0x930>
    43c4:	fe 01       	movw	r30, r28
    43c6:	e1 58       	subi	r30, 0x81	; 129
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	91 83       	std	Z+1, r25	; 0x01
    43cc:	80 83       	st	Z, r24
    43ce:	51 c6       	rjmp	.+3234   	; 0x5072 <LCD_voidInit+0x15e2>
			 _delay_ms(2);
			
		}
		else 
		{
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    43d0:	fe 01       	movw	r30, r28
    43d2:	ea 53       	subi	r30, 0x3A	; 58
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	80 81       	ld	r24, Z
    43d8:	60 e2       	ldi	r22, 0x20	; 32
    43da:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    43de:	fe 01       	movw	r30, r28
    43e0:	e5 58       	subi	r30, 0x85	; 133
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	a0 e8       	ldi	r26, 0x80	; 128
    43ea:	bf e3       	ldi	r27, 0x3F	; 63
    43ec:	80 83       	st	Z, r24
    43ee:	91 83       	std	Z+1, r25	; 0x01
    43f0:	a2 83       	std	Z+2, r26	; 0x02
    43f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f4:	8e 01       	movw	r16, r28
    43f6:	09 58       	subi	r16, 0x89	; 137
    43f8:	1f 4f       	sbci	r17, 0xFF	; 255
    43fa:	fe 01       	movw	r30, r28
    43fc:	e5 58       	subi	r30, 0x85	; 133
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	60 81       	ld	r22, Z
    4402:	71 81       	ldd	r23, Z+1	; 0x01
    4404:	82 81       	ldd	r24, Z+2	; 0x02
    4406:	93 81       	ldd	r25, Z+3	; 0x03
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	4a ef       	ldi	r20, 0xFA	; 250
    440e:	54 e4       	ldi	r21, 0x44	; 68
    4410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	f8 01       	movw	r30, r16
    441a:	80 83       	st	Z, r24
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	a2 83       	std	Z+2, r26	; 0x02
    4420:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4422:	fe 01       	movw	r30, r28
    4424:	e9 58       	subi	r30, 0x89	; 137
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	60 81       	ld	r22, Z
    442a:	71 81       	ldd	r23, Z+1	; 0x01
    442c:	82 81       	ldd	r24, Z+2	; 0x02
    442e:	93 81       	ldd	r25, Z+3	; 0x03
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e8       	ldi	r20, 0x80	; 128
    4436:	5f e3       	ldi	r21, 0x3F	; 63
    4438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    443c:	88 23       	and	r24, r24
    443e:	44 f4       	brge	.+16     	; 0x4450 <LCD_voidInit+0x9c0>
		__ticks = 1;
    4440:	fe 01       	movw	r30, r28
    4442:	eb 58       	subi	r30, 0x8B	; 139
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	80 83       	st	Z, r24
    444e:	64 c0       	rjmp	.+200    	; 0x4518 <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    4450:	fe 01       	movw	r30, r28
    4452:	e9 58       	subi	r30, 0x89	; 137
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	60 81       	ld	r22, Z
    4458:	71 81       	ldd	r23, Z+1	; 0x01
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	93 81       	ldd	r25, Z+3	; 0x03
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	3f ef       	ldi	r19, 0xFF	; 255
    4462:	4f e7       	ldi	r20, 0x7F	; 127
    4464:	57 e4       	ldi	r21, 0x47	; 71
    4466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    446a:	18 16       	cp	r1, r24
    446c:	0c f0       	brlt	.+2      	; 0x4470 <LCD_voidInit+0x9e0>
    446e:	43 c0       	rjmp	.+134    	; 0x44f6 <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4470:	fe 01       	movw	r30, r28
    4472:	e5 58       	subi	r30, 0x85	; 133
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	60 81       	ld	r22, Z
    4478:	71 81       	ldd	r23, Z+1	; 0x01
    447a:	82 81       	ldd	r24, Z+2	; 0x02
    447c:	93 81       	ldd	r25, Z+3	; 0x03
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e2       	ldi	r20, 0x20	; 32
    4484:	51 e4       	ldi	r21, 0x41	; 65
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	8e 01       	movw	r16, r28
    4490:	0b 58       	subi	r16, 0x8B	; 139
    4492:	1f 4f       	sbci	r17, 0xFF	; 255
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	f8 01       	movw	r30, r16
    44a2:	91 83       	std	Z+1, r25	; 0x01
    44a4:	80 83       	st	Z, r24
    44a6:	1f c0       	rjmp	.+62     	; 0x44e6 <LCD_voidInit+0xa56>
    44a8:	fe 01       	movw	r30, r28
    44aa:	ed 58       	subi	r30, 0x8D	; 141
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	88 ec       	ldi	r24, 0xC8	; 200
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	80 83       	st	Z, r24
    44b6:	fe 01       	movw	r30, r28
    44b8:	ed 58       	subi	r30, 0x8D	; 141
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <LCD_voidInit+0xa30>
    44c4:	fe 01       	movw	r30, r28
    44c6:	ed 58       	subi	r30, 0x8D	; 141
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	91 83       	std	Z+1, r25	; 0x01
    44cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ce:	de 01       	movw	r26, r28
    44d0:	ab 58       	subi	r26, 0x8B	; 139
    44d2:	bf 4f       	sbci	r27, 0xFF	; 255
    44d4:	fe 01       	movw	r30, r28
    44d6:	eb 58       	subi	r30, 0x8B	; 139
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	80 81       	ld	r24, Z
    44dc:	91 81       	ldd	r25, Z+1	; 0x01
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	11 96       	adiw	r26, 0x01	; 1
    44e2:	9c 93       	st	X, r25
    44e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e6:	fe 01       	movw	r30, r28
    44e8:	eb 58       	subi	r30, 0x8B	; 139
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	80 81       	ld	r24, Z
    44ee:	91 81       	ldd	r25, Z+1	; 0x01
    44f0:	00 97       	sbiw	r24, 0x00	; 0
    44f2:	d1 f6       	brne	.-76     	; 0x44a8 <LCD_voidInit+0xa18>
    44f4:	27 c0       	rjmp	.+78     	; 0x4544 <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f6:	8e 01       	movw	r16, r28
    44f8:	0b 58       	subi	r16, 0x8B	; 139
    44fa:	1f 4f       	sbci	r17, 0xFF	; 255
    44fc:	fe 01       	movw	r30, r28
    44fe:	e9 58       	subi	r30, 0x89	; 137
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	60 81       	ld	r22, Z
    4504:	71 81       	ldd	r23, Z+1	; 0x01
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	f8 01       	movw	r30, r16
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	80 83       	st	Z, r24
    4518:	de 01       	movw	r26, r28
    451a:	af 58       	subi	r26, 0x8F	; 143
    451c:	bf 4f       	sbci	r27, 0xFF	; 255
    451e:	fe 01       	movw	r30, r28
    4520:	eb 58       	subi	r30, 0x8B	; 139
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	80 81       	ld	r24, Z
    4526:	91 81       	ldd	r25, Z+1	; 0x01
    4528:	8d 93       	st	X+, r24
    452a:	9c 93       	st	X, r25
    452c:	fe 01       	movw	r30, r28
    452e:	ef 58       	subi	r30, 0x8F	; 143
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	80 81       	ld	r24, Z
    4534:	91 81       	ldd	r25, Z+1	; 0x01
    4536:	01 97       	sbiw	r24, 0x01	; 1
    4538:	f1 f7       	brne	.-4      	; 0x4536 <LCD_voidInit+0xaa6>
    453a:	fe 01       	movw	r30, r28
    453c:	ef 58       	subi	r30, 0x8F	; 143
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	80 83       	st	Z, r24
				 _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    4544:	fe 01       	movw	r30, r28
    4546:	ea 53       	subi	r30, 0x3A	; 58
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	60 e2       	ldi	r22, 0x20	; 32
    454e:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4552:	fe 01       	movw	r30, r28
    4554:	e3 59       	subi	r30, 0x93	; 147
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	a0 e8       	ldi	r26, 0x80	; 128
    455e:	bf e3       	ldi	r27, 0x3F	; 63
    4560:	80 83       	st	Z, r24
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	a2 83       	std	Z+2, r26	; 0x02
    4566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4568:	8e 01       	movw	r16, r28
    456a:	07 59       	subi	r16, 0x97	; 151
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	fe 01       	movw	r30, r28
    4570:	e3 59       	subi	r30, 0x93	; 147
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	4a ef       	ldi	r20, 0xFA	; 250
    4582:	54 e4       	ldi	r21, 0x44	; 68
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	f8 01       	movw	r30, r16
    458e:	80 83       	st	Z, r24
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	a2 83       	std	Z+2, r26	; 0x02
    4594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4596:	fe 01       	movw	r30, r28
    4598:	e7 59       	subi	r30, 0x97	; 151
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	60 81       	ld	r22, Z
    459e:	71 81       	ldd	r23, Z+1	; 0x01
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	93 81       	ldd	r25, Z+3	; 0x03
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e8       	ldi	r20, 0x80	; 128
    45aa:	5f e3       	ldi	r21, 0x3F	; 63
    45ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45b0:	88 23       	and	r24, r24
    45b2:	44 f4       	brge	.+16     	; 0x45c4 <LCD_voidInit+0xb34>
		__ticks = 1;
    45b4:	fe 01       	movw	r30, r28
    45b6:	e9 59       	subi	r30, 0x99	; 153
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	80 83       	st	Z, r24
    45c2:	64 c0       	rjmp	.+200    	; 0x468c <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    45c4:	fe 01       	movw	r30, r28
    45c6:	e7 59       	subi	r30, 0x97	; 151
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	3f ef       	ldi	r19, 0xFF	; 255
    45d6:	4f e7       	ldi	r20, 0x7F	; 127
    45d8:	57 e4       	ldi	r21, 0x47	; 71
    45da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45de:	18 16       	cp	r1, r24
    45e0:	0c f0       	brlt	.+2      	; 0x45e4 <LCD_voidInit+0xb54>
    45e2:	43 c0       	rjmp	.+134    	; 0x466a <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e4:	fe 01       	movw	r30, r28
    45e6:	e3 59       	subi	r30, 0x93	; 147
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	60 81       	ld	r22, Z
    45ec:	71 81       	ldd	r23, Z+1	; 0x01
    45ee:	82 81       	ldd	r24, Z+2	; 0x02
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e2       	ldi	r20, 0x20	; 32
    45f8:	51 e4       	ldi	r21, 0x41	; 65
    45fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	8e 01       	movw	r16, r28
    4604:	09 59       	subi	r16, 0x99	; 153
    4606:	1f 4f       	sbci	r17, 0xFF	; 255
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	f8 01       	movw	r30, r16
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	80 83       	st	Z, r24
    461a:	1f c0       	rjmp	.+62     	; 0x465a <LCD_voidInit+0xbca>
    461c:	fe 01       	movw	r30, r28
    461e:	eb 59       	subi	r30, 0x9B	; 155
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	88 ec       	ldi	r24, 0xC8	; 200
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	91 83       	std	Z+1, r25	; 0x01
    4628:	80 83       	st	Z, r24
    462a:	fe 01       	movw	r30, r28
    462c:	eb 59       	subi	r30, 0x9B	; 155
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	80 81       	ld	r24, Z
    4632:	91 81       	ldd	r25, Z+1	; 0x01
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <LCD_voidInit+0xba4>
    4638:	fe 01       	movw	r30, r28
    463a:	eb 59       	subi	r30, 0x9B	; 155
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4642:	de 01       	movw	r26, r28
    4644:	a9 59       	subi	r26, 0x99	; 153
    4646:	bf 4f       	sbci	r27, 0xFF	; 255
    4648:	fe 01       	movw	r30, r28
    464a:	e9 59       	subi	r30, 0x99	; 153
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	11 96       	adiw	r26, 0x01	; 1
    4656:	9c 93       	st	X, r25
    4658:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465a:	fe 01       	movw	r30, r28
    465c:	e9 59       	subi	r30, 0x99	; 153
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	d1 f6       	brne	.-76     	; 0x461c <LCD_voidInit+0xb8c>
    4668:	27 c0       	rjmp	.+78     	; 0x46b8 <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466a:	8e 01       	movw	r16, r28
    466c:	09 59       	subi	r16, 0x99	; 153
    466e:	1f 4f       	sbci	r17, 0xFF	; 255
    4670:	fe 01       	movw	r30, r28
    4672:	e7 59       	subi	r30, 0x97	; 151
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	60 81       	ld	r22, Z
    4678:	71 81       	ldd	r23, Z+1	; 0x01
    467a:	82 81       	ldd	r24, Z+2	; 0x02
    467c:	93 81       	ldd	r25, Z+3	; 0x03
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	f8 01       	movw	r30, r16
    4688:	91 83       	std	Z+1, r25	; 0x01
    468a:	80 83       	st	Z, r24
    468c:	de 01       	movw	r26, r28
    468e:	ad 59       	subi	r26, 0x9D	; 157
    4690:	bf 4f       	sbci	r27, 0xFF	; 255
    4692:	fe 01       	movw	r30, r28
    4694:	e9 59       	subi	r30, 0x99	; 153
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	80 81       	ld	r24, Z
    469a:	91 81       	ldd	r25, Z+1	; 0x01
    469c:	8d 93       	st	X+, r24
    469e:	9c 93       	st	X, r25
    46a0:	fe 01       	movw	r30, r28
    46a2:	ed 59       	subi	r30, 0x9D	; 157
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <LCD_voidInit+0xc1a>
    46ae:	fe 01       	movw	r30, r28
    46b0:	ed 59       	subi	r30, 0x9D	; 157
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
				 _delay_ms(1);
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
    46b8:	fe 01       	movw	r30, r28
    46ba:	ea 53       	subi	r30, 0x3A	; 58
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	80 81       	ld	r24, Z
    46c0:	28 2f       	mov	r18, r24
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	c9 01       	movw	r24, r18
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	82 0f       	add	r24, r18
    46cc:	93 1f       	adc	r25, r19
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	fc 01       	movw	r30, r24
    46d8:	e8 54       	subi	r30, 0x48	; 72
    46da:	fe 4f       	sbci	r31, 0xFE	; 254
    46dc:	80 81       	ld	r24, Z
    46de:	81 70       	andi	r24, 0x01	; 1
    46e0:	88 2f       	mov	r24, r24
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	96 95       	lsr	r25
    46e6:	98 2f       	mov	r25, r24
    46e8:	88 27       	eor	r24, r24
    46ea:	97 95       	ror	r25
    46ec:	87 95       	ror	r24
    46ee:	48 2f       	mov	r20, r24
    46f0:	fe 01       	movw	r30, r28
    46f2:	ea 53       	subi	r30, 0x3A	; 58
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	28 2f       	mov	r18, r24
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	c9 01       	movw	r24, r18
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	82 0f       	add	r24, r18
    4704:	93 1f       	adc	r25, r19
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	fc 01       	movw	r30, r24
    4710:	e8 54       	subi	r30, 0x48	; 72
    4712:	fe 4f       	sbci	r31, 0xFE	; 254
    4714:	80 81       	ld	r24, Z
    4716:	86 95       	lsr	r24
    4718:	81 70       	andi	r24, 0x01	; 1
    471a:	88 2f       	mov	r24, r24
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	00 24       	eor	r0, r0
    4720:	96 95       	lsr	r25
    4722:	87 95       	ror	r24
    4724:	07 94       	ror	r0
    4726:	96 95       	lsr	r25
    4728:	87 95       	ror	r24
    472a:	07 94       	ror	r0
    472c:	98 2f       	mov	r25, r24
    472e:	80 2d       	mov	r24, r0
    4730:	84 2b       	or	r24, r20
    4732:	fe 01       	movw	r30, r28
    4734:	eb 53       	subi	r30, 0x3B	; 59
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    473a:	fe 01       	movw	r30, r28
    473c:	ea 53       	subi	r30, 0x3A	; 58
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	de 01       	movw	r26, r28
    4742:	ab 53       	subi	r26, 0x3B	; 59
    4744:	bf 4f       	sbci	r27, 0xFF	; 255
    4746:	80 81       	ld	r24, Z
    4748:	6c 91       	ld	r22, X
    474a:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    474e:	fe 01       	movw	r30, r28
    4750:	e1 5a       	subi	r30, 0xA1	; 161
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	a0 e8       	ldi	r26, 0x80	; 128
    475a:	bf e3       	ldi	r27, 0x3F	; 63
    475c:	80 83       	st	Z, r24
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	a2 83       	std	Z+2, r26	; 0x02
    4762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4764:	8e 01       	movw	r16, r28
    4766:	05 5a       	subi	r16, 0xA5	; 165
    4768:	1f 4f       	sbci	r17, 0xFF	; 255
    476a:	fe 01       	movw	r30, r28
    476c:	e1 5a       	subi	r30, 0xA1	; 161
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	60 81       	ld	r22, Z
    4772:	71 81       	ldd	r23, Z+1	; 0x01
    4774:	82 81       	ldd	r24, Z+2	; 0x02
    4776:	93 81       	ldd	r25, Z+3	; 0x03
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	4a ef       	ldi	r20, 0xFA	; 250
    477e:	54 e4       	ldi	r21, 0x44	; 68
    4780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	f8 01       	movw	r30, r16
    478a:	80 83       	st	Z, r24
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	a2 83       	std	Z+2, r26	; 0x02
    4790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4792:	fe 01       	movw	r30, r28
    4794:	e5 5a       	subi	r30, 0xA5	; 165
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	60 81       	ld	r22, Z
    479a:	71 81       	ldd	r23, Z+1	; 0x01
    479c:	82 81       	ldd	r24, Z+2	; 0x02
    479e:	93 81       	ldd	r25, Z+3	; 0x03
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	40 e8       	ldi	r20, 0x80	; 128
    47a6:	5f e3       	ldi	r21, 0x3F	; 63
    47a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ac:	88 23       	and	r24, r24
    47ae:	44 f4       	brge	.+16     	; 0x47c0 <LCD_voidInit+0xd30>
		__ticks = 1;
    47b0:	fe 01       	movw	r30, r28
    47b2:	e7 5a       	subi	r30, 0xA7	; 167
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	91 83       	std	Z+1, r25	; 0x01
    47bc:	80 83       	st	Z, r24
    47be:	64 c0       	rjmp	.+200    	; 0x4888 <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    47c0:	fe 01       	movw	r30, r28
    47c2:	e5 5a       	subi	r30, 0xA5	; 165
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	82 81       	ldd	r24, Z+2	; 0x02
    47cc:	93 81       	ldd	r25, Z+3	; 0x03
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	3f ef       	ldi	r19, 0xFF	; 255
    47d2:	4f e7       	ldi	r20, 0x7F	; 127
    47d4:	57 e4       	ldi	r21, 0x47	; 71
    47d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47da:	18 16       	cp	r1, r24
    47dc:	0c f0       	brlt	.+2      	; 0x47e0 <LCD_voidInit+0xd50>
    47de:	43 c0       	rjmp	.+134    	; 0x4866 <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e0:	fe 01       	movw	r30, r28
    47e2:	e1 5a       	subi	r30, 0xA1	; 161
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	60 81       	ld	r22, Z
    47e8:	71 81       	ldd	r23, Z+1	; 0x01
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	93 81       	ldd	r25, Z+3	; 0x03
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	40 e2       	ldi	r20, 0x20	; 32
    47f4:	51 e4       	ldi	r21, 0x41	; 65
    47f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	8e 01       	movw	r16, r28
    4800:	07 5a       	subi	r16, 0xA7	; 167
    4802:	1f 4f       	sbci	r17, 0xFF	; 255
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	f8 01       	movw	r30, r16
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	80 83       	st	Z, r24
    4816:	1f c0       	rjmp	.+62     	; 0x4856 <LCD_voidInit+0xdc6>
    4818:	fe 01       	movw	r30, r28
    481a:	e9 5a       	subi	r30, 0xA9	; 169
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	88 ec       	ldi	r24, 0xC8	; 200
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	80 83       	st	Z, r24
    4826:	fe 01       	movw	r30, r28
    4828:	e9 5a       	subi	r30, 0xA9	; 169
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	80 81       	ld	r24, Z
    482e:	91 81       	ldd	r25, Z+1	; 0x01
    4830:	01 97       	sbiw	r24, 0x01	; 1
    4832:	f1 f7       	brne	.-4      	; 0x4830 <LCD_voidInit+0xda0>
    4834:	fe 01       	movw	r30, r28
    4836:	e9 5a       	subi	r30, 0xA9	; 169
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	91 83       	std	Z+1, r25	; 0x01
    483c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483e:	de 01       	movw	r26, r28
    4840:	a7 5a       	subi	r26, 0xA7	; 167
    4842:	bf 4f       	sbci	r27, 0xFF	; 255
    4844:	fe 01       	movw	r30, r28
    4846:	e7 5a       	subi	r30, 0xA7	; 167
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	11 96       	adiw	r26, 0x01	; 1
    4852:	9c 93       	st	X, r25
    4854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4856:	fe 01       	movw	r30, r28
    4858:	e7 5a       	subi	r30, 0xA7	; 167
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	80 81       	ld	r24, Z
    485e:	91 81       	ldd	r25, Z+1	; 0x01
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	d1 f6       	brne	.-76     	; 0x4818 <LCD_voidInit+0xd88>
    4864:	27 c0       	rjmp	.+78     	; 0x48b4 <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4866:	8e 01       	movw	r16, r28
    4868:	07 5a       	subi	r16, 0xA7	; 167
    486a:	1f 4f       	sbci	r17, 0xFF	; 255
    486c:	fe 01       	movw	r30, r28
    486e:	e5 5a       	subi	r30, 0xA5	; 165
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	60 81       	ld	r22, Z
    4874:	71 81       	ldd	r23, Z+1	; 0x01
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	93 81       	ldd	r25, Z+3	; 0x03
    487a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	f8 01       	movw	r30, r16
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	de 01       	movw	r26, r28
    488a:	ab 5a       	subi	r26, 0xAB	; 171
    488c:	bf 4f       	sbci	r27, 0xFF	; 255
    488e:	fe 01       	movw	r30, r28
    4890:	e7 5a       	subi	r30, 0xA7	; 167
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	8d 93       	st	X+, r24
    489a:	9c 93       	st	X, r25
    489c:	fe 01       	movw	r30, r28
    489e:	eb 5a       	subi	r30, 0xAB	; 171
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	80 81       	ld	r24, Z
    48a4:	91 81       	ldd	r25, Z+1	; 0x01
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <LCD_voidInit+0xe16>
    48aa:	fe 01       	movw	r30, r28
    48ac:	eb 5a       	subi	r30, 0xAB	; 171
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    48b4:	fe 01       	movw	r30, r28
    48b6:	ea 53       	subi	r30, 0x3A	; 58
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	80 81       	ld	r24, Z
    48bc:	60 e0       	ldi	r22, 0x00	; 0
    48be:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    48c2:	fe 01       	movw	r30, r28
    48c4:	ef 5a       	subi	r30, 0xAF	; 175
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	a0 e8       	ldi	r26, 0x80	; 128
    48ce:	bf e3       	ldi	r27, 0x3F	; 63
    48d0:	80 83       	st	Z, r24
    48d2:	91 83       	std	Z+1, r25	; 0x01
    48d4:	a2 83       	std	Z+2, r26	; 0x02
    48d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d8:	8e 01       	movw	r16, r28
    48da:	03 5b       	subi	r16, 0xB3	; 179
    48dc:	1f 4f       	sbci	r17, 0xFF	; 255
    48de:	fe 01       	movw	r30, r28
    48e0:	ef 5a       	subi	r30, 0xAF	; 175
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	4a ef       	ldi	r20, 0xFA	; 250
    48f2:	54 e4       	ldi	r21, 0x44	; 68
    48f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	f8 01       	movw	r30, r16
    48fe:	80 83       	st	Z, r24
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	a2 83       	std	Z+2, r26	; 0x02
    4904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4906:	fe 01       	movw	r30, r28
    4908:	e3 5b       	subi	r30, 0xB3	; 179
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e8       	ldi	r20, 0x80	; 128
    491a:	5f e3       	ldi	r21, 0x3F	; 63
    491c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4920:	88 23       	and	r24, r24
    4922:	44 f4       	brge	.+16     	; 0x4934 <LCD_voidInit+0xea4>
		__ticks = 1;
    4924:	fe 01       	movw	r30, r28
    4926:	e5 5b       	subi	r30, 0xB5	; 181
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	91 83       	std	Z+1, r25	; 0x01
    4930:	80 83       	st	Z, r24
    4932:	64 c0       	rjmp	.+200    	; 0x49fc <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    4934:	fe 01       	movw	r30, r28
    4936:	e3 5b       	subi	r30, 0xB3	; 179
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	3f ef       	ldi	r19, 0xFF	; 255
    4946:	4f e7       	ldi	r20, 0x7F	; 127
    4948:	57 e4       	ldi	r21, 0x47	; 71
    494a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494e:	18 16       	cp	r1, r24
    4950:	0c f0       	brlt	.+2      	; 0x4954 <LCD_voidInit+0xec4>
    4952:	43 c0       	rjmp	.+134    	; 0x49da <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4954:	fe 01       	movw	r30, r28
    4956:	ef 5a       	subi	r30, 0xAF	; 175
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e2       	ldi	r20, 0x20	; 32
    4968:	51 e4       	ldi	r21, 0x41	; 65
    496a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	8e 01       	movw	r16, r28
    4974:	05 5b       	subi	r16, 0xB5	; 181
    4976:	1f 4f       	sbci	r17, 0xFF	; 255
    4978:	bc 01       	movw	r22, r24
    497a:	cd 01       	movw	r24, r26
    497c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	f8 01       	movw	r30, r16
    4986:	91 83       	std	Z+1, r25	; 0x01
    4988:	80 83       	st	Z, r24
    498a:	1f c0       	rjmp	.+62     	; 0x49ca <LCD_voidInit+0xf3a>
    498c:	fe 01       	movw	r30, r28
    498e:	e7 5b       	subi	r30, 0xB7	; 183
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	88 ec       	ldi	r24, 0xC8	; 200
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	91 83       	std	Z+1, r25	; 0x01
    4998:	80 83       	st	Z, r24
    499a:	fe 01       	movw	r30, r28
    499c:	e7 5b       	subi	r30, 0xB7	; 183
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	80 81       	ld	r24, Z
    49a2:	91 81       	ldd	r25, Z+1	; 0x01
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	f1 f7       	brne	.-4      	; 0x49a4 <LCD_voidInit+0xf14>
    49a8:	fe 01       	movw	r30, r28
    49aa:	e7 5b       	subi	r30, 0xB7	; 183
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	91 83       	std	Z+1, r25	; 0x01
    49b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b2:	de 01       	movw	r26, r28
    49b4:	a5 5b       	subi	r26, 0xB5	; 181
    49b6:	bf 4f       	sbci	r27, 0xFF	; 255
    49b8:	fe 01       	movw	r30, r28
    49ba:	e5 5b       	subi	r30, 0xB5	; 181
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	80 81       	ld	r24, Z
    49c0:	91 81       	ldd	r25, Z+1	; 0x01
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	11 96       	adiw	r26, 0x01	; 1
    49c6:	9c 93       	st	X, r25
    49c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ca:	fe 01       	movw	r30, r28
    49cc:	e5 5b       	subi	r30, 0xB5	; 181
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	80 81       	ld	r24, Z
    49d2:	91 81       	ldd	r25, Z+1	; 0x01
    49d4:	00 97       	sbiw	r24, 0x00	; 0
    49d6:	d1 f6       	brne	.-76     	; 0x498c <LCD_voidInit+0xefc>
    49d8:	27 c0       	rjmp	.+78     	; 0x4a28 <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49da:	8e 01       	movw	r16, r28
    49dc:	05 5b       	subi	r16, 0xB5	; 181
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	fe 01       	movw	r30, r28
    49e2:	e3 5b       	subi	r30, 0xB3	; 179
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	f8 01       	movw	r30, r16
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    49fc:	de 01       	movw	r26, r28
    49fe:	a9 5b       	subi	r26, 0xB9	; 185
    4a00:	bf 4f       	sbci	r27, 0xFF	; 255
    4a02:	fe 01       	movw	r30, r28
    4a04:	e5 5b       	subi	r30, 0xB5	; 181
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	80 81       	ld	r24, Z
    4a0a:	91 81       	ldd	r25, Z+1	; 0x01
    4a0c:	8d 93       	st	X+, r24
    4a0e:	9c 93       	st	X, r25
    4a10:	fe 01       	movw	r30, r28
    4a12:	e9 5b       	subi	r30, 0xB9	; 185
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	91 81       	ldd	r25, Z+1	; 0x01
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <LCD_voidInit+0xf8a>
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e9 5b       	subi	r30, 0xB9	; 185
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
    4a28:	fe 01       	movw	r30, r28
    4a2a:	ea 53       	subi	r30, 0x3A	; 58
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 81       	ld	r24, Z
    4a30:	28 2f       	mov	r18, r24
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	c9 01       	movw	r24, r18
    4a36:	88 0f       	add	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	82 0f       	add	r24, r18
    4a3c:	93 1f       	adc	r25, r19
    4a3e:	88 0f       	add	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	88 0f       	add	r24, r24
    4a44:	99 1f       	adc	r25, r25
    4a46:	fc 01       	movw	r30, r24
    4a48:	e8 54       	subi	r30, 0x48	; 72
    4a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4c:	80 81       	ld	r24, Z
    4a4e:	86 95       	lsr	r24
    4a50:	86 95       	lsr	r24
    4a52:	81 70       	andi	r24, 0x01	; 1
    4a54:	88 2f       	mov	r24, r24
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	00 24       	eor	r0, r0
    4a5a:	96 95       	lsr	r25
    4a5c:	87 95       	ror	r24
    4a5e:	07 94       	ror	r0
    4a60:	96 95       	lsr	r25
    4a62:	87 95       	ror	r24
    4a64:	07 94       	ror	r0
    4a66:	98 2f       	mov	r25, r24
    4a68:	80 2d       	mov	r24, r0
    4a6a:	48 2f       	mov	r20, r24
    4a6c:	40 68       	ori	r20, 0x80	; 128
    4a6e:	fe 01       	movw	r30, r28
    4a70:	ea 53       	subi	r30, 0x3A	; 58
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	80 81       	ld	r24, Z
    4a76:	28 2f       	mov	r18, r24
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	c9 01       	movw	r24, r18
    4a7c:	88 0f       	add	r24, r24
    4a7e:	99 1f       	adc	r25, r25
    4a80:	82 0f       	add	r24, r18
    4a82:	93 1f       	adc	r25, r19
    4a84:	88 0f       	add	r24, r24
    4a86:	99 1f       	adc	r25, r25
    4a88:	88 0f       	add	r24, r24
    4a8a:	99 1f       	adc	r25, r25
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	e8 54       	subi	r30, 0x48	; 72
    4a90:	fe 4f       	sbci	r31, 0xFE	; 254
    4a92:	80 81       	ld	r24, Z
    4a94:	86 95       	lsr	r24
    4a96:	86 95       	lsr	r24
    4a98:	86 95       	lsr	r24
    4a9a:	81 70       	andi	r24, 0x01	; 1
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	82 95       	swap	r24
    4aa6:	92 95       	swap	r25
    4aa8:	90 7f       	andi	r25, 0xF0	; 240
    4aaa:	98 27       	eor	r25, r24
    4aac:	80 7f       	andi	r24, 0xF0	; 240
    4aae:	98 27       	eor	r25, r24
    4ab0:	48 2b       	or	r20, r24
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	ea 53       	subi	r30, 0x3A	; 58
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	80 81       	ld	r24, Z
    4aba:	28 2f       	mov	r18, r24
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	c9 01       	movw	r24, r18
    4ac0:	88 0f       	add	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	82 0f       	add	r24, r18
    4ac6:	93 1f       	adc	r25, r19
    4ac8:	88 0f       	add	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	88 0f       	add	r24, r24
    4ace:	99 1f       	adc	r25, r25
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	e8 54       	subi	r30, 0x48	; 72
    4ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ad6:	80 81       	ld	r24, Z
    4ad8:	82 95       	swap	r24
    4ada:	8f 70       	andi	r24, 0x0F	; 15
    4adc:	81 70       	andi	r24, 0x01	; 1
    4ade:	88 2f       	mov	r24, r24
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	82 95       	swap	r24
    4ae4:	92 95       	swap	r25
    4ae6:	90 7f       	andi	r25, 0xF0	; 240
    4ae8:	98 27       	eor	r25, r24
    4aea:	80 7f       	andi	r24, 0xF0	; 240
    4aec:	98 27       	eor	r25, r24
    4aee:	84 2b       	or	r24, r20
    4af0:	fe 01       	movw	r30, r28
    4af2:	eb 53       	subi	r30, 0x3B	; 59
    4af4:	ff 4f       	sbci	r31, 0xFF	; 255
    4af6:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    4af8:	fe 01       	movw	r30, r28
    4afa:	ea 53       	subi	r30, 0x3A	; 58
    4afc:	ff 4f       	sbci	r31, 0xFF	; 255
    4afe:	de 01       	movw	r26, r28
    4b00:	ab 53       	subi	r26, 0x3B	; 59
    4b02:	bf 4f       	sbci	r27, 0xFF	; 255
    4b04:	80 81       	ld	r24, Z
    4b06:	6c 91       	ld	r22, X
    4b08:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	ed 5b       	subi	r30, 0xBD	; 189
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	a0 e8       	ldi	r26, 0x80	; 128
    4b18:	bf e3       	ldi	r27, 0x3F	; 63
    4b1a:	80 83       	st	Z, r24
    4b1c:	91 83       	std	Z+1, r25	; 0x01
    4b1e:	a2 83       	std	Z+2, r26	; 0x02
    4b20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b22:	8e 01       	movw	r16, r28
    4b24:	01 5c       	subi	r16, 0xC1	; 193
    4b26:	1f 4f       	sbci	r17, 0xFF	; 255
    4b28:	fe 01       	movw	r30, r28
    4b2a:	ed 5b       	subi	r30, 0xBD	; 189
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	60 81       	ld	r22, Z
    4b30:	71 81       	ldd	r23, Z+1	; 0x01
    4b32:	82 81       	ldd	r24, Z+2	; 0x02
    4b34:	93 81       	ldd	r25, Z+3	; 0x03
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	4a ef       	ldi	r20, 0xFA	; 250
    4b3c:	54 e4       	ldi	r21, 0x44	; 68
    4b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	f8 01       	movw	r30, r16
    4b48:	80 83       	st	Z, r24
    4b4a:	91 83       	std	Z+1, r25	; 0x01
    4b4c:	a2 83       	std	Z+2, r26	; 0x02
    4b4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b50:	fe 01       	movw	r30, r28
    4b52:	ff 96       	adiw	r30, 0x3f	; 63
    4b54:	60 81       	ld	r22, Z
    4b56:	71 81       	ldd	r23, Z+1	; 0x01
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	40 e8       	ldi	r20, 0x80	; 128
    4b62:	5f e3       	ldi	r21, 0x3F	; 63
    4b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b68:	88 23       	and	r24, r24
    4b6a:	2c f4       	brge	.+10     	; 0x4b76 <LCD_voidInit+0x10e6>
		__ticks = 1;
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	9e af       	std	Y+62, r25	; 0x3e
    4b72:	8d af       	std	Y+61, r24	; 0x3d
    4b74:	46 c0       	rjmp	.+140    	; 0x4c02 <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    4b76:	fe 01       	movw	r30, r28
    4b78:	ff 96       	adiw	r30, 0x3f	; 63
    4b7a:	60 81       	ld	r22, Z
    4b7c:	71 81       	ldd	r23, Z+1	; 0x01
    4b7e:	82 81       	ldd	r24, Z+2	; 0x02
    4b80:	93 81       	ldd	r25, Z+3	; 0x03
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	3f ef       	ldi	r19, 0xFF	; 255
    4b86:	4f e7       	ldi	r20, 0x7F	; 127
    4b88:	57 e4       	ldi	r21, 0x47	; 71
    4b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8e:	18 16       	cp	r1, r24
    4b90:	64 f5       	brge	.+88     	; 0x4bea <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b92:	fe 01       	movw	r30, r28
    4b94:	ed 5b       	subi	r30, 0xBD	; 189
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	60 81       	ld	r22, Z
    4b9a:	71 81       	ldd	r23, Z+1	; 0x01
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	40 e2       	ldi	r20, 0x20	; 32
    4ba6:	51 e4       	ldi	r21, 0x41	; 65
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	bc 01       	movw	r22, r24
    4bb2:	cd 01       	movw	r24, r26
    4bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	9e af       	std	Y+62, r25	; 0x3e
    4bbe:	8d af       	std	Y+61, r24	; 0x3d
    4bc0:	0f c0       	rjmp	.+30     	; 0x4be0 <LCD_voidInit+0x1150>
    4bc2:	88 ec       	ldi	r24, 0xC8	; 200
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	9c af       	std	Y+60, r25	; 0x3c
    4bc8:	8b af       	std	Y+59, r24	; 0x3b
    4bca:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	f1 f7       	brne	.-4      	; 0x4bce <LCD_voidInit+0x113e>
    4bd2:	9c af       	std	Y+60, r25	; 0x3c
    4bd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	9e af       	std	Y+62, r25	; 0x3e
    4bde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4be2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	69 f7       	brne	.-38     	; 0x4bc2 <LCD_voidInit+0x1132>
    4be8:	16 c0       	rjmp	.+44     	; 0x4c16 <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bea:	fe 01       	movw	r30, r28
    4bec:	ff 96       	adiw	r30, 0x3f	; 63
    4bee:	60 81       	ld	r22, Z
    4bf0:	71 81       	ldd	r23, Z+1	; 0x01
    4bf2:	82 81       	ldd	r24, Z+2	; 0x02
    4bf4:	93 81       	ldd	r25, Z+3	; 0x03
    4bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	9e af       	std	Y+62, r25	; 0x3e
    4c00:	8d af       	std	Y+61, r24	; 0x3d
    4c02:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c04:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c06:	9a af       	std	Y+58, r25	; 0x3a
    4c08:	89 af       	std	Y+57, r24	; 0x39
    4c0a:	89 ad       	ldd	r24, Y+57	; 0x39
    4c0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c0e:	01 97       	sbiw	r24, 0x01	; 1
    4c10:	f1 f7       	brne	.-4      	; 0x4c0e <LCD_voidInit+0x117e>
    4c12:	9a af       	std	Y+58, r25	; 0x3a
    4c14:	89 af       	std	Y+57, r24	; 0x39
				 _delay_ms(1);
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    4c16:	fe 01       	movw	r30, r28
    4c18:	ea 53       	subi	r30, 0x3A	; 58
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	80 81       	ld	r24, Z
    4c1e:	60 e0       	ldi	r22, 0x00	; 0
    4c20:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	a0 e8       	ldi	r26, 0x80	; 128
    4c2a:	bf e3       	ldi	r27, 0x3F	; 63
    4c2c:	8d ab       	std	Y+53, r24	; 0x35
    4c2e:	9e ab       	std	Y+54, r25	; 0x36
    4c30:	af ab       	std	Y+55, r26	; 0x37
    4c32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c34:	6d a9       	ldd	r22, Y+53	; 0x35
    4c36:	7e a9       	ldd	r23, Y+54	; 0x36
    4c38:	8f a9       	ldd	r24, Y+55	; 0x37
    4c3a:	98 ad       	ldd	r25, Y+56	; 0x38
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	4a ef       	ldi	r20, 0xFA	; 250
    4c42:	54 e4       	ldi	r21, 0x44	; 68
    4c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	89 ab       	std	Y+49, r24	; 0x31
    4c4e:	9a ab       	std	Y+50, r25	; 0x32
    4c50:	ab ab       	std	Y+51, r26	; 0x33
    4c52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c54:	69 a9       	ldd	r22, Y+49	; 0x31
    4c56:	7a a9       	ldd	r23, Y+50	; 0x32
    4c58:	8b a9       	ldd	r24, Y+51	; 0x33
    4c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e8       	ldi	r20, 0x80	; 128
    4c62:	5f e3       	ldi	r21, 0x3F	; 63
    4c64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c68:	88 23       	and	r24, r24
    4c6a:	2c f4       	brge	.+10     	; 0x4c76 <LCD_voidInit+0x11e6>
		__ticks = 1;
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	98 ab       	std	Y+48, r25	; 0x30
    4c72:	8f a7       	std	Y+47, r24	; 0x2f
    4c74:	3f c0       	rjmp	.+126    	; 0x4cf4 <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    4c76:	69 a9       	ldd	r22, Y+49	; 0x31
    4c78:	7a a9       	ldd	r23, Y+50	; 0x32
    4c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    4c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	3f ef       	ldi	r19, 0xFF	; 255
    4c82:	4f e7       	ldi	r20, 0x7F	; 127
    4c84:	57 e4       	ldi	r21, 0x47	; 71
    4c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c8a:	18 16       	cp	r1, r24
    4c8c:	4c f5       	brge	.+82     	; 0x4ce0 <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    4c90:	7e a9       	ldd	r23, Y+54	; 0x36
    4c92:	8f a9       	ldd	r24, Y+55	; 0x37
    4c94:	98 ad       	ldd	r25, Y+56	; 0x38
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e2       	ldi	r20, 0x20	; 32
    4c9c:	51 e4       	ldi	r21, 0x41	; 65
    4c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	bc 01       	movw	r22, r24
    4ca8:	cd 01       	movw	r24, r26
    4caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	98 ab       	std	Y+48, r25	; 0x30
    4cb4:	8f a7       	std	Y+47, r24	; 0x2f
    4cb6:	0f c0       	rjmp	.+30     	; 0x4cd6 <LCD_voidInit+0x1246>
    4cb8:	88 ec       	ldi	r24, 0xC8	; 200
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	9e a7       	std	Y+46, r25	; 0x2e
    4cbe:	8d a7       	std	Y+45, r24	; 0x2d
    4cc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	f1 f7       	brne	.-4      	; 0x4cc4 <LCD_voidInit+0x1234>
    4cc8:	9e a7       	std	Y+46, r25	; 0x2e
    4cca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cce:	98 a9       	ldd	r25, Y+48	; 0x30
    4cd0:	01 97       	sbiw	r24, 0x01	; 1
    4cd2:	98 ab       	std	Y+48, r25	; 0x30
    4cd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    4cda:	00 97       	sbiw	r24, 0x00	; 0
    4cdc:	69 f7       	brne	.-38     	; 0x4cb8 <LCD_voidInit+0x1228>
    4cde:	14 c0       	rjmp	.+40     	; 0x4d08 <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    4ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    4ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    4ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    4ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	98 ab       	std	Y+48, r25	; 0x30
    4cf2:	8f a7       	std	Y+47, r24	; 0x2f
    4cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    4cf8:	9c a7       	std	Y+44, r25	; 0x2c
    4cfa:	8b a7       	std	Y+43, r24	; 0x2b
    4cfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d00:	01 97       	sbiw	r24, 0x01	; 1
    4d02:	f1 f7       	brne	.-4      	; 0x4d00 <LCD_voidInit+0x1270>
    4d04:	9c a7       	std	Y+44, r25	; 0x2c
    4d06:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
    4d08:	fe 01       	movw	r30, r28
    4d0a:	ea 53       	subi	r30, 0x3A	; 58
    4d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0e:	80 81       	ld	r24, Z
    4d10:	60 e1       	ldi	r22, 0x10	; 16
    4d12:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4d16:	80 e0       	ldi	r24, 0x00	; 0
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	a0 e8       	ldi	r26, 0x80	; 128
    4d1c:	bf e3       	ldi	r27, 0x3F	; 63
    4d1e:	8f a3       	std	Y+39, r24	; 0x27
    4d20:	98 a7       	std	Y+40, r25	; 0x28
    4d22:	a9 a7       	std	Y+41, r26	; 0x29
    4d24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d26:	6f a1       	ldd	r22, Y+39	; 0x27
    4d28:	78 a5       	ldd	r23, Y+40	; 0x28
    4d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    4d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d2e:	20 e0       	ldi	r18, 0x00	; 0
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	4a ef       	ldi	r20, 0xFA	; 250
    4d34:	54 e4       	ldi	r21, 0x44	; 68
    4d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	8b a3       	std	Y+35, r24	; 0x23
    4d40:	9c a3       	std	Y+36, r25	; 0x24
    4d42:	ad a3       	std	Y+37, r26	; 0x25
    4d44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d46:	6b a1       	ldd	r22, Y+35	; 0x23
    4d48:	7c a1       	ldd	r23, Y+36	; 0x24
    4d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	40 e8       	ldi	r20, 0x80	; 128
    4d54:	5f e3       	ldi	r21, 0x3F	; 63
    4d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5a:	88 23       	and	r24, r24
    4d5c:	2c f4       	brge	.+10     	; 0x4d68 <LCD_voidInit+0x12d8>
		__ticks = 1;
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	9a a3       	std	Y+34, r25	; 0x22
    4d64:	89 a3       	std	Y+33, r24	; 0x21
    4d66:	3f c0       	rjmp	.+126    	; 0x4de6 <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    4d68:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	3f ef       	ldi	r19, 0xFF	; 255
    4d74:	4f e7       	ldi	r20, 0x7F	; 127
    4d76:	57 e4       	ldi	r21, 0x47	; 71
    4d78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d7c:	18 16       	cp	r1, r24
    4d7e:	4c f5       	brge	.+82     	; 0x4dd2 <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d80:	6f a1       	ldd	r22, Y+39	; 0x27
    4d82:	78 a5       	ldd	r23, Y+40	; 0x28
    4d84:	89 a5       	ldd	r24, Y+41	; 0x29
    4d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d88:	20 e0       	ldi	r18, 0x00	; 0
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	40 e2       	ldi	r20, 0x20	; 32
    4d8e:	51 e4       	ldi	r21, 0x41	; 65
    4d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d94:	dc 01       	movw	r26, r24
    4d96:	cb 01       	movw	r24, r22
    4d98:	bc 01       	movw	r22, r24
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	9a a3       	std	Y+34, r25	; 0x22
    4da6:	89 a3       	std	Y+33, r24	; 0x21
    4da8:	0f c0       	rjmp	.+30     	; 0x4dc8 <LCD_voidInit+0x1338>
    4daa:	88 ec       	ldi	r24, 0xC8	; 200
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	98 a3       	std	Y+32, r25	; 0x20
    4db0:	8f 8f       	std	Y+31, r24	; 0x1f
    4db2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4db4:	98 a1       	ldd	r25, Y+32	; 0x20
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <LCD_voidInit+0x1326>
    4dba:	98 a3       	std	Y+32, r25	; 0x20
    4dbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    4dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    4dc2:	01 97       	sbiw	r24, 0x01	; 1
    4dc4:	9a a3       	std	Y+34, r25	; 0x22
    4dc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    4dca:	9a a1       	ldd	r25, Y+34	; 0x22
    4dcc:	00 97       	sbiw	r24, 0x00	; 0
    4dce:	69 f7       	brne	.-38     	; 0x4daa <LCD_voidInit+0x131a>
    4dd0:	14 c0       	rjmp	.+40     	; 0x4dfa <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    4dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    4dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    4dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    4dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dde:	dc 01       	movw	r26, r24
    4de0:	cb 01       	movw	r24, r22
    4de2:	9a a3       	std	Y+34, r25	; 0x22
    4de4:	89 a3       	std	Y+33, r24	; 0x21
    4de6:	89 a1       	ldd	r24, Y+33	; 0x21
    4de8:	9a a1       	ldd	r25, Y+34	; 0x22
    4dea:	9e 8f       	std	Y+30, r25	; 0x1e
    4dec:	8d 8f       	std	Y+29, r24	; 0x1d
    4dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4df0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	f1 f7       	brne	.-4      	; 0x4df2 <LCD_voidInit+0x1362>
    4df6:	9e 8f       	std	Y+30, r25	; 0x1e
    4df8:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	ea 53       	subi	r30, 0x3A	; 58
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	80 81       	ld	r24, Z
    4e02:	60 e0       	ldi	r22, 0x00	; 0
    4e04:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	a0 e8       	ldi	r26, 0x80	; 128
    4e0e:	bf e3       	ldi	r27, 0x3F	; 63
    4e10:	89 8f       	std	Y+25, r24	; 0x19
    4e12:	9a 8f       	std	Y+26, r25	; 0x1a
    4e14:	ab 8f       	std	Y+27, r26	; 0x1b
    4e16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e18:	69 8d       	ldd	r22, Y+25	; 0x19
    4e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	4a ef       	ldi	r20, 0xFA	; 250
    4e26:	54 e4       	ldi	r21, 0x44	; 68
    4e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	8d 8b       	std	Y+21, r24	; 0x15
    4e32:	9e 8b       	std	Y+22, r25	; 0x16
    4e34:	af 8b       	std	Y+23, r26	; 0x17
    4e36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e38:	6d 89       	ldd	r22, Y+21	; 0x15
    4e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	40 e8       	ldi	r20, 0x80	; 128
    4e46:	5f e3       	ldi	r21, 0x3F	; 63
    4e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e4c:	88 23       	and	r24, r24
    4e4e:	2c f4       	brge	.+10     	; 0x4e5a <LCD_voidInit+0x13ca>
		__ticks = 1;
    4e50:	81 e0       	ldi	r24, 0x01	; 1
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	9c 8b       	std	Y+20, r25	; 0x14
    4e56:	8b 8b       	std	Y+19, r24	; 0x13
    4e58:	3f c0       	rjmp	.+126    	; 0x4ed8 <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    4e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e60:	98 8d       	ldd	r25, Y+24	; 0x18
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	3f ef       	ldi	r19, 0xFF	; 255
    4e66:	4f e7       	ldi	r20, 0x7F	; 127
    4e68:	57 e4       	ldi	r21, 0x47	; 71
    4e6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e6e:	18 16       	cp	r1, r24
    4e70:	4c f5       	brge	.+82     	; 0x4ec4 <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e72:	69 8d       	ldd	r22, Y+25	; 0x19
    4e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e7a:	20 e0       	ldi	r18, 0x00	; 0
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	40 e2       	ldi	r20, 0x20	; 32
    4e80:	51 e4       	ldi	r21, 0x41	; 65
    4e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	bc 01       	movw	r22, r24
    4e8c:	cd 01       	movw	r24, r26
    4e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	9c 8b       	std	Y+20, r25	; 0x14
    4e98:	8b 8b       	std	Y+19, r24	; 0x13
    4e9a:	0f c0       	rjmp	.+30     	; 0x4eba <LCD_voidInit+0x142a>
    4e9c:	88 ec       	ldi	r24, 0xC8	; 200
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	9a 8b       	std	Y+18, r25	; 0x12
    4ea2:	89 8b       	std	Y+17, r24	; 0x11
    4ea4:	89 89       	ldd	r24, Y+17	; 0x11
    4ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ea8:	01 97       	sbiw	r24, 0x01	; 1
    4eaa:	f1 f7       	brne	.-4      	; 0x4ea8 <LCD_voidInit+0x1418>
    4eac:	9a 8b       	std	Y+18, r25	; 0x12
    4eae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    4eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    4eb4:	01 97       	sbiw	r24, 0x01	; 1
    4eb6:	9c 8b       	std	Y+20, r25	; 0x14
    4eb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eba:	8b 89       	ldd	r24, Y+19	; 0x13
    4ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ebe:	00 97       	sbiw	r24, 0x00	; 0
    4ec0:	69 f7       	brne	.-38     	; 0x4e9c <LCD_voidInit+0x140c>
    4ec2:	14 c0       	rjmp	.+40     	; 0x4eec <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eca:	98 8d       	ldd	r25, Y+24	; 0x18
    4ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	9c 8b       	std	Y+20, r25	; 0x14
    4ed6:	8b 8b       	std	Y+19, r24	; 0x13
    4ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    4eda:	9c 89       	ldd	r25, Y+20	; 0x14
    4edc:	98 8b       	std	Y+16, r25	; 0x10
    4ede:	8f 87       	std	Y+15, r24	; 0x0f
    4ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ee2:	98 89       	ldd	r25, Y+16	; 0x10
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <LCD_voidInit+0x1454>
    4ee8:	98 8b       	std	Y+16, r25	; 0x10
    4eea:	8f 87       	std	Y+15, r24	; 0x0f
			    _delay_ms(1);
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
    4eec:	fe 01       	movw	r30, r28
    4eee:	ea 53       	subi	r30, 0x3A	; 58
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 81       	ld	r24, Z
    4ef4:	28 2f       	mov	r18, r24
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	c9 01       	movw	r24, r18
    4efa:	88 0f       	add	r24, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	82 0f       	add	r24, r18
    4f00:	93 1f       	adc	r25, r19
    4f02:	88 0f       	add	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	e8 54       	subi	r30, 0x48	; 72
    4f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f10:	80 81       	ld	r24, Z
    4f12:	82 95       	swap	r24
    4f14:	86 95       	lsr	r24
    4f16:	86 95       	lsr	r24
    4f18:	83 70       	andi	r24, 0x03	; 3
    4f1a:	81 70       	andi	r24, 0x01	; 1
    4f1c:	88 2f       	mov	r24, r24
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	88 0f       	add	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	82 95       	swap	r24
    4f26:	92 95       	swap	r25
    4f28:	90 7f       	andi	r25, 0xF0	; 240
    4f2a:	98 27       	eor	r25, r24
    4f2c:	80 7f       	andi	r24, 0xF0	; 240
    4f2e:	98 27       	eor	r25, r24
    4f30:	48 2f       	mov	r20, r24
    4f32:	40 64       	ori	r20, 0x40	; 64
    4f34:	fe 01       	movw	r30, r28
    4f36:	ea 53       	subi	r30, 0x3A	; 58
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	80 81       	ld	r24, Z
    4f3c:	28 2f       	mov	r18, r24
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	c9 01       	movw	r24, r18
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	82 0f       	add	r24, r18
    4f48:	93 1f       	adc	r25, r19
    4f4a:	88 0f       	add	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	88 0f       	add	r24, r24
    4f50:	99 1f       	adc	r25, r25
    4f52:	fc 01       	movw	r30, r24
    4f54:	e8 54       	subi	r30, 0x48	; 72
    4f56:	fe 4f       	sbci	r31, 0xFE	; 254
    4f58:	80 81       	ld	r24, Z
    4f5a:	88 1f       	adc	r24, r24
    4f5c:	88 27       	eor	r24, r24
    4f5e:	88 1f       	adc	r24, r24
    4f60:	88 2f       	mov	r24, r24
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	82 95       	swap	r24
    4f66:	92 95       	swap	r25
    4f68:	90 7f       	andi	r25, 0xF0	; 240
    4f6a:	98 27       	eor	r25, r24
    4f6c:	80 7f       	andi	r24, 0xF0	; 240
    4f6e:	98 27       	eor	r25, r24
    4f70:	84 2b       	or	r24, r20
    4f72:	fe 01       	movw	r30, r28
    4f74:	eb 53       	subi	r30, 0x3B	; 59
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	ea 53       	subi	r30, 0x3A	; 58
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	de 01       	movw	r26, r28
    4f82:	ab 53       	subi	r26, 0x3B	; 59
    4f84:	bf 4f       	sbci	r27, 0xFF	; 255
    4f86:	80 81       	ld	r24, Z
    4f88:	6c 91       	ld	r22, X
    4f8a:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	a0 e8       	ldi	r26, 0x80	; 128
    4f94:	bf e3       	ldi	r27, 0x3F	; 63
    4f96:	8b 87       	std	Y+11, r24	; 0x0b
    4f98:	9c 87       	std	Y+12, r25	; 0x0c
    4f9a:	ad 87       	std	Y+13, r26	; 0x0d
    4f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	30 e0       	ldi	r19, 0x00	; 0
    4faa:	4a ef       	ldi	r20, 0xFA	; 250
    4fac:	54 e4       	ldi	r21, 0x44	; 68
    4fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	8f 83       	std	Y+7, r24	; 0x07
    4fb8:	98 87       	std	Y+8, r25	; 0x08
    4fba:	a9 87       	std	Y+9, r26	; 0x09
    4fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc0:	78 85       	ldd	r23, Y+8	; 0x08
    4fc2:	89 85       	ldd	r24, Y+9	; 0x09
    4fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc6:	20 e0       	ldi	r18, 0x00	; 0
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	40 e8       	ldi	r20, 0x80	; 128
    4fcc:	5f e3       	ldi	r21, 0x3F	; 63
    4fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fd2:	88 23       	and	r24, r24
    4fd4:	2c f4       	brge	.+10     	; 0x4fe0 <LCD_voidInit+0x1550>
		__ticks = 1;
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	9e 83       	std	Y+6, r25	; 0x06
    4fdc:	8d 83       	std	Y+5, r24	; 0x05
    4fde:	3f c0       	rjmp	.+126    	; 0x505e <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    4fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fe2:	78 85       	ldd	r23, Y+8	; 0x08
    4fe4:	89 85       	ldd	r24, Y+9	; 0x09
    4fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	3f ef       	ldi	r19, 0xFF	; 255
    4fec:	4f e7       	ldi	r20, 0x7F	; 127
    4fee:	57 e4       	ldi	r21, 0x47	; 71
    4ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ff4:	18 16       	cp	r1, r24
    4ff6:	4c f5       	brge	.+82     	; 0x504a <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	40 e2       	ldi	r20, 0x20	; 32
    5006:	51 e4       	ldi	r21, 0x41	; 65
    5008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	bc 01       	movw	r22, r24
    5012:	cd 01       	movw	r24, r26
    5014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5018:	dc 01       	movw	r26, r24
    501a:	cb 01       	movw	r24, r22
    501c:	9e 83       	std	Y+6, r25	; 0x06
    501e:	8d 83       	std	Y+5, r24	; 0x05
    5020:	0f c0       	rjmp	.+30     	; 0x5040 <LCD_voidInit+0x15b0>
    5022:	88 ec       	ldi	r24, 0xC8	; 200
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	9c 83       	std	Y+4, r25	; 0x04
    5028:	8b 83       	std	Y+3, r24	; 0x03
    502a:	8b 81       	ldd	r24, Y+3	; 0x03
    502c:	9c 81       	ldd	r25, Y+4	; 0x04
    502e:	01 97       	sbiw	r24, 0x01	; 1
    5030:	f1 f7       	brne	.-4      	; 0x502e <LCD_voidInit+0x159e>
    5032:	9c 83       	std	Y+4, r25	; 0x04
    5034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5036:	8d 81       	ldd	r24, Y+5	; 0x05
    5038:	9e 81       	ldd	r25, Y+6	; 0x06
    503a:	01 97       	sbiw	r24, 0x01	; 1
    503c:	9e 83       	std	Y+6, r25	; 0x06
    503e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5040:	8d 81       	ldd	r24, Y+5	; 0x05
    5042:	9e 81       	ldd	r25, Y+6	; 0x06
    5044:	00 97       	sbiw	r24, 0x00	; 0
    5046:	69 f7       	brne	.-38     	; 0x5022 <LCD_voidInit+0x1592>
    5048:	14 c0       	rjmp	.+40     	; 0x5072 <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    504a:	6f 81       	ldd	r22, Y+7	; 0x07
    504c:	78 85       	ldd	r23, Y+8	; 0x08
    504e:	89 85       	ldd	r24, Y+9	; 0x09
    5050:	9a 85       	ldd	r25, Y+10	; 0x0a
    5052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5056:	dc 01       	movw	r26, r24
    5058:	cb 01       	movw	r24, r22
    505a:	9e 83       	std	Y+6, r25	; 0x06
    505c:	8d 83       	std	Y+5, r24	; 0x05
    505e:	8d 81       	ldd	r24, Y+5	; 0x05
    5060:	9e 81       	ldd	r25, Y+6	; 0x06
    5062:	9a 83       	std	Y+2, r25	; 0x02
    5064:	89 83       	std	Y+1, r24	; 0x01
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	9a 81       	ldd	r25, Y+2	; 0x02
    506a:	01 97       	sbiw	r24, 0x01	; 1
    506c:	f1 f7       	brne	.-4      	; 0x506a <LCD_voidInit+0x15da>
    506e:	9a 83       	std	Y+2, r25	; 0x02
    5070:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void) 
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    5072:	de 01       	movw	r26, r28
    5074:	aa 53       	subi	r26, 0x3A	; 58
    5076:	bf 4f       	sbci	r27, 0xFF	; 255
    5078:	fe 01       	movw	r30, r28
    507a:	ea 53       	subi	r30, 0x3A	; 58
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	80 81       	ld	r24, Z
    5080:	8f 5f       	subi	r24, 0xFF	; 255
    5082:	8c 93       	st	X, r24
    5084:	fe 01       	movw	r30, r28
    5086:	ea 53       	subi	r30, 0x3A	; 58
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	80 81       	ld	r24, Z
    508c:	82 30       	cpi	r24, 0x02	; 2
    508e:	10 f4       	brcc	.+4      	; 0x5094 <LCD_voidInit+0x1604>
    5090:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <LCD_voidInit+0x26>
		
		
		
		
	}
}
    5094:	ca 53       	subi	r28, 0x3A	; 58
    5096:	df 4f       	sbci	r29, 0xFF	; 255
    5098:	0f b6       	in	r0, 0x3f	; 63
    509a:	f8 94       	cli
    509c:	de bf       	out	0x3e, r29	; 62
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	cd bf       	out	0x3d, r28	; 61
    50a2:	cf 91       	pop	r28
    50a4:	df 91       	pop	r29
    50a6:	1f 91       	pop	r17
    50a8:	0f 91       	pop	r16
    50aa:	08 95       	ret

000050ac <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    50ac:	df 93       	push	r29
    50ae:	cf 93       	push	r28
    50b0:	00 d0       	rcall	.+0      	; 0x50b2 <LCD_enuWriteCmd+0x6>
    50b2:	0f 92       	push	r0
    50b4:	cd b7       	in	r28, 0x3d	; 61
    50b6:	de b7       	in	r29, 0x3e	; 62
    50b8:	8a 83       	std	Y+2, r24	; 0x02
    50ba:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    50bc:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    50be:	8a 81       	ldd	r24, Y+2	; 0x02
    50c0:	82 30       	cpi	r24, 0x02	; 2
    50c2:	c8 f4       	brcc	.+50     	; 0x50f6 <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8LOW);
    50c4:	8a 81       	ldd	r24, Y+2	; 0x02
    50c6:	28 2f       	mov	r18, r24
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	c9 01       	movw	r24, r18
    50cc:	88 0f       	add	r24, r24
    50ce:	99 1f       	adc	r25, r25
    50d0:	82 0f       	add	r24, r18
    50d2:	93 1f       	adc	r25, r19
    50d4:	88 0f       	add	r24, r24
    50d6:	99 1f       	adc	r25, r25
    50d8:	88 0f       	add	r24, r24
    50da:	99 1f       	adc	r25, r25
    50dc:	fc 01       	movw	r30, r24
    50de:	e7 54       	subi	r30, 0x47	; 71
    50e0:	fe 4f       	sbci	r31, 0xFE	; 254
    50e2:	80 81       	ld	r24, Z
    50e4:	60 e0       	ldi	r22, 0x00	; 0
    50e6:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
    50ea:	8a 81       	ldd	r24, Y+2	; 0x02
    50ec:	6b 81       	ldd	r22, Y+3	; 0x03
    50ee:	0e 94 b2 28 	call	0x5164	; 0x5164 <LCD_enuHelp>
    50f2:	89 83       	std	Y+1, r24	; 0x01
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <LCD_enuWriteCmd+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    50f6:	82 e0       	ldi	r24, 0x02	; 2
    50f8:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    50fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	0f 90       	pop	r0
    5102:	cf 91       	pop	r28
    5104:	df 91       	pop	r29
    5106:	08 95       	ret

00005108 <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    5108:	df 93       	push	r29
    510a:	cf 93       	push	r28
    510c:	00 d0       	rcall	.+0      	; 0x510e <LCD_enuWriteChar+0x6>
    510e:	0f 92       	push	r0
    5110:	cd b7       	in	r28, 0x3d	; 61
    5112:	de b7       	in	r29, 0x3e	; 62
    5114:	8a 83       	std	Y+2, r24	; 0x02
    5116:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    5118:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	82 30       	cpi	r24, 0x02	; 2
    511e:	c8 f4       	brcc	.+50     	; 0x5152 <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8HIGH);
    5120:	8a 81       	ldd	r24, Y+2	; 0x02
    5122:	28 2f       	mov	r18, r24
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	c9 01       	movw	r24, r18
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	82 0f       	add	r24, r18
    512e:	93 1f       	adc	r25, r19
    5130:	88 0f       	add	r24, r24
    5132:	99 1f       	adc	r25, r25
    5134:	88 0f       	add	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	fc 01       	movw	r30, r24
    513a:	e7 54       	subi	r30, 0x47	; 71
    513c:	fe 4f       	sbci	r31, 0xFE	; 254
    513e:	80 81       	ld	r24, Z
    5140:	61 e0       	ldi	r22, 0x01	; 1
    5142:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8DataCpy );
    5146:	8a 81       	ldd	r24, Y+2	; 0x02
    5148:	6b 81       	ldd	r22, Y+3	; 0x03
    514a:	0e 94 b2 28 	call	0x5164	; 0x5164 <LCD_enuHelp>
    514e:	89 83       	std	Y+1, r24	; 0x01
    5150:	02 c0       	rjmp	.+4      	; 0x5156 <LCD_enuWriteChar+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    5152:	82 e0       	ldi	r24, 0x02	; 2
    5154:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    5156:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	08 95       	ret

00005164 <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
    5164:	df 93       	push	r29
    5166:	cf 93       	push	r28
    5168:	00 d0       	rcall	.+0      	; 0x516a <LCD_enuHelp+0x6>
    516a:	00 d0       	rcall	.+0      	; 0x516c <LCD_enuHelp+0x8>
    516c:	cd b7       	in	r28, 0x3d	; 61
    516e:	de b7       	in	r29, 0x3e	; 62
    5170:	8b 83       	std	Y+3, r24	; 0x03
    5172:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    5174:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
    5176:	8b 81       	ldd	r24, Y+3	; 0x03
    5178:	28 2f       	mov	r18, r24
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	c9 01       	movw	r24, r18
    517e:	88 0f       	add	r24, r24
    5180:	99 1f       	adc	r25, r25
    5182:	82 0f       	add	r24, r18
    5184:	93 1f       	adc	r25, r19
    5186:	88 0f       	add	r24, r24
    5188:	99 1f       	adc	r25, r25
    518a:	88 0f       	add	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	fc 01       	movw	r30, r24
    5190:	e5 54       	subi	r30, 0x45	; 69
    5192:	fe 4f       	sbci	r31, 0xFE	; 254
    5194:	80 81       	ld	r24, Z
    5196:	61 e0       	ldi	r22, 0x01	; 1
    5198:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
    519c:	8b 81       	ldd	r24, Y+3	; 0x03
    519e:	28 2f       	mov	r18, r24
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	c9 01       	movw	r24, r18
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	88 0f       	add	r24, r24
    51ae:	99 1f       	adc	r25, r25
    51b0:	01 96       	adiw	r24, 0x01	; 1
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	fc 01       	movw	r30, r24
    51b8:	e8 54       	subi	r30, 0x48	; 72
    51ba:	fe 4f       	sbci	r31, 0xFE	; 254
    51bc:	80 81       	ld	r24, Z
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    51c4:	8b 81       	ldd	r24, Y+3	; 0x03
    51c6:	28 2f       	mov	r18, r24
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	c9 01       	movw	r24, r18
    51cc:	88 0f       	add	r24, r24
    51ce:	99 1f       	adc	r25, r25
    51d0:	82 0f       	add	r24, r18
    51d2:	93 1f       	adc	r25, r19
    51d4:	88 0f       	add	r24, r24
    51d6:	99 1f       	adc	r25, r25
    51d8:	88 0f       	add	r24, r24
    51da:	99 1f       	adc	r25, r25
    51dc:	fc 01       	movw	r30, r24
    51de:	e8 54       	subi	r30, 0x48	; 72
    51e0:	fe 4f       	sbci	r31, 0xFE	; 254
    51e2:	80 81       	ld	r24, Z
    51e4:	82 95       	swap	r24
    51e6:	86 95       	lsr	r24
    51e8:	87 70       	andi	r24, 0x07	; 7
    51ea:	81 70       	andi	r24, 0x01	; 1
    51ec:	81 30       	cpi	r24, 0x01	; 1
    51ee:	89 f5       	brne	.+98     	; 0x5252 <LCD_enuHelp+0xee>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    51f0:	19 82       	std	Y+1, r1	; 0x01
    51f2:	2b c0       	rjmp	.+86     	; 0x524a <LCD_enuHelp+0xe6>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    51f4:	8b 81       	ldd	r24, Y+3	; 0x03
    51f6:	28 2f       	mov	r18, r24
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	89 81       	ldd	r24, Y+1	; 0x01
    51fc:	48 2f       	mov	r20, r24
    51fe:	50 e0       	ldi	r21, 0x00	; 0
    5200:	c9 01       	movw	r24, r18
    5202:	88 0f       	add	r24, r24
    5204:	99 1f       	adc	r25, r25
    5206:	82 0f       	add	r24, r18
    5208:	93 1f       	adc	r25, r19
    520a:	88 0f       	add	r24, r24
    520c:	99 1f       	adc	r25, r25
    520e:	88 0f       	add	r24, r24
    5210:	99 1f       	adc	r25, r25
    5212:	84 0f       	add	r24, r20
    5214:	95 1f       	adc	r25, r21
    5216:	fc 01       	movw	r30, r24
    5218:	e4 54       	subi	r30, 0x44	; 68
    521a:	fe 4f       	sbci	r31, 0xFE	; 254
    521c:	40 81       	ld	r20, Z
    521e:	8c 81       	ldd	r24, Y+4	; 0x04
    5220:	28 2f       	mov	r18, r24
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	89 81       	ldd	r24, Y+1	; 0x01
    5226:	88 2f       	mov	r24, r24
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	b9 01       	movw	r22, r18
    522c:	02 c0       	rjmp	.+4      	; 0x5232 <LCD_enuHelp+0xce>
    522e:	75 95       	asr	r23
    5230:	67 95       	ror	r22
    5232:	8a 95       	dec	r24
    5234:	e2 f7       	brpl	.-8      	; 0x522e <LCD_enuHelp+0xca>
    5236:	cb 01       	movw	r24, r22
    5238:	98 2f       	mov	r25, r24
    523a:	91 70       	andi	r25, 0x01	; 1
    523c:	84 2f       	mov	r24, r20
    523e:	69 2f       	mov	r22, r25
    5240:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	8f 5f       	subi	r24, 0xFF	; 255
    5248:	89 83       	std	Y+1, r24	; 0x01
    524a:	89 81       	ldd	r24, Y+1	; 0x01
    524c:	88 30       	cpi	r24, 0x08	; 8
    524e:	90 f2       	brcs	.-92     	; 0x51f4 <LCD_enuHelp+0x90>
    5250:	4a c0       	rjmp	.+148    	; 0x52e6 <LCD_enuHelp+0x182>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    5252:	8b 81       	ldd	r24, Y+3	; 0x03
    5254:	28 2f       	mov	r18, r24
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	c9 01       	movw	r24, r18
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	82 0f       	add	r24, r18
    5260:	93 1f       	adc	r25, r19
    5262:	88 0f       	add	r24, r24
    5264:	99 1f       	adc	r25, r25
    5266:	88 0f       	add	r24, r24
    5268:	99 1f       	adc	r25, r25
    526a:	fc 01       	movw	r30, r24
    526c:	e8 54       	subi	r30, 0x48	; 72
    526e:	fe 4f       	sbci	r31, 0xFE	; 254
    5270:	80 81       	ld	r24, Z
    5272:	82 95       	swap	r24
    5274:	86 95       	lsr	r24
    5276:	87 70       	andi	r24, 0x07	; 7
    5278:	81 70       	andi	r24, 0x01	; 1
    527a:	88 23       	and	r24, r24
    527c:	91 f5       	brne	.+100    	; 0x52e2 <LCD_enuHelp+0x17e>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    527e:	84 e0       	ldi	r24, 0x04	; 4
    5280:	89 83       	std	Y+1, r24	; 0x01
    5282:	2b c0       	rjmp	.+86     	; 0x52da <LCD_enuHelp+0x176>
			{
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    5284:	8b 81       	ldd	r24, Y+3	; 0x03
    5286:	28 2f       	mov	r18, r24
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	48 2f       	mov	r20, r24
    528e:	50 e0       	ldi	r21, 0x00	; 0
    5290:	c9 01       	movw	r24, r18
    5292:	88 0f       	add	r24, r24
    5294:	99 1f       	adc	r25, r25
    5296:	82 0f       	add	r24, r18
    5298:	93 1f       	adc	r25, r19
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	88 0f       	add	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	84 0f       	add	r24, r20
    52a4:	95 1f       	adc	r25, r21
    52a6:	fc 01       	movw	r30, r24
    52a8:	e4 54       	subi	r30, 0x44	; 68
    52aa:	fe 4f       	sbci	r31, 0xFE	; 254
    52ac:	40 81       	ld	r20, Z
    52ae:	8c 81       	ldd	r24, Y+4	; 0x04
    52b0:	28 2f       	mov	r18, r24
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	89 81       	ldd	r24, Y+1	; 0x01
    52b6:	88 2f       	mov	r24, r24
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	b9 01       	movw	r22, r18
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <LCD_enuHelp+0x15e>
    52be:	75 95       	asr	r23
    52c0:	67 95       	ror	r22
    52c2:	8a 95       	dec	r24
    52c4:	e2 f7       	brpl	.-8      	; 0x52be <LCD_enuHelp+0x15a>
    52c6:	cb 01       	movw	r24, r22
    52c8:	98 2f       	mov	r25, r24
    52ca:	91 70       	andi	r25, 0x01	; 1
    52cc:	84 2f       	mov	r24, r20
    52ce:	69 2f       	mov	r22, r25
    52d0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	8f 5f       	subi	r24, 0xFF	; 255
    52d8:	89 83       	std	Y+1, r24	; 0x01
    52da:	89 81       	ldd	r24, Y+1	; 0x01
    52dc:	88 30       	cpi	r24, 0x08	; 8
    52de:	90 f2       	brcs	.-92     	; 0x5284 <LCD_enuHelp+0x120>
    52e0:	02 c0       	rjmp	.+4      	; 0x52e6 <LCD_enuHelp+0x182>
			}
			
		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
    52e2:	84 e0       	ldi	r24, 0x04	; 4
    52e4:	8a 83       	std	Y+2, r24	; 0x02
		}
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch     ,DIO_u8LOW);
    52e6:	8b 81       	ldd	r24, Y+3	; 0x03
    52e8:	28 2f       	mov	r18, r24
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	c9 01       	movw	r24, r18
    52ee:	88 0f       	add	r24, r24
    52f0:	99 1f       	adc	r25, r25
    52f2:	82 0f       	add	r24, r18
    52f4:	93 1f       	adc	r25, r19
    52f6:	88 0f       	add	r24, r24
    52f8:	99 1f       	adc	r25, r25
    52fa:	88 0f       	add	r24, r24
    52fc:	99 1f       	adc	r25, r25
    52fe:	fc 01       	movw	r30, r24
    5300:	e5 54       	subi	r30, 0x45	; 69
    5302:	fe 4f       	sbci	r31, 0xFE	; 254
    5304:	80 81       	ld	r24, Z
    5306:	60 e0       	ldi	r22, 0x00	; 0
    5308:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	
	return enuErrorStateLoc ;
    530c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	cf 91       	pop	r28
    5318:	df 91       	pop	r29
    531a:	08 95       	ret

0000531c <LCD_enuWriteString>:


tenuErrorStatus LCD_enuWriteString (uint8 u8LcdNumCpy , uint8  *pu8DataCpy , uint8 size )
{
    531c:	df 93       	push	r29
    531e:	cf 93       	push	r28
    5320:	00 d0       	rcall	.+0      	; 0x5322 <LCD_enuWriteString+0x6>
    5322:	00 d0       	rcall	.+0      	; 0x5324 <LCD_enuWriteString+0x8>
    5324:	00 d0       	rcall	.+0      	; 0x5326 <LCD_enuWriteString+0xa>
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
    532a:	8b 83       	std	Y+3, r24	; 0x03
    532c:	7d 83       	std	Y+5, r23	; 0x05
    532e:	6c 83       	std	Y+4, r22	; 0x04
    5330:	4e 83       	std	Y+6, r20	; 0x06

	tenuErrorStatus enuErrorStateLoc = E_OK ;
    5332:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;

	for(u8CntrLoc = 0 ; u8CntrLoc <= size ; u8CntrLoc++)
    5334:	19 82       	std	Y+1, r1	; 0x01
    5336:	10 c0       	rjmp	.+32     	; 0x5358 <LCD_enuWriteString+0x3c>
	{
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[u8CntrLoc]);
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	28 2f       	mov	r18, r24
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	8c 81       	ldd	r24, Y+4	; 0x04
    5340:	9d 81       	ldd	r25, Y+5	; 0x05
    5342:	fc 01       	movw	r30, r24
    5344:	e2 0f       	add	r30, r18
    5346:	f3 1f       	adc	r31, r19
    5348:	90 81       	ld	r25, Z
    534a:	8b 81       	ldd	r24, Y+3	; 0x03
    534c:	69 2f       	mov	r22, r25
    534e:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
{

	tenuErrorStatus enuErrorStateLoc = E_OK ;
	uint8 u8CntrLoc;

	for(u8CntrLoc = 0 ; u8CntrLoc <= size ; u8CntrLoc++)
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	8f 5f       	subi	r24, 0xFF	; 255
    5356:	89 83       	std	Y+1, r24	; 0x01
    5358:	99 81       	ldd	r25, Y+1	; 0x01
    535a:	8e 81       	ldd	r24, Y+6	; 0x06
    535c:	89 17       	cp	r24, r25
    535e:	60 f7       	brcc	.-40     	; 0x5338 <LCD_enuWriteString+0x1c>
	{
		LCD_enuWriteChar(u8LcdNumCpy,pu8DataCpy[u8CntrLoc]);
	}


	return enuErrorStateLoc ;
    5360:	8a 81       	ldd	r24, Y+2	; 0x02

}
    5362:	26 96       	adiw	r28, 0x06	; 6
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	f8 94       	cli
    5368:	de bf       	out	0x3e, r29	; 62
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	cd bf       	out	0x3d, r28	; 61
    536e:	cf 91       	pop	r28
    5370:	df 91       	pop	r29
    5372:	08 95       	ret

00005374 <LCD_enuWritenumber>:

void LCD_enuWritenumber(uint8 u8LcdNumCpy ,float32  pu8DataCpy)
{
    5374:	0f 93       	push	r16
    5376:	1f 93       	push	r17
    5378:	df 93       	push	r29
    537a:	cf 93       	push	r28
    537c:	cd b7       	in	r28, 0x3d	; 61
    537e:	de b7       	in	r29, 0x3e	; 62
    5380:	cf 56       	subi	r28, 0x6F	; 111
    5382:	d0 40       	sbci	r29, 0x00	; 0
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	f8 94       	cli
    5388:	de bf       	out	0x3e, r29	; 62
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	cd bf       	out	0x3d, r28	; 61
    538e:	fe 01       	movw	r30, r28
    5390:	e5 59       	subi	r30, 0x95	; 149
    5392:	ff 4f       	sbci	r31, 0xFF	; 255
    5394:	80 83       	st	Z, r24
    5396:	fe 01       	movw	r30, r28
    5398:	e4 59       	subi	r30, 0x94	; 148
    539a:	ff 4f       	sbci	r31, 0xFF	; 255
    539c:	40 83       	st	Z, r20
    539e:	51 83       	std	Z+1, r21	; 0x01
    53a0:	62 83       	std	Z+2, r22	; 0x02
    53a2:	73 83       	std	Z+3, r23	; 0x03
	uint8 array[100];
	uint8 cntr = 0 ;
    53a4:	1e 82       	std	Y+6, r1	; 0x06
	sint8 loopcntr;
	float32 temp;

    if(pu8DataCpy < 0)
    53a6:	fe 01       	movw	r30, r28
    53a8:	e4 59       	subi	r30, 0x94	; 148
    53aa:	ff 4f       	sbci	r31, 0xFF	; 255
    53ac:	60 81       	ld	r22, Z
    53ae:	71 81       	ldd	r23, Z+1	; 0x01
    53b0:	82 81       	ldd	r24, Z+2	; 0x02
    53b2:	93 81       	ldd	r25, Z+3	; 0x03
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	40 e0       	ldi	r20, 0x00	; 0
    53ba:	50 e0       	ldi	r21, 0x00	; 0
    53bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53c0:	88 23       	and	r24, r24
    53c2:	94 f5       	brge	.+100    	; 0x5428 <LCD_enuWritenumber+0xb4>
    {
         LCD_enuWriteChar(u8LcdNumCpy , '-');
    53c4:	fe 01       	movw	r30, r28
    53c6:	e5 59       	subi	r30, 0x95	; 149
    53c8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ca:	80 81       	ld	r24, Z
    53cc:	6d e2       	ldi	r22, 0x2D	; 45
    53ce:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
         temp = 0 - pu8DataCpy;
    53d2:	fe 01       	movw	r30, r28
    53d4:	e4 59       	subi	r30, 0x94	; 148
    53d6:	ff 4f       	sbci	r31, 0xFF	; 255
    53d8:	60 e0       	ldi	r22, 0x00	; 0
    53da:	70 e0       	ldi	r23, 0x00	; 0
    53dc:	80 e0       	ldi	r24, 0x00	; 0
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	20 81       	ld	r18, Z
    53e2:	31 81       	ldd	r19, Z+1	; 0x01
    53e4:	42 81       	ldd	r20, Z+2	; 0x02
    53e6:	53 81       	ldd	r21, Z+3	; 0x03
    53e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    53ec:	dc 01       	movw	r26, r24
    53ee:	cb 01       	movw	r24, r22
    53f0:	89 83       	std	Y+1, r24	; 0x01
    53f2:	9a 83       	std	Y+2, r25	; 0x02
    53f4:	ab 83       	std	Y+3, r26	; 0x03
    53f6:	bc 83       	std	Y+4, r27	; 0x04
         pu8DataCpy = 0 - pu8DataCpy ;
    53f8:	8e 01       	movw	r16, r28
    53fa:	04 59       	subi	r16, 0x94	; 148
    53fc:	1f 4f       	sbci	r17, 0xFF	; 255
    53fe:	fe 01       	movw	r30, r28
    5400:	e4 59       	subi	r30, 0x94	; 148
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	60 e0       	ldi	r22, 0x00	; 0
    5406:	70 e0       	ldi	r23, 0x00	; 0
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	20 81       	ld	r18, Z
    540e:	31 81       	ldd	r19, Z+1	; 0x01
    5410:	42 81       	ldd	r20, Z+2	; 0x02
    5412:	53 81       	ldd	r21, Z+3	; 0x03
    5414:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	f8 01       	movw	r30, r16
    541e:	80 83       	st	Z, r24
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	a2 83       	std	Z+2, r26	; 0x02
    5424:	b3 83       	std	Z+3, r27	; 0x03
    5426:	0b c0       	rjmp	.+22     	; 0x543e <LCD_enuWritenumber+0xca>
    }
    else
    {
    	temp = pu8DataCpy ;
    5428:	fe 01       	movw	r30, r28
    542a:	e4 59       	subi	r30, 0x94	; 148
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	80 81       	ld	r24, Z
    5430:	91 81       	ldd	r25, Z+1	; 0x01
    5432:	a2 81       	ldd	r26, Z+2	; 0x02
    5434:	b3 81       	ldd	r27, Z+3	; 0x03
    5436:	89 83       	std	Y+1, r24	; 0x01
    5438:	9a 83       	std	Y+2, r25	; 0x02
    543a:	ab 83       	std	Y+3, r26	; 0x03
    543c:	bc 83       	std	Y+4, r27	; 0x04
    }

	do{
		array[cntr] = (int)(temp)%10 ;
    543e:	8e 81       	ldd	r24, Y+6	; 0x06
    5440:	08 2f       	mov	r16, r24
    5442:	10 e0       	ldi	r17, 0x00	; 0
    5444:	69 81       	ldd	r22, Y+1	; 0x01
    5446:	7a 81       	ldd	r23, Y+2	; 0x02
    5448:	8b 81       	ldd	r24, Y+3	; 0x03
    544a:	9c 81       	ldd	r25, Y+4	; 0x04
    544c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5450:	dc 01       	movw	r26, r24
    5452:	cb 01       	movw	r24, r22
    5454:	2a e0       	ldi	r18, 0x0A	; 10
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	b9 01       	movw	r22, r18
    545a:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <__divmodhi4>
    545e:	28 2f       	mov	r18, r24
    5460:	ce 01       	movw	r24, r28
    5462:	07 96       	adiw	r24, 0x07	; 7
    5464:	fc 01       	movw	r30, r24
    5466:	e0 0f       	add	r30, r16
    5468:	f1 1f       	adc	r31, r17
    546a:	20 83       	st	Z, r18
		array[cntr] = array[cntr] + '0' ;
    546c:	8e 81       	ldd	r24, Y+6	; 0x06
    546e:	48 2f       	mov	r20, r24
    5470:	50 e0       	ldi	r21, 0x00	; 0
    5472:	8e 81       	ldd	r24, Y+6	; 0x06
    5474:	28 2f       	mov	r18, r24
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	ce 01       	movw	r24, r28
    547a:	07 96       	adiw	r24, 0x07	; 7
    547c:	fc 01       	movw	r30, r24
    547e:	e2 0f       	add	r30, r18
    5480:	f3 1f       	adc	r31, r19
    5482:	80 81       	ld	r24, Z
    5484:	28 2f       	mov	r18, r24
    5486:	20 5d       	subi	r18, 0xD0	; 208
    5488:	ce 01       	movw	r24, r28
    548a:	07 96       	adiw	r24, 0x07	; 7
    548c:	fc 01       	movw	r30, r24
    548e:	e4 0f       	add	r30, r20
    5490:	f5 1f       	adc	r31, r21
    5492:	20 83       	st	Z, r18
		temp = temp/10;
    5494:	69 81       	ldd	r22, Y+1	; 0x01
    5496:	7a 81       	ldd	r23, Y+2	; 0x02
    5498:	8b 81       	ldd	r24, Y+3	; 0x03
    549a:	9c 81       	ldd	r25, Y+4	; 0x04
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	40 e2       	ldi	r20, 0x20	; 32
    54a2:	51 e4       	ldi	r21, 0x41	; 65
    54a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	89 83       	std	Y+1, r24	; 0x01
    54ae:	9a 83       	std	Y+2, r25	; 0x02
    54b0:	ab 83       	std	Y+3, r26	; 0x03
    54b2:	bc 83       	std	Y+4, r27	; 0x04
		cntr++;
    54b4:	8e 81       	ldd	r24, Y+6	; 0x06
    54b6:	8f 5f       	subi	r24, 0xFF	; 255
    54b8:	8e 83       	std	Y+6, r24	; 0x06
	}while( (int)temp !=0);
    54ba:	69 81       	ldd	r22, Y+1	; 0x01
    54bc:	7a 81       	ldd	r23, Y+2	; 0x02
    54be:	8b 81       	ldd	r24, Y+3	; 0x03
    54c0:	9c 81       	ldd	r25, Y+4	; 0x04
    54c2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    54c6:	dc 01       	movw	r26, r24
    54c8:	cb 01       	movw	r24, r22
    54ca:	00 97       	sbiw	r24, 0x00	; 0
    54cc:	09 f0       	breq	.+2      	; 0x54d0 <LCD_enuWritenumber+0x15c>
    54ce:	b7 cf       	rjmp	.-146    	; 0x543e <LCD_enuWritenumber+0xca>

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    54d0:	8e 81       	ldd	r24, Y+6	; 0x06
    54d2:	81 50       	subi	r24, 0x01	; 1
    54d4:	8d 83       	std	Y+5, r24	; 0x05
    54d6:	15 c0       	rjmp	.+42     	; 0x5502 <LCD_enuWritenumber+0x18e>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
    54d8:	8d 81       	ldd	r24, Y+5	; 0x05
    54da:	28 2f       	mov	r18, r24
    54dc:	33 27       	eor	r19, r19
    54de:	27 fd       	sbrc	r18, 7
    54e0:	30 95       	com	r19
    54e2:	ce 01       	movw	r24, r28
    54e4:	07 96       	adiw	r24, 0x07	; 7
    54e6:	fc 01       	movw	r30, r24
    54e8:	e2 0f       	add	r30, r18
    54ea:	f3 1f       	adc	r31, r19
    54ec:	90 81       	ld	r25, Z
    54ee:	fe 01       	movw	r30, r28
    54f0:	e5 59       	subi	r30, 0x95	; 149
    54f2:	ff 4f       	sbci	r31, 0xFF	; 255
    54f4:	80 81       	ld	r24, Z
    54f6:	69 2f       	mov	r22, r25
    54f8:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
		array[cntr] = array[cntr] + '0' ;
		temp = temp/10;
		cntr++;
	}while( (int)temp !=0);

	for(loopcntr = (cntr-1) ; loopcntr >=0  ; loopcntr --){
    54fc:	8d 81       	ldd	r24, Y+5	; 0x05
    54fe:	81 50       	subi	r24, 0x01	; 1
    5500:	8d 83       	std	Y+5, r24	; 0x05
    5502:	8d 81       	ldd	r24, Y+5	; 0x05
    5504:	88 23       	and	r24, r24
    5506:	44 f7       	brge	.-48     	; 0x54d8 <LCD_enuWritenumber+0x164>
		LCD_enuWriteChar(u8LcdNumCpy ,array[loopcntr]);
	}


	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){
    5508:	fe 01       	movw	r30, r28
    550a:	e4 59       	subi	r30, 0x94	; 148
    550c:	ff 4f       	sbci	r31, 0xFF	; 255
    550e:	60 81       	ld	r22, Z
    5510:	71 81       	ldd	r23, Z+1	; 0x01
    5512:	82 81       	ldd	r24, Z+2	; 0x02
    5514:	93 81       	ldd	r25, Z+3	; 0x03
    5516:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	aa 27       	eor	r26, r26
    5520:	97 fd       	sbrc	r25, 7
    5522:	a0 95       	com	r26
    5524:	ba 2f       	mov	r27, r26
    5526:	bc 01       	movw	r22, r24
    5528:	cd 01       	movw	r24, r26
    552a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    552e:	9b 01       	movw	r18, r22
    5530:	ac 01       	movw	r20, r24
    5532:	fe 01       	movw	r30, r28
    5534:	e4 59       	subi	r30, 0x94	; 148
    5536:	ff 4f       	sbci	r31, 0xFF	; 255
    5538:	60 81       	ld	r22, Z
    553a:	71 81       	ldd	r23, Z+1	; 0x01
    553c:	82 81       	ldd	r24, Z+2	; 0x02
    553e:	93 81       	ldd	r25, Z+3	; 0x03
    5540:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	bc 01       	movw	r22, r24
    554a:	cd 01       	movw	r24, r26
    554c:	2f e6       	ldi	r18, 0x6F	; 111
    554e:	32 e1       	ldi	r19, 0x12	; 18
    5550:	43 e8       	ldi	r20, 0x83	; 131
    5552:	5a e3       	ldi	r21, 0x3A	; 58
    5554:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5558:	18 16       	cp	r1, r24
    555a:	0c f0       	brlt	.+2      	; 0x555e <LCD_enuWritenumber+0x1ea>
    555c:	79 c0       	rjmp	.+242    	; 0x5650 <LCD_enuWritenumber+0x2dc>

		LCD_enuWriteChar(u8LcdNumCpy , '.');
    555e:	fe 01       	movw	r30, r28
    5560:	e5 59       	subi	r30, 0x95	; 149
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	80 81       	ld	r24, Z
    5566:	6e e2       	ldi	r22, 0x2E	; 46
    5568:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    556c:	1d 82       	std	Y+5, r1	; 0x05
    556e:	6c c0       	rjmp	.+216    	; 0x5648 <LCD_enuWritenumber+0x2d4>
			pu8DataCpy = pu8DataCpy - (int)pu8DataCpy;
    5570:	fe 01       	movw	r30, r28
    5572:	e4 59       	subi	r30, 0x94	; 148
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 81       	ld	r22, Z
    5578:	71 81       	ldd	r23, Z+1	; 0x01
    557a:	82 81       	ldd	r24, Z+2	; 0x02
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	aa 27       	eor	r26, r26
    5588:	97 fd       	sbrc	r25, 7
    558a:	a0 95       	com	r26
    558c:	ba 2f       	mov	r27, r26
    558e:	bc 01       	movw	r22, r24
    5590:	cd 01       	movw	r24, r26
    5592:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5596:	9b 01       	movw	r18, r22
    5598:	ac 01       	movw	r20, r24
    559a:	8e 01       	movw	r16, r28
    559c:	04 59       	subi	r16, 0x94	; 148
    559e:	1f 4f       	sbci	r17, 0xFF	; 255
    55a0:	fe 01       	movw	r30, r28
    55a2:	e4 59       	subi	r30, 0x94	; 148
    55a4:	ff 4f       	sbci	r31, 0xFF	; 255
    55a6:	60 81       	ld	r22, Z
    55a8:	71 81       	ldd	r23, Z+1	; 0x01
    55aa:	82 81       	ldd	r24, Z+2	; 0x02
    55ac:	93 81       	ldd	r25, Z+3	; 0x03
    55ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	f8 01       	movw	r30, r16
    55b8:	80 83       	st	Z, r24
    55ba:	91 83       	std	Z+1, r25	; 0x01
    55bc:	a2 83       	std	Z+2, r26	; 0x02
    55be:	b3 83       	std	Z+3, r27	; 0x03
			pu8DataCpy = pu8DataCpy*10 ;
    55c0:	8e 01       	movw	r16, r28
    55c2:	04 59       	subi	r16, 0x94	; 148
    55c4:	1f 4f       	sbci	r17, 0xFF	; 255
    55c6:	fe 01       	movw	r30, r28
    55c8:	e4 59       	subi	r30, 0x94	; 148
    55ca:	ff 4f       	sbci	r31, 0xFF	; 255
    55cc:	60 81       	ld	r22, Z
    55ce:	71 81       	ldd	r23, Z+1	; 0x01
    55d0:	82 81       	ldd	r24, Z+2	; 0x02
    55d2:	93 81       	ldd	r25, Z+3	; 0x03
    55d4:	20 e0       	ldi	r18, 0x00	; 0
    55d6:	30 e0       	ldi	r19, 0x00	; 0
    55d8:	40 e2       	ldi	r20, 0x20	; 32
    55da:	51 e4       	ldi	r21, 0x41	; 65
    55dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	f8 01       	movw	r30, r16
    55e6:	80 83       	st	Z, r24
    55e8:	91 83       	std	Z+1, r25	; 0x01
    55ea:	a2 83       	std	Z+2, r26	; 0x02
    55ec:	b3 83       	std	Z+3, r27	; 0x03
			temp = (int)pu8DataCpy + '0';
    55ee:	fe 01       	movw	r30, r28
    55f0:	e4 59       	subi	r30, 0x94	; 148
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	82 81       	ldd	r24, Z+2	; 0x02
    55fa:	93 81       	ldd	r25, Z+3	; 0x03
    55fc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5600:	dc 01       	movw	r26, r24
    5602:	cb 01       	movw	r24, r22
    5604:	c0 96       	adiw	r24, 0x30	; 48
    5606:	aa 27       	eor	r26, r26
    5608:	97 fd       	sbrc	r25, 7
    560a:	a0 95       	com	r26
    560c:	ba 2f       	mov	r27, r26
    560e:	bc 01       	movw	r22, r24
    5610:	cd 01       	movw	r24, r26
    5612:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5616:	dc 01       	movw	r26, r24
    5618:	cb 01       	movw	r24, r22
    561a:	89 83       	std	Y+1, r24	; 0x01
    561c:	9a 83       	std	Y+2, r25	; 0x02
    561e:	ab 83       	std	Y+3, r26	; 0x03
    5620:	bc 83       	std	Y+4, r27	; 0x04
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
    5622:	69 81       	ldd	r22, Y+1	; 0x01
    5624:	7a 81       	ldd	r23, Y+2	; 0x02
    5626:	8b 81       	ldd	r24, Y+3	; 0x03
    5628:	9c 81       	ldd	r25, Y+4	; 0x04
    562a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	98 2f       	mov	r25, r24
    5634:	fe 01       	movw	r30, r28
    5636:	e5 59       	subi	r30, 0x95	; 149
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	80 81       	ld	r24, Z
    563c:	69 2f       	mov	r22, r25
    563e:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>

	if( (pu8DataCpy - (int)pu8DataCpy ) > 0.001 ){

		LCD_enuWriteChar(u8LcdNumCpy , '.');

		for(loopcntr = 0 ; loopcntr < 4 ; loopcntr++ ){
    5642:	8d 81       	ldd	r24, Y+5	; 0x05
    5644:	8f 5f       	subi	r24, 0xFF	; 255
    5646:	8d 83       	std	Y+5, r24	; 0x05
    5648:	8d 81       	ldd	r24, Y+5	; 0x05
    564a:	84 30       	cpi	r24, 0x04	; 4
    564c:	0c f4       	brge	.+2      	; 0x5650 <LCD_enuWritenumber+0x2dc>
    564e:	90 cf       	rjmp	.-224    	; 0x5570 <LCD_enuWritenumber+0x1fc>
			LCD_enuWriteChar(u8LcdNumCpy ,temp);
		}

	}

}
    5650:	c1 59       	subi	r28, 0x91	; 145
    5652:	df 4f       	sbci	r29, 0xFF	; 255
    5654:	0f b6       	in	r0, 0x3f	; 63
    5656:	f8 94       	cli
    5658:	de bf       	out	0x3e, r29	; 62
    565a:	0f be       	out	0x3f, r0	; 63
    565c:	cd bf       	out	0x3d, r28	; 61
    565e:	cf 91       	pop	r28
    5660:	df 91       	pop	r29
    5662:	1f 91       	pop	r17
    5664:	0f 91       	pop	r16
    5666:	08 95       	ret

00005668 <LCD_enuCreateCustChar>:



tenuErrorStatus LCD_enuCreateCustChar (uint8 u8LcdNumCpy , uint8 *pu8PatternCpy , uint8 u8LocationCpy) 
{
    5668:	df 93       	push	r29
    566a:	cf 93       	push	r28
    566c:	00 d0       	rcall	.+0      	; 0x566e <LCD_enuCreateCustChar+0x6>
    566e:	00 d0       	rcall	.+0      	; 0x5670 <LCD_enuCreateCustChar+0x8>
    5670:	00 d0       	rcall	.+0      	; 0x5672 <LCD_enuCreateCustChar+0xa>
    5672:	cd b7       	in	r28, 0x3d	; 61
    5674:	de b7       	in	r29, 0x3e	; 62
    5676:	8b 83       	std	Y+3, r24	; 0x03
    5678:	7d 83       	std	Y+5, r23	; 0x05
    567a:	6c 83       	std	Y+4, r22	; 0x04
    567c:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    567e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    5680:	8b 81       	ldd	r24, Y+3	; 0x03
    5682:	82 30       	cpi	r24, 0x02	; 2
    5684:	40 f5       	brcc	.+80     	; 0x56d6 <LCD_enuCreateCustChar+0x6e>
    5686:	8e 81       	ldd	r24, Y+6	; 0x06
    5688:	89 30       	cpi	r24, 0x09	; 9
    568a:	28 f5       	brcc	.+74     	; 0x56d6 <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
    568c:	8e 81       	ldd	r24, Y+6	; 0x06
    568e:	88 2f       	mov	r24, r24
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	08 96       	adiw	r24, 0x08	; 8
    5694:	88 0f       	add	r24, r24
    5696:	99 1f       	adc	r25, r25
    5698:	88 0f       	add	r24, r24
    569a:	99 1f       	adc	r25, r25
    569c:	88 0f       	add	r24, r24
    569e:	99 1f       	adc	r25, r25
    56a0:	98 2f       	mov	r25, r24
    56a2:	8b 81       	ldd	r24, Y+3	; 0x03
    56a4:	69 2f       	mov	r22, r25
    56a6:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    56aa:	19 82       	std	Y+1, r1	; 0x01
    56ac:	10 c0       	rjmp	.+32     	; 0x56ce <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy ,pu8PatternCpy[u8CntrLoc] );
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	28 2f       	mov	r18, r24
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	8c 81       	ldd	r24, Y+4	; 0x04
    56b6:	9d 81       	ldd	r25, Y+5	; 0x05
    56b8:	fc 01       	movw	r30, r24
    56ba:	e2 0f       	add	r30, r18
    56bc:	f3 1f       	adc	r31, r19
    56be:	90 81       	ld	r25, Z
    56c0:	8b 81       	ldd	r24, Y+3	; 0x03
    56c2:	69 2f       	mov	r22, r25
    56c4:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	8f 5f       	subi	r24, 0xFF	; 255
    56cc:	89 83       	std	Y+1, r24	; 0x01
    56ce:	89 81       	ldd	r24, Y+1	; 0x01
    56d0:	88 30       	cpi	r24, 0x08	; 8
    56d2:	68 f3       	brcs	.-38     	; 0x56ae <LCD_enuCreateCustChar+0x46>
    56d4:	02 c0       	rjmp	.+4      	; 0x56da <LCD_enuCreateCustChar+0x72>
		}
		
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return enuErrorStateLoc ;
    56da:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    56dc:	26 96       	adiw	r28, 0x06	; 6
    56de:	0f b6       	in	r0, 0x3f	; 63
    56e0:	f8 94       	cli
    56e2:	de bf       	out	0x3e, r29	; 62
    56e4:	0f be       	out	0x3f, r0	; 63
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	cf 91       	pop	r28
    56ea:	df 91       	pop	r29
    56ec:	08 95       	ret

000056ee <KEYPAD_voidInit>:
#include "KEYPAD_int.h"
#include "KEYPAD_config.h"
#include "KEYPAD_priv.h"

void KEYPAD_voidInit()
{
    56ee:	df 93       	push	r29
    56f0:	cf 93       	push	r28
    56f2:	cd b7       	in	r28, 0x3d	; 61
    56f4:	de b7       	in	r29, 0x3e	; 62
	/** activate pull up resistor column / inputs 	  */
	DIO_enuWritePin(KEYPAD_U8_COLUMN_1 ,DIO_u8HIGH );
    56f6:	83 e1       	ldi	r24, 0x13	; 19
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_2 ,DIO_u8HIGH );
    56fe:	84 e1       	ldi	r24, 0x14	; 20
    5700:	61 e0       	ldi	r22, 0x01	; 1
    5702:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_3 ,DIO_u8HIGH );
    5706:	85 e1       	ldi	r24, 0x15	; 21
    5708:	61 e0       	ldi	r22, 0x01	; 1
    570a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_COLUMN_4 ,DIO_u8HIGH );
    570e:	86 e1       	ldi	r24, 0x16	; 22
    5710:	61 e0       	ldi	r22, 0x01	; 1
    5712:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

	/** OUTPUT		 1	  */
	DIO_enuWritePin(KEYPAD_U8_ROW_1 ,DIO_u8HIGH );
    5716:	87 e1       	ldi	r24, 0x17	; 23
    5718:	61 e0       	ldi	r22, 0x01	; 1
    571a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_2 ,DIO_u8HIGH );
    571e:	88 e1       	ldi	r24, 0x18	; 24
    5720:	61 e0       	ldi	r22, 0x01	; 1
    5722:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_3 ,DIO_u8HIGH );
    5726:	89 e1       	ldi	r24, 0x19	; 25
    5728:	61 e0       	ldi	r22, 0x01	; 1
    572a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_4 ,DIO_u8HIGH );
    572e:	8a e1       	ldi	r24, 0x1A	; 26
    5730:	61 e0       	ldi	r22, 0x01	; 1
    5732:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

}
    5736:	cf 91       	pop	r28
    5738:	df 91       	pop	r29
    573a:	08 95       	ret

0000573c <KEYPAD_uint8GetPressedKey>:

uint8 KEYPAD_uint8GetPressedKey(void)
{
    573c:	df 93       	push	r29
    573e:	cf 93       	push	r28
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	2e 97       	sbiw	r28, 0x0e	; 14
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
	uint8 u8one,u8two,u8three,u8four;
	uint8 LOC_uint8preesed = 0XFF;
    5750:	8f ef       	ldi	r24, 0xFF	; 255
    5752:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LOC_uint8ColumnValue ;
	/**   !comment : send row sequence  1  */

	DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8LOW);
    5754:	87 e1       	ldi	r24, 0x17	; 23
    5756:	60 e0       	ldi	r22, 0x00	; 0
    5758:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    575c:	88 e1       	ldi	r24, 0x18	; 24
    575e:	61 e0       	ldi	r22, 0x01	; 1
    5760:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5764:	89 e1       	ldi	r24, 0x19	; 25
    5766:	61 e0       	ldi	r22, 0x01	; 1
    5768:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
	DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    576c:	8a e1       	ldi	r24, 0x1A	; 26
    576e:	61 e0       	ldi	r22, 0x01	; 1
    5770:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

	/**   !comment : Read columns  */
	DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5774:	9e 01       	movw	r18, r28
    5776:	2d 5f       	subi	r18, 0xFD	; 253
    5778:	3f 4f       	sbci	r19, 0xFF	; 255
    577a:	83 e1       	ldi	r24, 0x13	; 19
    577c:	b9 01       	movw	r22, r18
    577e:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5782:	9e 01       	movw	r18, r28
    5784:	2c 5f       	subi	r18, 0xFC	; 252
    5786:	3f 4f       	sbci	r19, 0xFF	; 255
    5788:	84 e1       	ldi	r24, 0x14	; 20
    578a:	b9 01       	movw	r22, r18
    578c:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5790:	9e 01       	movw	r18, r28
    5792:	2b 5f       	subi	r18, 0xFB	; 251
    5794:	3f 4f       	sbci	r19, 0xFF	; 255
    5796:	85 e1       	ldi	r24, 0x15	; 21
    5798:	b9 01       	movw	r22, r18
    579a:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
	DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    579e:	9e 01       	movw	r18, r28
    57a0:	2a 5f       	subi	r18, 0xFA	; 250
    57a2:	3f 4f       	sbci	r19, 0xFF	; 255
    57a4:	86 e1       	ldi	r24, 0x16	; 22
    57a6:	b9 01       	movw	r22, r18
    57a8:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>


	LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    57ac:	8c 81       	ldd	r24, Y+4	; 0x04
    57ae:	88 2f       	mov	r24, r24
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	88 0f       	add	r24, r24
    57b4:	99 1f       	adc	r25, r25
    57b6:	98 2f       	mov	r25, r24
    57b8:	8b 81       	ldd	r24, Y+3	; 0x03
    57ba:	29 2f       	mov	r18, r25
    57bc:	28 2b       	or	r18, r24
    57be:	8d 81       	ldd	r24, Y+5	; 0x05
    57c0:	88 2f       	mov	r24, r24
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	88 0f       	add	r24, r24
    57ca:	99 1f       	adc	r25, r25
    57cc:	28 2b       	or	r18, r24
    57ce:	8e 81       	ldd	r24, Y+6	; 0x06
    57d0:	88 2f       	mov	r24, r24
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	88 0f       	add	r24, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	88 0f       	add	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	88 0f       	add	r24, r24
    57de:	99 1f       	adc	r25, r25
    57e0:	82 2b       	or	r24, r18
    57e2:	89 83       	std	Y+1, r24	; 0x01




	switch(LOC_uint8ColumnValue)
    57e4:	89 81       	ldd	r24, Y+1	; 0x01
    57e6:	28 2f       	mov	r18, r24
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	3e 87       	std	Y+14, r19	; 0x0e
    57ec:	2d 87       	std	Y+13, r18	; 0x0d
    57ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    57f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57f2:	8b 30       	cpi	r24, 0x0B	; 11
    57f4:	91 05       	cpc	r25, r1
    57f6:	d9 f0       	breq	.+54     	; 0x582e <KEYPAD_uint8GetPressedKey+0xf2>
    57f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    57fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    57fc:	2c 30       	cpi	r18, 0x0C	; 12
    57fe:	31 05       	cpc	r19, r1
    5800:	34 f4       	brge	.+12     	; 0x580e <KEYPAD_uint8GetPressedKey+0xd2>
    5802:	8d 85       	ldd	r24, Y+13	; 0x0d
    5804:	9e 85       	ldd	r25, Y+14	; 0x0e
    5806:	87 30       	cpi	r24, 0x07	; 7
    5808:	91 05       	cpc	r25, r1
    580a:	a1 f0       	breq	.+40     	; 0x5834 <KEYPAD_uint8GetPressedKey+0xf8>
    580c:	16 c0       	rjmp	.+44     	; 0x583a <KEYPAD_uint8GetPressedKey+0xfe>
    580e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5810:	3e 85       	ldd	r19, Y+14	; 0x0e
    5812:	2d 30       	cpi	r18, 0x0D	; 13
    5814:	31 05       	cpc	r19, r1
    5816:	41 f0       	breq	.+16     	; 0x5828 <KEYPAD_uint8GetPressedKey+0xec>
    5818:	8d 85       	ldd	r24, Y+13	; 0x0d
    581a:	9e 85       	ldd	r25, Y+14	; 0x0e
    581c:	8e 30       	cpi	r24, 0x0E	; 14
    581e:	91 05       	cpc	r25, r1
    5820:	61 f4       	brne	.+24     	; 0x583a <KEYPAD_uint8GetPressedKey+0xfe>
	{
	case 0b00001110: LOC_uint8preesed = '7' ;
    5822:	87 e3       	ldi	r24, 0x37	; 55
    5824:	8a 83       	std	Y+2, r24	; 0x02
    5826:	0b c0       	rjmp	.+22     	; 0x583e <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00001101: LOC_uint8preesed = '8' ;
    5828:	88 e3       	ldi	r24, 0x38	; 56
    582a:	8a 83       	std	Y+2, r24	; 0x02
    582c:	08 c0       	rjmp	.+16     	; 0x583e <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00001011: LOC_uint8preesed = '9' ;
    582e:	89 e3       	ldi	r24, 0x39	; 57
    5830:	8a 83       	std	Y+2, r24	; 0x02
    5832:	05 c0       	rjmp	.+10     	; 0x583e <KEYPAD_uint8GetPressedKey+0x102>
	break;

	case 0b00000111: LOC_uint8preesed = '/' ;
    5834:	8f e2       	ldi	r24, 0x2F	; 47
    5836:	8a 83       	std	Y+2, r24	; 0x02
    5838:	02 c0       	rjmp	.+4      	; 0x583e <KEYPAD_uint8GetPressedKey+0x102>
	break;

	default : LOC_uint8preesed = 0XFF ;
    583a:	8f ef       	ldi	r24, 0xFF	; 255
    583c:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(LOC_uint8preesed == 0XFF)
    583e:	8a 81       	ldd	r24, Y+2	; 0x02
    5840:	8f 3f       	cpi	r24, 0xFF	; 255
    5842:	09 f0       	breq	.+2      	; 0x5846 <KEYPAD_uint8GetPressedKey+0x10a>
    5844:	75 c0       	rjmp	.+234    	; 0x5930 <KEYPAD_uint8GetPressedKey+0x1f4>
	{
		/**   !comment : send row sequence  2  */

		DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8HIGH);
    5846:	87 e1       	ldi	r24, 0x17	; 23
    5848:	61 e0       	ldi	r22, 0x01	; 1
    584a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8LOW);
    584e:	88 e1       	ldi	r24, 0x18	; 24
    5850:	60 e0       	ldi	r22, 0x00	; 0
    5852:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5856:	89 e1       	ldi	r24, 0x19	; 25
    5858:	61 e0       	ldi	r22, 0x01	; 1
    585a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    585e:	8a e1       	ldi	r24, 0x1A	; 26
    5860:	61 e0       	ldi	r22, 0x01	; 1
    5862:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

		/**   !comment : Read columns  */

		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5866:	9e 01       	movw	r18, r28
    5868:	2d 5f       	subi	r18, 0xFD	; 253
    586a:	3f 4f       	sbci	r19, 0xFF	; 255
    586c:	83 e1       	ldi	r24, 0x13	; 19
    586e:	b9 01       	movw	r22, r18
    5870:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5874:	9e 01       	movw	r18, r28
    5876:	2c 5f       	subi	r18, 0xFC	; 252
    5878:	3f 4f       	sbci	r19, 0xFF	; 255
    587a:	84 e1       	ldi	r24, 0x14	; 20
    587c:	b9 01       	movw	r22, r18
    587e:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5882:	9e 01       	movw	r18, r28
    5884:	2b 5f       	subi	r18, 0xFB	; 251
    5886:	3f 4f       	sbci	r19, 0xFF	; 255
    5888:	85 e1       	ldi	r24, 0x15	; 21
    588a:	b9 01       	movw	r22, r18
    588c:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5890:	9e 01       	movw	r18, r28
    5892:	2a 5f       	subi	r18, 0xFA	; 250
    5894:	3f 4f       	sbci	r19, 0xFF	; 255
    5896:	86 e1       	ldi	r24, 0x16	; 22
    5898:	b9 01       	movw	r22, r18
    589a:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    589e:	8c 81       	ldd	r24, Y+4	; 0x04
    58a0:	88 2f       	mov	r24, r24
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	88 0f       	add	r24, r24
    58a6:	99 1f       	adc	r25, r25
    58a8:	98 2f       	mov	r25, r24
    58aa:	8b 81       	ldd	r24, Y+3	; 0x03
    58ac:	29 2f       	mov	r18, r25
    58ae:	28 2b       	or	r18, r24
    58b0:	8d 81       	ldd	r24, Y+5	; 0x05
    58b2:	88 2f       	mov	r24, r24
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	88 0f       	add	r24, r24
    58b8:	99 1f       	adc	r25, r25
    58ba:	88 0f       	add	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	28 2b       	or	r18, r24
    58c0:	8e 81       	ldd	r24, Y+6	; 0x06
    58c2:	88 2f       	mov	r24, r24
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	88 0f       	add	r24, r24
    58cc:	99 1f       	adc	r25, r25
    58ce:	88 0f       	add	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	82 2b       	or	r24, r18
    58d4:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	28 2f       	mov	r18, r24
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	3c 87       	std	Y+12, r19	; 0x0c
    58de:	2b 87       	std	Y+11, r18	; 0x0b
    58e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    58e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    58e4:	8b 30       	cpi	r24, 0x0B	; 11
    58e6:	91 05       	cpc	r25, r1
    58e8:	d9 f0       	breq	.+54     	; 0x5920 <KEYPAD_uint8GetPressedKey+0x1e4>
    58ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    58ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    58ee:	2c 30       	cpi	r18, 0x0C	; 12
    58f0:	31 05       	cpc	r19, r1
    58f2:	34 f4       	brge	.+12     	; 0x5900 <KEYPAD_uint8GetPressedKey+0x1c4>
    58f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    58f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    58f8:	87 30       	cpi	r24, 0x07	; 7
    58fa:	91 05       	cpc	r25, r1
    58fc:	a1 f0       	breq	.+40     	; 0x5926 <KEYPAD_uint8GetPressedKey+0x1ea>
    58fe:	16 c0       	rjmp	.+44     	; 0x592c <KEYPAD_uint8GetPressedKey+0x1f0>
    5900:	2b 85       	ldd	r18, Y+11	; 0x0b
    5902:	3c 85       	ldd	r19, Y+12	; 0x0c
    5904:	2d 30       	cpi	r18, 0x0D	; 13
    5906:	31 05       	cpc	r19, r1
    5908:	41 f0       	breq	.+16     	; 0x591a <KEYPAD_uint8GetPressedKey+0x1de>
    590a:	8b 85       	ldd	r24, Y+11	; 0x0b
    590c:	9c 85       	ldd	r25, Y+12	; 0x0c
    590e:	8e 30       	cpi	r24, 0x0E	; 14
    5910:	91 05       	cpc	r25, r1
    5912:	61 f4       	brne	.+24     	; 0x592c <KEYPAD_uint8GetPressedKey+0x1f0>
		{
		case 0b00001110: LOC_uint8preesed = '4' ;
    5914:	84 e3       	ldi	r24, 0x34	; 52
    5916:	8a 83       	std	Y+2, r24	; 0x02
    5918:	0b c0       	rjmp	.+22     	; 0x5930 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00001101: LOC_uint8preesed = '5' ;
    591a:	85 e3       	ldi	r24, 0x35	; 53
    591c:	8a 83       	std	Y+2, r24	; 0x02
    591e:	08 c0       	rjmp	.+16     	; 0x5930 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00001011: LOC_uint8preesed = '6' ;
    5920:	86 e3       	ldi	r24, 0x36	; 54
    5922:	8a 83       	std	Y+2, r24	; 0x02
    5924:	05 c0       	rjmp	.+10     	; 0x5930 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		case 0b00000111: LOC_uint8preesed = '*' ;
    5926:	8a e2       	ldi	r24, 0x2A	; 42
    5928:	8a 83       	std	Y+2, r24	; 0x02
    592a:	02 c0       	rjmp	.+4      	; 0x5930 <KEYPAD_uint8GetPressedKey+0x1f4>
		break;

		default : LOC_uint8preesed = 0XFF ;
    592c:	8f ef       	ldi	r24, 0xFF	; 255
    592e:	8a 83       	std	Y+2, r24	; 0x02
		}

	}
	if(LOC_uint8preesed == 0XFF)
    5930:	8a 81       	ldd	r24, Y+2	; 0x02
    5932:	8f 3f       	cpi	r24, 0xFF	; 255
    5934:	09 f0       	breq	.+2      	; 0x5938 <KEYPAD_uint8GetPressedKey+0x1fc>
    5936:	75 c0       	rjmp	.+234    	; 0x5a22 <KEYPAD_uint8GetPressedKey+0x2e6>
	{
		/**   !comment : send row sequence  3  */

		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5938:	8a e1       	ldi	r24, 0x1A	; 26
    593a:	61 e0       	ldi	r22, 0x01	; 1
    593c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    5940:	88 e1       	ldi	r24, 0x18	; 24
    5942:	61 e0       	ldi	r22, 0x01	; 1
    5944:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8LOW);
    5948:	89 e1       	ldi	r24, 0x19	; 25
    594a:	60 e0       	ldi	r22, 0x00	; 0
    594c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8HIGH);
    5950:	8a e1       	ldi	r24, 0x1A	; 26
    5952:	61 e0       	ldi	r22, 0x01	; 1
    5954:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

		/**   !comment : Read columns  */
		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5958:	9e 01       	movw	r18, r28
    595a:	2d 5f       	subi	r18, 0xFD	; 253
    595c:	3f 4f       	sbci	r19, 0xFF	; 255
    595e:	83 e1       	ldi	r24, 0x13	; 19
    5960:	b9 01       	movw	r22, r18
    5962:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5966:	9e 01       	movw	r18, r28
    5968:	2c 5f       	subi	r18, 0xFC	; 252
    596a:	3f 4f       	sbci	r19, 0xFF	; 255
    596c:	84 e1       	ldi	r24, 0x14	; 20
    596e:	b9 01       	movw	r22, r18
    5970:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5974:	9e 01       	movw	r18, r28
    5976:	2b 5f       	subi	r18, 0xFB	; 251
    5978:	3f 4f       	sbci	r19, 0xFF	; 255
    597a:	85 e1       	ldi	r24, 0x15	; 21
    597c:	b9 01       	movw	r22, r18
    597e:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5982:	9e 01       	movw	r18, r28
    5984:	2a 5f       	subi	r18, 0xFA	; 250
    5986:	3f 4f       	sbci	r19, 0xFF	; 255
    5988:	86 e1       	ldi	r24, 0x16	; 22
    598a:	b9 01       	movw	r22, r18
    598c:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5990:	8c 81       	ldd	r24, Y+4	; 0x04
    5992:	88 2f       	mov	r24, r24
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	88 0f       	add	r24, r24
    5998:	99 1f       	adc	r25, r25
    599a:	98 2f       	mov	r25, r24
    599c:	8b 81       	ldd	r24, Y+3	; 0x03
    599e:	29 2f       	mov	r18, r25
    59a0:	28 2b       	or	r18, r24
    59a2:	8d 81       	ldd	r24, Y+5	; 0x05
    59a4:	88 2f       	mov	r24, r24
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	88 0f       	add	r24, r24
    59aa:	99 1f       	adc	r25, r25
    59ac:	88 0f       	add	r24, r24
    59ae:	99 1f       	adc	r25, r25
    59b0:	28 2b       	or	r18, r24
    59b2:	8e 81       	ldd	r24, Y+6	; 0x06
    59b4:	88 2f       	mov	r24, r24
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	88 0f       	add	r24, r24
    59ba:	99 1f       	adc	r25, r25
    59bc:	88 0f       	add	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	82 2b       	or	r24, r18
    59c6:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    59c8:	89 81       	ldd	r24, Y+1	; 0x01
    59ca:	28 2f       	mov	r18, r24
    59cc:	30 e0       	ldi	r19, 0x00	; 0
    59ce:	3a 87       	std	Y+10, r19	; 0x0a
    59d0:	29 87       	std	Y+9, r18	; 0x09
    59d2:	89 85       	ldd	r24, Y+9	; 0x09
    59d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59d6:	8b 30       	cpi	r24, 0x0B	; 11
    59d8:	91 05       	cpc	r25, r1
    59da:	d9 f0       	breq	.+54     	; 0x5a12 <KEYPAD_uint8GetPressedKey+0x2d6>
    59dc:	29 85       	ldd	r18, Y+9	; 0x09
    59de:	3a 85       	ldd	r19, Y+10	; 0x0a
    59e0:	2c 30       	cpi	r18, 0x0C	; 12
    59e2:	31 05       	cpc	r19, r1
    59e4:	34 f4       	brge	.+12     	; 0x59f2 <KEYPAD_uint8GetPressedKey+0x2b6>
    59e6:	89 85       	ldd	r24, Y+9	; 0x09
    59e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ea:	87 30       	cpi	r24, 0x07	; 7
    59ec:	91 05       	cpc	r25, r1
    59ee:	a1 f0       	breq	.+40     	; 0x5a18 <KEYPAD_uint8GetPressedKey+0x2dc>
    59f0:	16 c0       	rjmp	.+44     	; 0x5a1e <KEYPAD_uint8GetPressedKey+0x2e2>
    59f2:	29 85       	ldd	r18, Y+9	; 0x09
    59f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    59f6:	2d 30       	cpi	r18, 0x0D	; 13
    59f8:	31 05       	cpc	r19, r1
    59fa:	41 f0       	breq	.+16     	; 0x5a0c <KEYPAD_uint8GetPressedKey+0x2d0>
    59fc:	89 85       	ldd	r24, Y+9	; 0x09
    59fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a00:	8e 30       	cpi	r24, 0x0E	; 14
    5a02:	91 05       	cpc	r25, r1
    5a04:	61 f4       	brne	.+24     	; 0x5a1e <KEYPAD_uint8GetPressedKey+0x2e2>
		{


		case 0b00001110: LOC_uint8preesed = '1' ;
    5a06:	81 e3       	ldi	r24, 0x31	; 49
    5a08:	8a 83       	std	Y+2, r24	; 0x02
    5a0a:	0b c0       	rjmp	.+22     	; 0x5a22 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00001101: LOC_uint8preesed = '2' ;
    5a0c:	82 e3       	ldi	r24, 0x32	; 50
    5a0e:	8a 83       	std	Y+2, r24	; 0x02
    5a10:	08 c0       	rjmp	.+16     	; 0x5a22 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00001011: LOC_uint8preesed = '3' ;
    5a12:	83 e3       	ldi	r24, 0x33	; 51
    5a14:	8a 83       	std	Y+2, r24	; 0x02
    5a16:	05 c0       	rjmp	.+10     	; 0x5a22 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		case 0b00000111: LOC_uint8preesed = '-' ;
    5a18:	8d e2       	ldi	r24, 0x2D	; 45
    5a1a:	8a 83       	std	Y+2, r24	; 0x02
    5a1c:	02 c0       	rjmp	.+4      	; 0x5a22 <KEYPAD_uint8GetPressedKey+0x2e6>
		break;

		default : LOC_uint8preesed = 0XFF ;
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
    5a20:	8a 83       	std	Y+2, r24	; 0x02
		}

	}
	if(LOC_uint8preesed == 0XFF)
    5a22:	8a 81       	ldd	r24, Y+2	; 0x02
    5a24:	8f 3f       	cpi	r24, 0xFF	; 255
    5a26:	09 f0       	breq	.+2      	; 0x5a2a <KEYPAD_uint8GetPressedKey+0x2ee>
    5a28:	75 c0       	rjmp	.+234    	; 0x5b14 <KEYPAD_uint8GetPressedKey+0x3d8>
	{

		/**   !comment : send row sequence  4  */

		DIO_enuWritePin(KEYPAD_U8_ROW_1,DIO_u8HIGH);
    5a2a:	87 e1       	ldi	r24, 0x17	; 23
    5a2c:	61 e0       	ldi	r22, 0x01	; 1
    5a2e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_2,DIO_u8HIGH);
    5a32:	88 e1       	ldi	r24, 0x18	; 24
    5a34:	61 e0       	ldi	r22, 0x01	; 1
    5a36:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_3,DIO_u8HIGH);
    5a3a:	89 e1       	ldi	r24, 0x19	; 25
    5a3c:	61 e0       	ldi	r22, 0x01	; 1
    5a3e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
		DIO_enuWritePin(KEYPAD_U8_ROW_4,DIO_u8LOW);
    5a42:	8a e1       	ldi	r24, 0x1A	; 26
    5a44:	60 e0       	ldi	r22, 0x00	; 0
    5a46:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>

		/**   !comment : Read columns  */

		DIO_enuReadPin(KEYPAD_U8_COLUMN_1,&u8one );
    5a4a:	9e 01       	movw	r18, r28
    5a4c:	2d 5f       	subi	r18, 0xFD	; 253
    5a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a50:	83 e1       	ldi	r24, 0x13	; 19
    5a52:	b9 01       	movw	r22, r18
    5a54:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_2,&u8two);
    5a58:	9e 01       	movw	r18, r28
    5a5a:	2c 5f       	subi	r18, 0xFC	; 252
    5a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a5e:	84 e1       	ldi	r24, 0x14	; 20
    5a60:	b9 01       	movw	r22, r18
    5a62:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_3,&u8three);
    5a66:	9e 01       	movw	r18, r28
    5a68:	2b 5f       	subi	r18, 0xFB	; 251
    5a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6c:	85 e1       	ldi	r24, 0x15	; 21
    5a6e:	b9 01       	movw	r22, r18
    5a70:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
		DIO_enuReadPin(KEYPAD_U8_COLUMN_4,&u8four);
    5a74:	9e 01       	movw	r18, r28
    5a76:	2a 5f       	subi	r18, 0xFA	; 250
    5a78:	3f 4f       	sbci	r19, 0xFF	; 255
    5a7a:	86 e1       	ldi	r24, 0x16	; 22
    5a7c:	b9 01       	movw	r22, r18
    5a7e:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>


		LOC_uint8ColumnValue  = u8one | u8two << 1 | u8three <<2 | u8four<<3;
    5a82:	8c 81       	ldd	r24, Y+4	; 0x04
    5a84:	88 2f       	mov	r24, r24
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	88 0f       	add	r24, r24
    5a8a:	99 1f       	adc	r25, r25
    5a8c:	98 2f       	mov	r25, r24
    5a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a90:	29 2f       	mov	r18, r25
    5a92:	28 2b       	or	r18, r24
    5a94:	8d 81       	ldd	r24, Y+5	; 0x05
    5a96:	88 2f       	mov	r24, r24
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	88 0f       	add	r24, r24
    5a9c:	99 1f       	adc	r25, r25
    5a9e:	88 0f       	add	r24, r24
    5aa0:	99 1f       	adc	r25, r25
    5aa2:	28 2b       	or	r18, r24
    5aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    5aa6:	88 2f       	mov	r24, r24
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	88 0f       	add	r24, r24
    5aac:	99 1f       	adc	r25, r25
    5aae:	88 0f       	add	r24, r24
    5ab0:	99 1f       	adc	r25, r25
    5ab2:	88 0f       	add	r24, r24
    5ab4:	99 1f       	adc	r25, r25
    5ab6:	82 2b       	or	r24, r18
    5ab8:	89 83       	std	Y+1, r24	; 0x01

		switch(LOC_uint8ColumnValue)
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	28 2f       	mov	r18, r24
    5abe:	30 e0       	ldi	r19, 0x00	; 0
    5ac0:	38 87       	std	Y+8, r19	; 0x08
    5ac2:	2f 83       	std	Y+7, r18	; 0x07
    5ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ac6:	98 85       	ldd	r25, Y+8	; 0x08
    5ac8:	8b 30       	cpi	r24, 0x0B	; 11
    5aca:	91 05       	cpc	r25, r1
    5acc:	d9 f0       	breq	.+54     	; 0x5b04 <KEYPAD_uint8GetPressedKey+0x3c8>
    5ace:	2f 81       	ldd	r18, Y+7	; 0x07
    5ad0:	38 85       	ldd	r19, Y+8	; 0x08
    5ad2:	2c 30       	cpi	r18, 0x0C	; 12
    5ad4:	31 05       	cpc	r19, r1
    5ad6:	34 f4       	brge	.+12     	; 0x5ae4 <KEYPAD_uint8GetPressedKey+0x3a8>
    5ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    5ada:	98 85       	ldd	r25, Y+8	; 0x08
    5adc:	87 30       	cpi	r24, 0x07	; 7
    5ade:	91 05       	cpc	r25, r1
    5ae0:	a1 f0       	breq	.+40     	; 0x5b0a <KEYPAD_uint8GetPressedKey+0x3ce>
    5ae2:	16 c0       	rjmp	.+44     	; 0x5b10 <KEYPAD_uint8GetPressedKey+0x3d4>
    5ae4:	2f 81       	ldd	r18, Y+7	; 0x07
    5ae6:	38 85       	ldd	r19, Y+8	; 0x08
    5ae8:	2d 30       	cpi	r18, 0x0D	; 13
    5aea:	31 05       	cpc	r19, r1
    5aec:	41 f0       	breq	.+16     	; 0x5afe <KEYPAD_uint8GetPressedKey+0x3c2>
    5aee:	8f 81       	ldd	r24, Y+7	; 0x07
    5af0:	98 85       	ldd	r25, Y+8	; 0x08
    5af2:	8e 30       	cpi	r24, 0x0E	; 14
    5af4:	91 05       	cpc	r25, r1
    5af6:	61 f4       	brne	.+24     	; 0x5b10 <KEYPAD_uint8GetPressedKey+0x3d4>
		{
		case 0b00001110: LOC_uint8preesed = '.' ;
    5af8:	8e e2       	ldi	r24, 0x2E	; 46
    5afa:	8a 83       	std	Y+2, r24	; 0x02
    5afc:	0b c0       	rjmp	.+22     	; 0x5b14 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00001101: LOC_uint8preesed = '0' ;
    5afe:	80 e3       	ldi	r24, 0x30	; 48
    5b00:	8a 83       	std	Y+2, r24	; 0x02
    5b02:	08 c0       	rjmp	.+16     	; 0x5b14 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00001011: LOC_uint8preesed = '=' ;
    5b04:	8d e3       	ldi	r24, 0x3D	; 61
    5b06:	8a 83       	std	Y+2, r24	; 0x02
    5b08:	05 c0       	rjmp	.+10     	; 0x5b14 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		case 0b00000111: LOC_uint8preesed = '+' ;
    5b0a:	8b e2       	ldi	r24, 0x2B	; 43
    5b0c:	8a 83       	std	Y+2, r24	; 0x02
    5b0e:	02 c0       	rjmp	.+4      	; 0x5b14 <KEYPAD_uint8GetPressedKey+0x3d8>
		break;

		default : LOC_uint8preesed = 0xff ;
    5b10:	8f ef       	ldi	r24, 0xFF	; 255
    5b12:	8a 83       	std	Y+2, r24	; 0x02
		}

	}

	return LOC_uint8preesed ;
    5b14:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5b16:	2e 96       	adiw	r28, 0x0e	; 14
    5b18:	0f b6       	in	r0, 0x3f	; 63
    5b1a:	f8 94       	cli
    5b1c:	de bf       	out	0x3e, r29	; 62
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	cd bf       	out	0x3d, r28	; 61
    5b22:	cf 91       	pop	r28
    5b24:	df 91       	pop	r29
    5b26:	08 95       	ret

00005b28 <DC_Motor_voidInit>:
#include "DC_Motor_priv.h"

uint8 init = 0;

void DC_Motor_voidInit(void)
{
    5b28:	df 93       	push	r29
    5b2a:	cf 93       	push	r28
    5b2c:	00 d0       	rcall	.+0      	; 0x5b2e <DC_Motor_voidInit+0x6>
    5b2e:	0f 92       	push	r0
    5b30:	cd b7       	in	r28, 0x3d	; 61
    5b32:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	init = 1;
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	80 93 19 02 	sts	0x0219, r24
	for (u8CntrLoc = 0 ; u8CntrLoc < DC_Motor_MAX_NUM ; u8CntrLoc++)
    5b3a:	19 82       	std	Y+1, r1	; 0x01
    5b3c:	c3 c0       	rjmp	.+390    	; 0x5cc4 <DC_Motor_voidInit+0x19c>
	{
		switch( (DC_Motor_astrPinMapping[u8CntrLoc].u8PinNumbers) )
    5b3e:	89 81       	ldd	r24, Y+1	; 0x01
    5b40:	28 2f       	mov	r18, r24
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	c9 01       	movw	r24, r18
    5b46:	88 0f       	add	r24, r24
    5b48:	99 1f       	adc	r25, r25
    5b4a:	82 0f       	add	r24, r18
    5b4c:	93 1f       	adc	r25, r19
    5b4e:	88 0f       	add	r24, r24
    5b50:	99 1f       	adc	r25, r25
    5b52:	fc 01       	movw	r30, r24
    5b54:	e0 53       	subi	r30, 0x30	; 48
    5b56:	fe 4f       	sbci	r31, 0xFE	; 254
    5b58:	80 81       	ld	r24, Z
    5b5a:	28 2f       	mov	r18, r24
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
    5b5e:	3b 83       	std	Y+3, r19	; 0x03
    5b60:	2a 83       	std	Y+2, r18	; 0x02
    5b62:	8a 81       	ldd	r24, Y+2	; 0x02
    5b64:	9b 81       	ldd	r25, Y+3	; 0x03
    5b66:	81 30       	cpi	r24, 0x01	; 1
    5b68:	91 05       	cpc	r25, r1
    5b6a:	09 f4       	brne	.+2      	; 0x5b6e <DC_Motor_voidInit+0x46>
    5b6c:	46 c0       	rjmp	.+140    	; 0x5bfa <DC_Motor_voidInit+0xd2>
    5b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    5b70:	3b 81       	ldd	r19, Y+3	; 0x03
    5b72:	22 30       	cpi	r18, 0x02	; 2
    5b74:	31 05       	cpc	r19, r1
    5b76:	09 f0       	breq	.+2      	; 0x5b7a <DC_Motor_voidInit+0x52>
    5b78:	93 c0       	rjmp	.+294    	; 0x5ca0 <DC_Motor_voidInit+0x178>
		{
		case DC_Motor_intSupply:
			if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8inpSupply.u8Pin1Map >= DIO_u8PIN_0  &&
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	28 2f       	mov	r18, r24
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	c9 01       	movw	r24, r18
    5b82:	88 0f       	add	r24, r24
    5b84:	99 1f       	adc	r25, r25
    5b86:	82 0f       	add	r24, r18
    5b88:	93 1f       	adc	r25, r19
    5b8a:	88 0f       	add	r24, r24
    5b8c:	99 1f       	adc	r25, r25
    5b8e:	fc 01       	movw	r30, r24
    5b90:	ed 52       	subi	r30, 0x2D	; 45
    5b92:	fe 4f       	sbci	r31, 0xFE	; 254
    5b94:	80 81       	ld	r24, Z
    5b96:	80 32       	cpi	r24, 0x20	; 32
    5b98:	00 f5       	brcc	.+64     	; 0x5bda <DC_Motor_voidInit+0xb2>
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	28 2f       	mov	r18, r24
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	c9 01       	movw	r24, r18
    5ba2:	88 0f       	add	r24, r24
    5ba4:	99 1f       	adc	r25, r25
    5ba6:	82 0f       	add	r24, r18
    5ba8:	93 1f       	adc	r25, r19
    5baa:	88 0f       	add	r24, r24
    5bac:	99 1f       	adc	r25, r25
    5bae:	fc 01       	movw	r30, r24
    5bb0:	ec 52       	subi	r30, 0x2C	; 44
    5bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb4:	80 81       	ld	r24, Z
    5bb6:	80 32       	cpi	r24, 0x20	; 32
    5bb8:	80 f4       	brcc	.+32     	; 0x5bda <DC_Motor_voidInit+0xb2>


				}
				else
				{
					DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	28 2f       	mov	r18, r24
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	c9 01       	movw	r24, r18
    5bc2:	88 0f       	add	r24, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	82 0f       	add	r24, r18
    5bc8:	93 1f       	adc	r25, r19
    5bca:	88 0f       	add	r24, r24
    5bcc:	99 1f       	adc	r25, r25
    5bce:	fc 01       	movw	r30, r24
    5bd0:	eb 52       	subi	r30, 0x2B	; 43
    5bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd4:	84 e0       	ldi	r24, 0x04	; 4
    5bd6:	80 83       	st	Z, r24
    5bd8:	72 c0       	rjmp	.+228    	; 0x5cbe <DC_Motor_voidInit+0x196>
				}
			}
			else
			{
				DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    5bda:	89 81       	ldd	r24, Y+1	; 0x01
    5bdc:	28 2f       	mov	r18, r24
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	c9 01       	movw	r24, r18
    5be2:	88 0f       	add	r24, r24
    5be4:	99 1f       	adc	r25, r25
    5be6:	82 0f       	add	r24, r18
    5be8:	93 1f       	adc	r25, r19
    5bea:	88 0f       	add	r24, r24
    5bec:	99 1f       	adc	r25, r25
    5bee:	fc 01       	movw	r30, r24
    5bf0:	eb 52       	subi	r30, 0x2B	; 43
    5bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bf4:	82 e0       	ldi	r24, 0x02	; 2
    5bf6:	80 83       	st	Z, r24
    5bf8:	62 c0       	rjmp	.+196    	; 0x5cbe <DC_Motor_voidInit+0x196>
			}
		break;

		case DC_Motor_extSupply:
			if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap >= DIO_u8PIN_0  &&
    5bfa:	89 81       	ldd	r24, Y+1	; 0x01
    5bfc:	28 2f       	mov	r18, r24
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	c9 01       	movw	r24, r18
    5c02:	88 0f       	add	r24, r24
    5c04:	99 1f       	adc	r25, r25
    5c06:	82 0f       	add	r24, r18
    5c08:	93 1f       	adc	r25, r19
    5c0a:	88 0f       	add	r24, r24
    5c0c:	99 1f       	adc	r25, r25
    5c0e:	fc 01       	movw	r30, r24
    5c10:	ed 52       	subi	r30, 0x2D	; 45
    5c12:	fe 4f       	sbci	r31, 0xFE	; 254
    5c14:	80 81       	ld	r24, Z
    5c16:	80 32       	cpi	r24, 0x20	; 32
    5c18:	98 f5       	brcc	.+102    	; 0x5c80 <DC_Motor_voidInit+0x158>

					DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinMap <= DIO_u8PIN_31)
			{
				if(DC_Motor_astrPinMapping[u8CntrLoc].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8extHIGH ||
    5c1a:	89 81       	ldd	r24, Y+1	; 0x01
    5c1c:	28 2f       	mov	r18, r24
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	c9 01       	movw	r24, r18
    5c22:	88 0f       	add	r24, r24
    5c24:	99 1f       	adc	r25, r25
    5c26:	82 0f       	add	r24, r18
    5c28:	93 1f       	adc	r25, r19
    5c2a:	01 96       	adiw	r24, 0x01	; 1
    5c2c:	88 0f       	add	r24, r24
    5c2e:	99 1f       	adc	r25, r25
    5c30:	fc 01       	movw	r30, r24
    5c32:	e0 53       	subi	r30, 0x30	; 48
    5c34:	fe 4f       	sbci	r31, 0xFE	; 254
    5c36:	80 81       	ld	r24, Z
    5c38:	8a 3c       	cpi	r24, 0xCA	; 202
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <DC_Motor_voidInit+0x116>
    5c3c:	40 c0       	rjmp	.+128    	; 0x5cbe <DC_Motor_voidInit+0x196>
    5c3e:	89 81       	ldd	r24, Y+1	; 0x01
    5c40:	28 2f       	mov	r18, r24
    5c42:	30 e0       	ldi	r19, 0x00	; 0
    5c44:	c9 01       	movw	r24, r18
    5c46:	88 0f       	add	r24, r24
    5c48:	99 1f       	adc	r25, r25
    5c4a:	82 0f       	add	r24, r18
    5c4c:	93 1f       	adc	r25, r19
    5c4e:	01 96       	adiw	r24, 0x01	; 1
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	fc 01       	movw	r30, r24
    5c56:	e0 53       	subi	r30, 0x30	; 48
    5c58:	fe 4f       	sbci	r31, 0xFE	; 254
    5c5a:	80 81       	ld	r24, Z
    5c5c:	85 3c       	cpi	r24, 0xC5	; 197
    5c5e:	79 f1       	breq	.+94     	; 0x5cbe <DC_Motor_voidInit+0x196>
				{
					//no error
				}
				else
				{
					DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5c60:	89 81       	ldd	r24, Y+1	; 0x01
    5c62:	28 2f       	mov	r18, r24
    5c64:	30 e0       	ldi	r19, 0x00	; 0
    5c66:	c9 01       	movw	r24, r18
    5c68:	88 0f       	add	r24, r24
    5c6a:	99 1f       	adc	r25, r25
    5c6c:	82 0f       	add	r24, r18
    5c6e:	93 1f       	adc	r25, r19
    5c70:	88 0f       	add	r24, r24
    5c72:	99 1f       	adc	r25, r25
    5c74:	fc 01       	movw	r30, r24
    5c76:	eb 52       	subi	r30, 0x2B	; 43
    5c78:	fe 4f       	sbci	r31, 0xFE	; 254
    5c7a:	84 e0       	ldi	r24, 0x04	; 4
    5c7c:	80 83       	st	Z, r24
    5c7e:	1f c0       	rjmp	.+62     	; 0x5cbe <DC_Motor_voidInit+0x196>
				}
			}
			else
			{
				DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    5c80:	89 81       	ldd	r24, Y+1	; 0x01
    5c82:	28 2f       	mov	r18, r24
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	c9 01       	movw	r24, r18
    5c88:	88 0f       	add	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	82 0f       	add	r24, r18
    5c8e:	93 1f       	adc	r25, r19
    5c90:	88 0f       	add	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	fc 01       	movw	r30, r24
    5c96:	eb 52       	subi	r30, 0x2B	; 43
    5c98:	fe 4f       	sbci	r31, 0xFE	; 254
    5c9a:	82 e0       	ldi	r24, 0x02	; 2
    5c9c:	80 83       	st	Z, r24
    5c9e:	0f c0       	rjmp	.+30     	; 0x5cbe <DC_Motor_voidInit+0x196>
			}

		break;

		default:
			DC_Motor_astrPinMapping[u8CntrLoc].tenuDCMotor_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5ca0:	89 81       	ldd	r24, Y+1	; 0x01
    5ca2:	28 2f       	mov	r18, r24
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	c9 01       	movw	r24, r18
    5ca8:	88 0f       	add	r24, r24
    5caa:	99 1f       	adc	r25, r25
    5cac:	82 0f       	add	r24, r18
    5cae:	93 1f       	adc	r25, r19
    5cb0:	88 0f       	add	r24, r24
    5cb2:	99 1f       	adc	r25, r25
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	eb 52       	subi	r30, 0x2B	; 43
    5cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    5cba:	84 e0       	ldi	r24, 0x04	; 4
    5cbc:	80 83       	st	Z, r24

void DC_Motor_voidInit(void)
{
	uint8 u8CntrLoc ;
	init = 1;
	for (u8CntrLoc = 0 ; u8CntrLoc < DC_Motor_MAX_NUM ; u8CntrLoc++)
    5cbe:	89 81       	ldd	r24, Y+1	; 0x01
    5cc0:	8f 5f       	subi	r24, 0xFF	; 255
    5cc2:	89 83       	std	Y+1, r24	; 0x01
    5cc4:	89 81       	ldd	r24, Y+1	; 0x01
    5cc6:	82 30       	cpi	r24, 0x02	; 2
    5cc8:	08 f4       	brcc	.+2      	; 0x5ccc <DC_Motor_voidInit+0x1a4>
    5cca:	39 cf       	rjmp	.-398    	; 0x5b3e <DC_Motor_voidInit+0x16>
		break;
		}

	}

}
    5ccc:	0f 90       	pop	r0
    5cce:	0f 90       	pop	r0
    5cd0:	0f 90       	pop	r0
    5cd2:	cf 91       	pop	r28
    5cd4:	df 91       	pop	r29
    5cd6:	08 95       	ret

00005cd8 <DC_Motor_enuState>:
tenuErrorStatus DC_Motor_enuState (uint8 u8DC_MotorNumCpy , uint8 u8Mode)
{
    5cd8:	df 93       	push	r29
    5cda:	cf 93       	push	r28
    5cdc:	cd b7       	in	r28, 0x3d	; 61
    5cde:	de b7       	in	r29, 0x3e	; 62
    5ce0:	2b 97       	sbiw	r28, 0x0b	; 11
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
    5cec:	8a 83       	std	Y+2, r24	; 0x02
    5cee:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus DC_ErrorState = E_OK;
    5cf0:	19 82       	std	Y+1, r1	; 0x01

	switch (u8Mode) {
    5cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    5cf4:	28 2f       	mov	r18, r24
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	3b 87       	std	Y+11, r19	; 0x0b
    5cfa:	2a 87       	std	Y+10, r18	; 0x0a
    5cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d00:	86 36       	cpi	r24, 0x66	; 102
    5d02:	91 05       	cpc	r25, r1
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <DC_Motor_enuState+0x30>
    5d06:	f5 c1       	rjmp	.+1002   	; 0x60f2 <DC_Motor_enuState+0x41a>
    5d08:	2a 85       	ldd	r18, Y+10	; 0x0a
    5d0a:	3b 85       	ldd	r19, Y+11	; 0x0b
    5d0c:	2a 3a       	cpi	r18, 0xAA	; 170
    5d0e:	31 05       	cpc	r19, r1
    5d10:	39 f0       	breq	.+14     	; 0x5d20 <DC_Motor_enuState+0x48>
    5d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d14:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d16:	85 35       	cpi	r24, 0x55	; 85
    5d18:	91 05       	cpc	r25, r1
    5d1a:	09 f4       	brne	.+2      	; 0x5d1e <DC_Motor_enuState+0x46>
    5d1c:	f5 c0       	rjmp	.+490    	; 0x5f08 <DC_Motor_enuState+0x230>
    5d1e:	73 c2       	rjmp	.+1254   	; 0x6206 <DC_Motor_enuState+0x52e>
		case DC_Motor_forward:
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    5d20:	8a 81       	ldd	r24, Y+2	; 0x02
    5d22:	28 2f       	mov	r18, r24
    5d24:	30 e0       	ldi	r19, 0x00	; 0
    5d26:	c9 01       	movw	r24, r18
    5d28:	88 0f       	add	r24, r24
    5d2a:	99 1f       	adc	r25, r25
    5d2c:	82 0f       	add	r24, r18
    5d2e:	93 1f       	adc	r25, r19
    5d30:	88 0f       	add	r24, r24
    5d32:	99 1f       	adc	r25, r25
    5d34:	fc 01       	movw	r30, r24
    5d36:	e0 53       	subi	r30, 0x30	; 48
    5d38:	fe 4f       	sbci	r31, 0xFE	; 254
    5d3a:	80 81       	ld	r24, Z
    5d3c:	28 2f       	mov	r18, r24
    5d3e:	30 e0       	ldi	r19, 0x00	; 0
    5d40:	39 87       	std	Y+9, r19	; 0x09
    5d42:	28 87       	std	Y+8, r18	; 0x08
    5d44:	88 85       	ldd	r24, Y+8	; 0x08
    5d46:	99 85       	ldd	r25, Y+9	; 0x09
    5d48:	81 30       	cpi	r24, 0x01	; 1
    5d4a:	91 05       	cpc	r25, r1
    5d4c:	09 f4       	brne	.+2      	; 0x5d50 <DC_Motor_enuState+0x78>
    5d4e:	6f c0       	rjmp	.+222    	; 0x5e2e <DC_Motor_enuState+0x156>
    5d50:	28 85       	ldd	r18, Y+8	; 0x08
    5d52:	39 85       	ldd	r19, Y+9	; 0x09
    5d54:	22 30       	cpi	r18, 0x02	; 2
    5d56:	31 05       	cpc	r19, r1
    5d58:	09 f0       	breq	.+2      	; 0x5d5c <DC_Motor_enuState+0x84>
    5d5a:	57 c2       	rjmp	.+1198   	; 0x620a <DC_Motor_enuState+0x532>
			{
				case DC_Motor_intSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8POS)
    5d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d5e:	28 2f       	mov	r18, r24
    5d60:	30 e0       	ldi	r19, 0x00	; 0
    5d62:	c9 01       	movw	r24, r18
    5d64:	88 0f       	add	r24, r24
    5d66:	99 1f       	adc	r25, r25
    5d68:	82 0f       	add	r24, r18
    5d6a:	93 1f       	adc	r25, r19
    5d6c:	88 0f       	add	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	fc 01       	movw	r30, r24
    5d72:	ef 52       	subi	r30, 0x2F	; 47
    5d74:	fe 4f       	sbci	r31, 0xFE	; 254
    5d76:	80 81       	ld	r24, Z
    5d78:	88 23       	and	r24, r24
    5d7a:	19 f5       	brne	.+70     	; 0x5dc2 <DC_Motor_enuState+0xea>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH);
    5d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d7e:	28 2f       	mov	r18, r24
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	c9 01       	movw	r24, r18
    5d84:	88 0f       	add	r24, r24
    5d86:	99 1f       	adc	r25, r25
    5d88:	82 0f       	add	r24, r18
    5d8a:	93 1f       	adc	r25, r19
    5d8c:	88 0f       	add	r24, r24
    5d8e:	99 1f       	adc	r25, r25
    5d90:	fc 01       	movw	r30, r24
    5d92:	ed 52       	subi	r30, 0x2D	; 45
    5d94:	fe 4f       	sbci	r31, 0xFE	; 254
    5d96:	80 81       	ld	r24, Z
    5d98:	61 e0       	ldi	r22, 0x01	; 1
    5d9a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    5d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5da0:	28 2f       	mov	r18, r24
    5da2:	30 e0       	ldi	r19, 0x00	; 0
    5da4:	c9 01       	movw	r24, r18
    5da6:	88 0f       	add	r24, r24
    5da8:	99 1f       	adc	r25, r25
    5daa:	82 0f       	add	r24, r18
    5dac:	93 1f       	adc	r25, r19
    5dae:	88 0f       	add	r24, r24
    5db0:	99 1f       	adc	r25, r25
    5db2:	fc 01       	movw	r30, r24
    5db4:	ec 52       	subi	r30, 0x2C	; 44
    5db6:	fe 4f       	sbci	r31, 0xFE	; 254
    5db8:	80 81       	ld	r24, Z
    5dba:	60 e0       	ldi	r22, 0x00	; 0
    5dbc:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    5dc0:	24 c2       	rjmp	.+1096   	; 0x620a <DC_Motor_enuState+0x532>
					}
					else if (DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8NEG)
    5dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc4:	28 2f       	mov	r18, r24
    5dc6:	30 e0       	ldi	r19, 0x00	; 0
    5dc8:	c9 01       	movw	r24, r18
    5dca:	88 0f       	add	r24, r24
    5dcc:	99 1f       	adc	r25, r25
    5dce:	82 0f       	add	r24, r18
    5dd0:	93 1f       	adc	r25, r19
    5dd2:	88 0f       	add	r24, r24
    5dd4:	99 1f       	adc	r25, r25
    5dd6:	fc 01       	movw	r30, r24
    5dd8:	ef 52       	subi	r30, 0x2F	; 47
    5dda:	fe 4f       	sbci	r31, 0xFE	; 254
    5ddc:	80 81       	ld	r24, Z
    5dde:	8f 3f       	cpi	r24, 0xFF	; 255
    5de0:	19 f5       	brne	.+70     	; 0x5e28 <DC_Motor_enuState+0x150>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    5de2:	8a 81       	ldd	r24, Y+2	; 0x02
    5de4:	28 2f       	mov	r18, r24
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	c9 01       	movw	r24, r18
    5dea:	88 0f       	add	r24, r24
    5dec:	99 1f       	adc	r25, r25
    5dee:	82 0f       	add	r24, r18
    5df0:	93 1f       	adc	r25, r19
    5df2:	88 0f       	add	r24, r24
    5df4:	99 1f       	adc	r25, r25
    5df6:	fc 01       	movw	r30, r24
    5df8:	ed 52       	subi	r30, 0x2D	; 45
    5dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    5dfc:	80 81       	ld	r24, Z
    5dfe:	60 e0       	ldi	r22, 0x00	; 0
    5e00:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8HIGH);
    5e04:	8a 81       	ldd	r24, Y+2	; 0x02
    5e06:	28 2f       	mov	r18, r24
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	c9 01       	movw	r24, r18
    5e0c:	88 0f       	add	r24, r24
    5e0e:	99 1f       	adc	r25, r25
    5e10:	82 0f       	add	r24, r18
    5e12:	93 1f       	adc	r25, r19
    5e14:	88 0f       	add	r24, r24
    5e16:	99 1f       	adc	r25, r25
    5e18:	fc 01       	movw	r30, r24
    5e1a:	ec 52       	subi	r30, 0x2C	; 44
    5e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5e1e:	80 81       	ld	r24, Z
    5e20:	61 e0       	ldi	r22, 0x01	; 1
    5e22:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    5e26:	f1 c1       	rjmp	.+994    	; 0x620a <DC_Motor_enuState+0x532>

					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5e28:	84 e0       	ldi	r24, 0x04	; 4
    5e2a:	89 83       	std	Y+1, r24	; 0x01
    5e2c:	ee c1       	rjmp	.+988    	; 0x620a <DC_Motor_enuState+0x532>
				}
				break;

				case DC_Motor_extSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    5e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e30:	28 2f       	mov	r18, r24
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	c9 01       	movw	r24, r18
    5e36:	88 0f       	add	r24, r24
    5e38:	99 1f       	adc	r25, r25
    5e3a:	82 0f       	add	r24, r18
    5e3c:	93 1f       	adc	r25, r19
    5e3e:	88 0f       	add	r24, r24
    5e40:	99 1f       	adc	r25, r25
    5e42:	fc 01       	movw	r30, r24
    5e44:	ef 52       	subi	r30, 0x2F	; 47
    5e46:	fe 4f       	sbci	r31, 0xFE	; 254
    5e48:	80 81       	ld	r24, Z
    5e4a:	8a 3c       	cpi	r24, 0xCA	; 202
    5e4c:	31 f5       	brne	.+76     	; 0x5e9a <DC_Motor_enuState+0x1c2>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8NEG)
    5e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e50:	28 2f       	mov	r18, r24
    5e52:	30 e0       	ldi	r19, 0x00	; 0
    5e54:	c9 01       	movw	r24, r18
    5e56:	88 0f       	add	r24, r24
    5e58:	99 1f       	adc	r25, r25
    5e5a:	82 0f       	add	r24, r18
    5e5c:	93 1f       	adc	r25, r19
    5e5e:	01 96       	adiw	r24, 0x01	; 1
    5e60:	88 0f       	add	r24, r24
    5e62:	99 1f       	adc	r25, r25
    5e64:	fc 01       	movw	r30, r24
    5e66:	e0 53       	subi	r30, 0x30	; 48
    5e68:	fe 4f       	sbci	r31, 0xFE	; 254
    5e6a:	80 81       	ld	r24, Z
    5e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    5e6e:	91 f4       	brne	.+36     	; 0x5e94 <DC_Motor_enuState+0x1bc>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    5e70:	8a 81       	ldd	r24, Y+2	; 0x02
    5e72:	28 2f       	mov	r18, r24
    5e74:	30 e0       	ldi	r19, 0x00	; 0
    5e76:	c9 01       	movw	r24, r18
    5e78:	88 0f       	add	r24, r24
    5e7a:	99 1f       	adc	r25, r25
    5e7c:	82 0f       	add	r24, r18
    5e7e:	93 1f       	adc	r25, r19
    5e80:	88 0f       	add	r24, r24
    5e82:	99 1f       	adc	r25, r25
    5e84:	fc 01       	movw	r30, r24
    5e86:	ed 52       	subi	r30, 0x2D	; 45
    5e88:	fe 4f       	sbci	r31, 0xFE	; 254
    5e8a:	80 81       	ld	r24, Z
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    5e92:	bb c1       	rjmp	.+886    	; 0x620a <DC_Motor_enuState+0x532>
						}
						else
						{
							DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5e94:	84 e0       	ldi	r24, 0x04	; 4
    5e96:	89 83       	std	Y+1, r24	; 0x01
    5e98:	b8 c1       	rjmp	.+880    	; 0x620a <DC_Motor_enuState+0x532>
						}
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    5e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e9c:	28 2f       	mov	r18, r24
    5e9e:	30 e0       	ldi	r19, 0x00	; 0
    5ea0:	c9 01       	movw	r24, r18
    5ea2:	88 0f       	add	r24, r24
    5ea4:	99 1f       	adc	r25, r25
    5ea6:	82 0f       	add	r24, r18
    5ea8:	93 1f       	adc	r25, r19
    5eaa:	88 0f       	add	r24, r24
    5eac:	99 1f       	adc	r25, r25
    5eae:	fc 01       	movw	r30, r24
    5eb0:	ef 52       	subi	r30, 0x2F	; 47
    5eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5eb4:	80 81       	ld	r24, Z
    5eb6:	85 3c       	cpi	r24, 0xC5	; 197
    5eb8:	21 f5       	brne	.+72     	; 0x5f02 <DC_Motor_enuState+0x22a>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8POS)
    5eba:	8a 81       	ldd	r24, Y+2	; 0x02
    5ebc:	28 2f       	mov	r18, r24
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	c9 01       	movw	r24, r18
    5ec2:	88 0f       	add	r24, r24
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	82 0f       	add	r24, r18
    5ec8:	93 1f       	adc	r25, r19
    5eca:	01 96       	adiw	r24, 0x01	; 1
    5ecc:	88 0f       	add	r24, r24
    5ece:	99 1f       	adc	r25, r25
    5ed0:	fc 01       	movw	r30, r24
    5ed2:	e0 53       	subi	r30, 0x30	; 48
    5ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ed6:	80 81       	ld	r24, Z
    5ed8:	88 23       	and	r24, r24
    5eda:	09 f0       	breq	.+2      	; 0x5ede <DC_Motor_enuState+0x206>
    5edc:	96 c1       	rjmp	.+812    	; 0x620a <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    5ede:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee0:	28 2f       	mov	r18, r24
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	c9 01       	movw	r24, r18
    5ee6:	88 0f       	add	r24, r24
    5ee8:	99 1f       	adc	r25, r25
    5eea:	82 0f       	add	r24, r18
    5eec:	93 1f       	adc	r25, r19
    5eee:	88 0f       	add	r24, r24
    5ef0:	99 1f       	adc	r25, r25
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	ed 52       	subi	r30, 0x2D	; 45
    5ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef8:	80 81       	ld	r24, Z
    5efa:	61 e0       	ldi	r22, 0x01	; 1
    5efc:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    5f00:	84 c1       	rjmp	.+776    	; 0x620a <DC_Motor_enuState+0x532>

						}
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    5f02:	84 e0       	ldi	r24, 0x04	; 4
    5f04:	89 83       	std	Y+1, r24	; 0x01
    5f06:	81 c1       	rjmp	.+770    	; 0x620a <DC_Motor_enuState+0x532>
			}
		break;

		case DC_Motor_backward:
		{
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    5f08:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0a:	28 2f       	mov	r18, r24
    5f0c:	30 e0       	ldi	r19, 0x00	; 0
    5f0e:	c9 01       	movw	r24, r18
    5f10:	88 0f       	add	r24, r24
    5f12:	99 1f       	adc	r25, r25
    5f14:	82 0f       	add	r24, r18
    5f16:	93 1f       	adc	r25, r19
    5f18:	88 0f       	add	r24, r24
    5f1a:	99 1f       	adc	r25, r25
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	e0 53       	subi	r30, 0x30	; 48
    5f20:	fe 4f       	sbci	r31, 0xFE	; 254
    5f22:	80 81       	ld	r24, Z
    5f24:	28 2f       	mov	r18, r24
    5f26:	30 e0       	ldi	r19, 0x00	; 0
    5f28:	3f 83       	std	Y+7, r19	; 0x07
    5f2a:	2e 83       	std	Y+6, r18	; 0x06
    5f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    5f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    5f30:	81 30       	cpi	r24, 0x01	; 1
    5f32:	91 05       	cpc	r25, r1
    5f34:	09 f4       	brne	.+2      	; 0x5f38 <DC_Motor_enuState+0x260>
    5f36:	6f c0       	rjmp	.+222    	; 0x6016 <DC_Motor_enuState+0x33e>
    5f38:	2e 81       	ldd	r18, Y+6	; 0x06
    5f3a:	3f 81       	ldd	r19, Y+7	; 0x07
    5f3c:	22 30       	cpi	r18, 0x02	; 2
    5f3e:	31 05       	cpc	r19, r1
    5f40:	09 f0       	breq	.+2      	; 0x5f44 <DC_Motor_enuState+0x26c>
    5f42:	d4 c0       	rjmp	.+424    	; 0x60ec <DC_Motor_enuState+0x414>
			{
				case DC_Motor_intSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8POS)
    5f44:	8a 81       	ldd	r24, Y+2	; 0x02
    5f46:	28 2f       	mov	r18, r24
    5f48:	30 e0       	ldi	r19, 0x00	; 0
    5f4a:	c9 01       	movw	r24, r18
    5f4c:	88 0f       	add	r24, r24
    5f4e:	99 1f       	adc	r25, r25
    5f50:	82 0f       	add	r24, r18
    5f52:	93 1f       	adc	r25, r19
    5f54:	88 0f       	add	r24, r24
    5f56:	99 1f       	adc	r25, r25
    5f58:	fc 01       	movw	r30, r24
    5f5a:	ef 52       	subi	r30, 0x2F	; 47
    5f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f5e:	80 81       	ld	r24, Z
    5f60:	88 23       	and	r24, r24
    5f62:	19 f5       	brne	.+70     	; 0x5faa <DC_Motor_enuState+0x2d2>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    5f64:	8a 81       	ldd	r24, Y+2	; 0x02
    5f66:	28 2f       	mov	r18, r24
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	c9 01       	movw	r24, r18
    5f6c:	88 0f       	add	r24, r24
    5f6e:	99 1f       	adc	r25, r25
    5f70:	82 0f       	add	r24, r18
    5f72:	93 1f       	adc	r25, r19
    5f74:	88 0f       	add	r24, r24
    5f76:	99 1f       	adc	r25, r25
    5f78:	fc 01       	movw	r30, r24
    5f7a:	ed 52       	subi	r30, 0x2D	; 45
    5f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f7e:	80 81       	ld	r24, Z
    5f80:	60 e0       	ldi	r22, 0x00	; 0
    5f82:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8HIGH);
    5f86:	8a 81       	ldd	r24, Y+2	; 0x02
    5f88:	28 2f       	mov	r18, r24
    5f8a:	30 e0       	ldi	r19, 0x00	; 0
    5f8c:	c9 01       	movw	r24, r18
    5f8e:	88 0f       	add	r24, r24
    5f90:	99 1f       	adc	r25, r25
    5f92:	82 0f       	add	r24, r18
    5f94:	93 1f       	adc	r25, r19
    5f96:	88 0f       	add	r24, r24
    5f98:	99 1f       	adc	r25, r25
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	ec 52       	subi	r30, 0x2C	; 44
    5f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5fa0:	80 81       	ld	r24, Z
    5fa2:	61 e0       	ldi	r22, 0x01	; 1
    5fa4:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    5fa8:	30 c1       	rjmp	.+608    	; 0x620a <DC_Motor_enuState+0x532>
					}
					else if (DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Connect == DC_Motor_u8NEG)
    5faa:	8a 81       	ldd	r24, Y+2	; 0x02
    5fac:	28 2f       	mov	r18, r24
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	c9 01       	movw	r24, r18
    5fb2:	88 0f       	add	r24, r24
    5fb4:	99 1f       	adc	r25, r25
    5fb6:	82 0f       	add	r24, r18
    5fb8:	93 1f       	adc	r25, r19
    5fba:	88 0f       	add	r24, r24
    5fbc:	99 1f       	adc	r25, r25
    5fbe:	fc 01       	movw	r30, r24
    5fc0:	ef 52       	subi	r30, 0x2F	; 47
    5fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fc4:	80 81       	ld	r24, Z
    5fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    5fc8:	19 f5       	brne	.+70     	; 0x6010 <DC_Motor_enuState+0x338>
					{

						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8HIGH);
    5fca:	8a 81       	ldd	r24, Y+2	; 0x02
    5fcc:	28 2f       	mov	r18, r24
    5fce:	30 e0       	ldi	r19, 0x00	; 0
    5fd0:	c9 01       	movw	r24, r18
    5fd2:	88 0f       	add	r24, r24
    5fd4:	99 1f       	adc	r25, r25
    5fd6:	82 0f       	add	r24, r18
    5fd8:	93 1f       	adc	r25, r19
    5fda:	88 0f       	add	r24, r24
    5fdc:	99 1f       	adc	r25, r25
    5fde:	fc 01       	movw	r30, r24
    5fe0:	ed 52       	subi	r30, 0x2D	; 45
    5fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fe4:	80 81       	ld	r24, Z
    5fe6:	61 e0       	ldi	r22, 0x01	; 1
    5fe8:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    5fec:	8a 81       	ldd	r24, Y+2	; 0x02
    5fee:	28 2f       	mov	r18, r24
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	c9 01       	movw	r24, r18
    5ff4:	88 0f       	add	r24, r24
    5ff6:	99 1f       	adc	r25, r25
    5ff8:	82 0f       	add	r24, r18
    5ffa:	93 1f       	adc	r25, r19
    5ffc:	88 0f       	add	r24, r24
    5ffe:	99 1f       	adc	r25, r25
    6000:	fc 01       	movw	r30, r24
    6002:	ec 52       	subi	r30, 0x2C	; 44
    6004:	fe 4f       	sbci	r31, 0xFE	; 254
    6006:	80 81       	ld	r24, Z
    6008:	60 e0       	ldi	r22, 0x00	; 0
    600a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    600e:	fd c0       	rjmp	.+506    	; 0x620a <DC_Motor_enuState+0x532>
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6010:	84 e0       	ldi	r24, 0x04	; 4
    6012:	89 83       	std	Y+1, r24	; 0x01
    6014:	fa c0       	rjmp	.+500    	; 0x620a <DC_Motor_enuState+0x532>
				}
				break;
				case DC_Motor_extSupply:
				{

					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    6016:	8a 81       	ldd	r24, Y+2	; 0x02
    6018:	28 2f       	mov	r18, r24
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	c9 01       	movw	r24, r18
    601e:	88 0f       	add	r24, r24
    6020:	99 1f       	adc	r25, r25
    6022:	82 0f       	add	r24, r18
    6024:	93 1f       	adc	r25, r19
    6026:	88 0f       	add	r24, r24
    6028:	99 1f       	adc	r25, r25
    602a:	fc 01       	movw	r30, r24
    602c:	ef 52       	subi	r30, 0x2F	; 47
    602e:	fe 4f       	sbci	r31, 0xFE	; 254
    6030:	80 81       	ld	r24, Z
    6032:	8a 3c       	cpi	r24, 0xCA	; 202
    6034:	21 f5       	brne	.+72     	; 0x607e <DC_Motor_enuState+0x3a6>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8POS)
    6036:	8a 81       	ldd	r24, Y+2	; 0x02
    6038:	28 2f       	mov	r18, r24
    603a:	30 e0       	ldi	r19, 0x00	; 0
    603c:	c9 01       	movw	r24, r18
    603e:	88 0f       	add	r24, r24
    6040:	99 1f       	adc	r25, r25
    6042:	82 0f       	add	r24, r18
    6044:	93 1f       	adc	r25, r19
    6046:	01 96       	adiw	r24, 0x01	; 1
    6048:	88 0f       	add	r24, r24
    604a:	99 1f       	adc	r25, r25
    604c:	fc 01       	movw	r30, r24
    604e:	e0 53       	subi	r30, 0x30	; 48
    6050:	fe 4f       	sbci	r31, 0xFE	; 254
    6052:	80 81       	ld	r24, Z
    6054:	88 23       	and	r24, r24
    6056:	09 f0       	breq	.+2      	; 0x605a <DC_Motor_enuState+0x382>
    6058:	d8 c0       	rjmp	.+432    	; 0x620a <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    605a:	8a 81       	ldd	r24, Y+2	; 0x02
    605c:	28 2f       	mov	r18, r24
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	c9 01       	movw	r24, r18
    6062:	88 0f       	add	r24, r24
    6064:	99 1f       	adc	r25, r25
    6066:	82 0f       	add	r24, r18
    6068:	93 1f       	adc	r25, r19
    606a:	88 0f       	add	r24, r24
    606c:	99 1f       	adc	r25, r25
    606e:	fc 01       	movw	r30, r24
    6070:	ed 52       	subi	r30, 0x2D	; 45
    6072:	fe 4f       	sbci	r31, 0xFE	; 254
    6074:	80 81       	ld	r24, Z
    6076:	60 e0       	ldi	r22, 0x00	; 0
    6078:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    607c:	c6 c0       	rjmp	.+396    	; 0x620a <DC_Motor_enuState+0x532>
						else
						{
							//error
						}
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    607e:	8a 81       	ldd	r24, Y+2	; 0x02
    6080:	28 2f       	mov	r18, r24
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	c9 01       	movw	r24, r18
    6086:	88 0f       	add	r24, r24
    6088:	99 1f       	adc	r25, r25
    608a:	82 0f       	add	r24, r18
    608c:	93 1f       	adc	r25, r19
    608e:	88 0f       	add	r24, r24
    6090:	99 1f       	adc	r25, r25
    6092:	fc 01       	movw	r30, r24
    6094:	ef 52       	subi	r30, 0x2F	; 47
    6096:	fe 4f       	sbci	r31, 0xFE	; 254
    6098:	80 81       	ld	r24, Z
    609a:	85 3c       	cpi	r24, 0xC5	; 197
    609c:	21 f5       	brne	.+72     	; 0x60e6 <DC_Motor_enuState+0x40e>
					{
						if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinConnect == DC_Motor_u8NEG)
    609e:	8a 81       	ldd	r24, Y+2	; 0x02
    60a0:	28 2f       	mov	r18, r24
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	c9 01       	movw	r24, r18
    60a6:	88 0f       	add	r24, r24
    60a8:	99 1f       	adc	r25, r25
    60aa:	82 0f       	add	r24, r18
    60ac:	93 1f       	adc	r25, r19
    60ae:	01 96       	adiw	r24, 0x01	; 1
    60b0:	88 0f       	add	r24, r24
    60b2:	99 1f       	adc	r25, r25
    60b4:	fc 01       	movw	r30, r24
    60b6:	e0 53       	subi	r30, 0x30	; 48
    60b8:	fe 4f       	sbci	r31, 0xFE	; 254
    60ba:	80 81       	ld	r24, Z
    60bc:	8f 3f       	cpi	r24, 0xFF	; 255
    60be:	09 f0       	breq	.+2      	; 0x60c2 <DC_Motor_enuState+0x3ea>
    60c0:	a4 c0       	rjmp	.+328    	; 0x620a <DC_Motor_enuState+0x532>
						{
							DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    60c2:	8a 81       	ldd	r24, Y+2	; 0x02
    60c4:	28 2f       	mov	r18, r24
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	c9 01       	movw	r24, r18
    60ca:	88 0f       	add	r24, r24
    60cc:	99 1f       	adc	r25, r25
    60ce:	82 0f       	add	r24, r18
    60d0:	93 1f       	adc	r25, r19
    60d2:	88 0f       	add	r24, r24
    60d4:	99 1f       	adc	r25, r25
    60d6:	fc 01       	movw	r30, r24
    60d8:	ed 52       	subi	r30, 0x2D	; 45
    60da:	fe 4f       	sbci	r31, 0xFE	; 254
    60dc:	80 81       	ld	r24, Z
    60de:	61 e0       	ldi	r22, 0x01	; 1
    60e0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    60e4:	92 c0       	rjmp	.+292    	; 0x620a <DC_Motor_enuState+0x532>

						}
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    60e6:	84 e0       	ldi	r24, 0x04	; 4
    60e8:	89 83       	std	Y+1, r24	; 0x01
    60ea:	8f c0       	rjmp	.+286    	; 0x620a <DC_Motor_enuState+0x532>
					}
				}
				break;
				default:
					DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    60ec:	84 e0       	ldi	r24, 0x04	; 4
    60ee:	89 83       	std	Y+1, r24	; 0x01
    60f0:	8c c0       	rjmp	.+280    	; 0x620a <DC_Motor_enuState+0x532>
				}
				break;
		}
		case DC_Motor_off:
			switch(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8PinNumbers)
    60f2:	8a 81       	ldd	r24, Y+2	; 0x02
    60f4:	28 2f       	mov	r18, r24
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	c9 01       	movw	r24, r18
    60fa:	88 0f       	add	r24, r24
    60fc:	99 1f       	adc	r25, r25
    60fe:	82 0f       	add	r24, r18
    6100:	93 1f       	adc	r25, r19
    6102:	88 0f       	add	r24, r24
    6104:	99 1f       	adc	r25, r25
    6106:	fc 01       	movw	r30, r24
    6108:	e0 53       	subi	r30, 0x30	; 48
    610a:	fe 4f       	sbci	r31, 0xFE	; 254
    610c:	80 81       	ld	r24, Z
    610e:	28 2f       	mov	r18, r24
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	3d 83       	std	Y+5, r19	; 0x05
    6114:	2c 83       	std	Y+4, r18	; 0x04
    6116:	8c 81       	ldd	r24, Y+4	; 0x04
    6118:	9d 81       	ldd	r25, Y+5	; 0x05
    611a:	81 30       	cpi	r24, 0x01	; 1
    611c:	91 05       	cpc	r25, r1
    611e:	49 f1       	breq	.+82     	; 0x6172 <DC_Motor_enuState+0x49a>
    6120:	2c 81       	ldd	r18, Y+4	; 0x04
    6122:	3d 81       	ldd	r19, Y+5	; 0x05
    6124:	22 30       	cpi	r18, 0x02	; 2
    6126:	31 05       	cpc	r19, r1
    6128:	09 f0       	breq	.+2      	; 0x612c <DC_Motor_enuState+0x454>
    612a:	6a c0       	rjmp	.+212    	; 0x6200 <DC_Motor_enuState+0x528>
			{
				case DC_Motor_intSupply:
				{
					DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin1Map, DIO_u8LOW);
    612c:	8a 81       	ldd	r24, Y+2	; 0x02
    612e:	28 2f       	mov	r18, r24
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	c9 01       	movw	r24, r18
    6134:	88 0f       	add	r24, r24
    6136:	99 1f       	adc	r25, r25
    6138:	82 0f       	add	r24, r18
    613a:	93 1f       	adc	r25, r19
    613c:	88 0f       	add	r24, r24
    613e:	99 1f       	adc	r25, r25
    6140:	fc 01       	movw	r30, r24
    6142:	ed 52       	subi	r30, 0x2D	; 45
    6144:	fe 4f       	sbci	r31, 0xFE	; 254
    6146:	80 81       	ld	r24, Z
    6148:	60 e0       	ldi	r22, 0x00	; 0
    614a:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
					DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8inpSupply.u8Pin2Map, DIO_u8LOW);
    614e:	8a 81       	ldd	r24, Y+2	; 0x02
    6150:	28 2f       	mov	r18, r24
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	c9 01       	movw	r24, r18
    6156:	88 0f       	add	r24, r24
    6158:	99 1f       	adc	r25, r25
    615a:	82 0f       	add	r24, r18
    615c:	93 1f       	adc	r25, r19
    615e:	88 0f       	add	r24, r24
    6160:	99 1f       	adc	r25, r25
    6162:	fc 01       	movw	r30, r24
    6164:	ec 52       	subi	r30, 0x2C	; 44
    6166:	fe 4f       	sbci	r31, 0xFE	; 254
    6168:	80 81       	ld	r24, Z
    616a:	60 e0       	ldi	r22, 0x00	; 0
    616c:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    6170:	4c c0       	rjmp	.+152    	; 0x620a <DC_Motor_enuState+0x532>
				}
				break;
				case DC_Motor_extSupply:
				{
					if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extHIGH)
    6172:	8a 81       	ldd	r24, Y+2	; 0x02
    6174:	28 2f       	mov	r18, r24
    6176:	30 e0       	ldi	r19, 0x00	; 0
    6178:	c9 01       	movw	r24, r18
    617a:	88 0f       	add	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	82 0f       	add	r24, r18
    6180:	93 1f       	adc	r25, r19
    6182:	88 0f       	add	r24, r24
    6184:	99 1f       	adc	r25, r25
    6186:	fc 01       	movw	r30, r24
    6188:	ef 52       	subi	r30, 0x2F	; 47
    618a:	fe 4f       	sbci	r31, 0xFE	; 254
    618c:	80 81       	ld	r24, Z
    618e:	8a 3c       	cpi	r24, 0xCA	; 202
    6190:	91 f4       	brne	.+36     	; 0x61b6 <DC_Motor_enuState+0x4de>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8HIGH);
    6192:	8a 81       	ldd	r24, Y+2	; 0x02
    6194:	28 2f       	mov	r18, r24
    6196:	30 e0       	ldi	r19, 0x00	; 0
    6198:	c9 01       	movw	r24, r18
    619a:	88 0f       	add	r24, r24
    619c:	99 1f       	adc	r25, r25
    619e:	82 0f       	add	r24, r18
    61a0:	93 1f       	adc	r25, r19
    61a2:	88 0f       	add	r24, r24
    61a4:	99 1f       	adc	r25, r25
    61a6:	fc 01       	movw	r30, r24
    61a8:	ed 52       	subi	r30, 0x2D	; 45
    61aa:	fe 4f       	sbci	r31, 0xFE	; 254
    61ac:	80 81       	ld	r24, Z
    61ae:	61 e0       	ldi	r22, 0x01	; 1
    61b0:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    61b4:	2a c0       	rjmp	.+84     	; 0x620a <DC_Motor_enuState+0x532>
					}
					else if(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8SupplyType == DC_Motor_u8extLOW)
    61b6:	8a 81       	ldd	r24, Y+2	; 0x02
    61b8:	28 2f       	mov	r18, r24
    61ba:	30 e0       	ldi	r19, 0x00	; 0
    61bc:	c9 01       	movw	r24, r18
    61be:	88 0f       	add	r24, r24
    61c0:	99 1f       	adc	r25, r25
    61c2:	82 0f       	add	r24, r18
    61c4:	93 1f       	adc	r25, r19
    61c6:	88 0f       	add	r24, r24
    61c8:	99 1f       	adc	r25, r25
    61ca:	fc 01       	movw	r30, r24
    61cc:	ef 52       	subi	r30, 0x2F	; 47
    61ce:	fe 4f       	sbci	r31, 0xFE	; 254
    61d0:	80 81       	ld	r24, Z
    61d2:	85 3c       	cpi	r24, 0xC5	; 197
    61d4:	91 f4       	brne	.+36     	; 0x61fa <DC_Motor_enuState+0x522>
					{
						DIO_enuWritePin(DC_Motor_astrPinMapping[u8DC_MotorNumCpy].u8DioPinCfg.u8extSupply.u8PinMap, DIO_u8LOW);
    61d6:	8a 81       	ldd	r24, Y+2	; 0x02
    61d8:	28 2f       	mov	r18, r24
    61da:	30 e0       	ldi	r19, 0x00	; 0
    61dc:	c9 01       	movw	r24, r18
    61de:	88 0f       	add	r24, r24
    61e0:	99 1f       	adc	r25, r25
    61e2:	82 0f       	add	r24, r18
    61e4:	93 1f       	adc	r25, r19
    61e6:	88 0f       	add	r24, r24
    61e8:	99 1f       	adc	r25, r25
    61ea:	fc 01       	movw	r30, r24
    61ec:	ed 52       	subi	r30, 0x2D	; 45
    61ee:	fe 4f       	sbci	r31, 0xFE	; 254
    61f0:	80 81       	ld	r24, Z
    61f2:	60 e0       	ldi	r22, 0x00	; 0
    61f4:	0e 94 16 10 	call	0x202c	; 0x202c <DIO_enuWritePin>
    61f8:	08 c0       	rjmp	.+16     	; 0x620a <DC_Motor_enuState+0x532>
					}
					else
					{
						DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    61fa:	84 e0       	ldi	r24, 0x04	; 4
    61fc:	89 83       	std	Y+1, r24	; 0x01
    61fe:	05 c0       	rjmp	.+10     	; 0x620a <DC_Motor_enuState+0x532>
					}
				}
				break;
				default:
					DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6200:	84 e0       	ldi	r24, 0x04	; 4
    6202:	89 83       	std	Y+1, r24	; 0x01
    6204:	02 c0       	rjmp	.+4      	; 0x620a <DC_Motor_enuState+0x532>

			}
			break;

		default:
			DC_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    6206:	84 e0       	ldi	r24, 0x04	; 4
    6208:	89 83       	std	Y+1, r24	; 0x01
		break;
	}


	return DC_ErrorState;
    620a:	89 81       	ldd	r24, Y+1	; 0x01
}
    620c:	2b 96       	adiw	r28, 0x0b	; 11
    620e:	0f b6       	in	r0, 0x3f	; 63
    6210:	f8 94       	cli
    6212:	de bf       	out	0x3e, r29	; 62
    6214:	0f be       	out	0x3f, r0	; 63
    6216:	cd bf       	out	0x3d, r28	; 61
    6218:	cf 91       	pop	r28
    621a:	df 91       	pop	r29
    621c:	08 95       	ret

0000621e <button_voidInit>:

#include "BUTTON_cfg.h"
#include "BUTTON_priv.h"

void button_voidInit(void)
{
    621e:	0f 93       	push	r16
    6220:	1f 93       	push	r17
    6222:	df 93       	push	r29
    6224:	cf 93       	push	r28
    6226:	0f 92       	push	r0
    6228:	cd b7       	in	r28, 0x3d	; 61
    622a:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < BUTTON_MAX_NUM ; u8CntrLoc++)
    622c:	19 82       	std	Y+1, r1	; 0x01
    622e:	83 c0       	rjmp	.+262    	; 0x6336 <button_voidInit+0x118>
	{
		if(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap >= DIO_u8PIN_0 &&
    6230:	89 81       	ldd	r24, Y+1	; 0x01
    6232:	28 2f       	mov	r18, r24
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	c9 01       	movw	r24, r18
    6238:	88 0f       	add	r24, r24
    623a:	99 1f       	adc	r25, r25
    623c:	82 0f       	add	r24, r18
    623e:	93 1f       	adc	r25, r19
    6240:	fc 01       	movw	r30, r24
    6242:	e4 52       	subi	r30, 0x24	; 36
    6244:	fe 4f       	sbci	r31, 0xFE	; 254
    6246:	80 81       	ld	r24, Z
    6248:	80 32       	cpi	r24, 0x20	; 32
    624a:	08 f0       	brcs	.+2      	; 0x624e <button_voidInit+0x30>
    624c:	64 c0       	rjmp	.+200    	; 0x6316 <button_voidInit+0xf8>
		   Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap <= DIO_u8PIN_31	)
		{
			if(Button_astrButtonPinMapping[u8CntrLoc].u8ButtonModeConc == BUTTON_u8PullUp)
    624e:	89 81       	ldd	r24, Y+1	; 0x01
    6250:	28 2f       	mov	r18, r24
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	c9 01       	movw	r24, r18
    6256:	88 0f       	add	r24, r24
    6258:	99 1f       	adc	r25, r25
    625a:	82 0f       	add	r24, r18
    625c:	93 1f       	adc	r25, r19
    625e:	fc 01       	movw	r30, r24
    6260:	e3 52       	subi	r30, 0x23	; 35
    6262:	fe 4f       	sbci	r31, 0xFE	; 254
    6264:	80 81       	ld	r24, Z
    6266:	8a 3a       	cpi	r24, 0xAA	; 170
    6268:	e9 f4       	brne	.+58     	; 0x62a4 <button_voidInit+0x86>
			{

				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = DIO_enuPullWrite(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap , DIO_u8HIGH);
    626a:	89 81       	ldd	r24, Y+1	; 0x01
    626c:	08 2f       	mov	r16, r24
    626e:	10 e0       	ldi	r17, 0x00	; 0
    6270:	89 81       	ldd	r24, Y+1	; 0x01
    6272:	28 2f       	mov	r18, r24
    6274:	30 e0       	ldi	r19, 0x00	; 0
    6276:	c9 01       	movw	r24, r18
    6278:	88 0f       	add	r24, r24
    627a:	99 1f       	adc	r25, r25
    627c:	82 0f       	add	r24, r18
    627e:	93 1f       	adc	r25, r19
    6280:	fc 01       	movw	r30, r24
    6282:	e4 52       	subi	r30, 0x24	; 36
    6284:	fe 4f       	sbci	r31, 0xFE	; 254
    6286:	80 81       	ld	r24, Z
    6288:	61 e0       	ldi	r22, 0x01	; 1
    628a:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_enuPullWrite>
    628e:	28 2f       	mov	r18, r24
    6290:	c8 01       	movw	r24, r16
    6292:	88 0f       	add	r24, r24
    6294:	99 1f       	adc	r25, r25
    6296:	80 0f       	add	r24, r16
    6298:	91 1f       	adc	r25, r17
    629a:	fc 01       	movw	r30, r24
    629c:	e2 52       	subi	r30, 0x22	; 34
    629e:	fe 4f       	sbci	r31, 0xFE	; 254
    62a0:	20 83       	st	Z, r18
    62a2:	46 c0       	rjmp	.+140    	; 0x6330 <button_voidInit+0x112>

			}
			else if(Button_astrButtonPinMapping[u8CntrLoc].u8ButtonModeConc == BUTTON_u8PullDown)
    62a4:	89 81       	ldd	r24, Y+1	; 0x01
    62a6:	28 2f       	mov	r18, r24
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	c9 01       	movw	r24, r18
    62ac:	88 0f       	add	r24, r24
    62ae:	99 1f       	adc	r25, r25
    62b0:	82 0f       	add	r24, r18
    62b2:	93 1f       	adc	r25, r19
    62b4:	fc 01       	movw	r30, r24
    62b6:	e3 52       	subi	r30, 0x23	; 35
    62b8:	fe 4f       	sbci	r31, 0xFE	; 254
    62ba:	80 81       	ld	r24, Z
    62bc:	85 35       	cpi	r24, 0x55	; 85
    62be:	e9 f4       	brne	.+58     	; 0x62fa <button_voidInit+0xdc>
			{
				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = DIO_enuPullWrite(Button_astrButtonPinMapping[u8CntrLoc].u8DioPinsMap , DIO_u8LOW);
    62c0:	89 81       	ldd	r24, Y+1	; 0x01
    62c2:	08 2f       	mov	r16, r24
    62c4:	10 e0       	ldi	r17, 0x00	; 0
    62c6:	89 81       	ldd	r24, Y+1	; 0x01
    62c8:	28 2f       	mov	r18, r24
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	c9 01       	movw	r24, r18
    62ce:	88 0f       	add	r24, r24
    62d0:	99 1f       	adc	r25, r25
    62d2:	82 0f       	add	r24, r18
    62d4:	93 1f       	adc	r25, r19
    62d6:	fc 01       	movw	r30, r24
    62d8:	e4 52       	subi	r30, 0x24	; 36
    62da:	fe 4f       	sbci	r31, 0xFE	; 254
    62dc:	80 81       	ld	r24, Z
    62de:	60 e0       	ldi	r22, 0x00	; 0
    62e0:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_enuPullWrite>
    62e4:	28 2f       	mov	r18, r24
    62e6:	c8 01       	movw	r24, r16
    62e8:	88 0f       	add	r24, r24
    62ea:	99 1f       	adc	r25, r25
    62ec:	80 0f       	add	r24, r16
    62ee:	91 1f       	adc	r25, r17
    62f0:	fc 01       	movw	r30, r24
    62f2:	e2 52       	subi	r30, 0x22	; 34
    62f4:	fe 4f       	sbci	r31, 0xFE	; 254
    62f6:	20 83       	st	Z, r18
    62f8:	1b c0       	rjmp	.+54     	; 0x6330 <button_voidInit+0x112>
			}
			else{
				Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    62fa:	89 81       	ldd	r24, Y+1	; 0x01
    62fc:	28 2f       	mov	r18, r24
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	c9 01       	movw	r24, r18
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	82 0f       	add	r24, r18
    6308:	93 1f       	adc	r25, r19
    630a:	fc 01       	movw	r30, r24
    630c:	e2 52       	subi	r30, 0x22	; 34
    630e:	fe 4f       	sbci	r31, 0xFE	; 254
    6310:	84 e0       	ldi	r24, 0x04	; 4
    6312:	80 83       	st	Z, r24
    6314:	0d c0       	rjmp	.+26     	; 0x6330 <button_voidInit+0x112>
			}

		}
		else
		{
			Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    6316:	89 81       	ldd	r24, Y+1	; 0x01
    6318:	28 2f       	mov	r18, r24
    631a:	30 e0       	ldi	r19, 0x00	; 0
    631c:	c9 01       	movw	r24, r18
    631e:	88 0f       	add	r24, r24
    6320:	99 1f       	adc	r25, r25
    6322:	82 0f       	add	r24, r18
    6324:	93 1f       	adc	r25, r19
    6326:	fc 01       	movw	r30, r24
    6328:	e2 52       	subi	r30, 0x22	; 34
    632a:	fe 4f       	sbci	r31, 0xFE	; 254
    632c:	82 e0       	ldi	r24, 0x02	; 2
    632e:	80 83       	st	Z, r24
#include "BUTTON_priv.h"

void button_voidInit(void)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc < BUTTON_MAX_NUM ; u8CntrLoc++)
    6330:	89 81       	ldd	r24, Y+1	; 0x01
    6332:	8f 5f       	subi	r24, 0xFF	; 255
    6334:	89 83       	std	Y+1, r24	; 0x01
    6336:	89 81       	ldd	r24, Y+1	; 0x01
    6338:	85 30       	cpi	r24, 0x05	; 5
    633a:	08 f4       	brcc	.+2      	; 0x633e <button_voidInit+0x120>
    633c:	79 cf       	rjmp	.-270    	; 0x6230 <button_voidInit+0x12>
			Button_astrButtonPinMapping[u8CntrLoc].tenuBtn_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
		}

	}

}
    633e:	0f 90       	pop	r0
    6340:	cf 91       	pop	r28
    6342:	df 91       	pop	r29
    6344:	1f 91       	pop	r17
    6346:	0f 91       	pop	r16
    6348:	08 95       	ret

0000634a <Button_enuPressedValue>:


tenuErrorStatus Button_enuPressedValue(uint8 u8ButtonNumCpy , uint8 * u8ButtonValueCpy)
{
    634a:	df 93       	push	r29
    634c:	cf 93       	push	r28
    634e:	cd b7       	in	r28, 0x3d	; 61
    6350:	de b7       	in	r29, 0x3e	; 62
    6352:	27 97       	sbiw	r28, 0x07	; 7
    6354:	0f b6       	in	r0, 0x3f	; 63
    6356:	f8 94       	cli
    6358:	de bf       	out	0x3e, r29	; 62
    635a:	0f be       	out	0x3f, r0	; 63
    635c:	cd bf       	out	0x3d, r28	; 61
    635e:	8a 83       	std	Y+2, r24	; 0x02
    6360:	7c 83       	std	Y+4, r23	; 0x04
    6362:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus BTN_ErrorState = E_OK;
    6364:	19 82       	std	Y+1, r1	; 0x01
	if(u8ButtonValueCpy != NULL_PTR)
    6366:	8b 81       	ldd	r24, Y+3	; 0x03
    6368:	9c 81       	ldd	r25, Y+4	; 0x04
    636a:	00 97       	sbiw	r24, 0x00	; 0
    636c:	09 f4       	brne	.+2      	; 0x6370 <Button_enuPressedValue+0x26>
    636e:	4d c0       	rjmp	.+154    	; 0x640a <Button_enuPressedValue+0xc0>
	{

		if(Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap >= DIO_u8PIN_0 &&
    6370:	8a 81       	ldd	r24, Y+2	; 0x02
    6372:	28 2f       	mov	r18, r24
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	c9 01       	movw	r24, r18
    6378:	88 0f       	add	r24, r24
    637a:	99 1f       	adc	r25, r25
    637c:	82 0f       	add	r24, r18
    637e:	93 1f       	adc	r25, r19
    6380:	fc 01       	movw	r30, r24
    6382:	e4 52       	subi	r30, 0x24	; 36
    6384:	fe 4f       	sbci	r31, 0xFE	; 254
    6386:	80 81       	ld	r24, Z
    6388:	80 32       	cpi	r24, 0x20	; 32
    638a:	e0 f5       	brcc	.+120    	; 0x6404 <Button_enuPressedValue+0xba>
		   Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap <= DIO_u8PIN_31	)
		{

			BTN_ErrorState = DIO_enuReadPin(Button_astrButtonPinMapping[u8ButtonNumCpy].u8DioPinsMap , u8ButtonValueCpy);
    638c:	8a 81       	ldd	r24, Y+2	; 0x02
    638e:	28 2f       	mov	r18, r24
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	c9 01       	movw	r24, r18
    6394:	88 0f       	add	r24, r24
    6396:	99 1f       	adc	r25, r25
    6398:	82 0f       	add	r24, r18
    639a:	93 1f       	adc	r25, r19
    639c:	fc 01       	movw	r30, r24
    639e:	e4 52       	subi	r30, 0x24	; 36
    63a0:	fe 4f       	sbci	r31, 0xFE	; 254
    63a2:	80 81       	ld	r24, Z
    63a4:	2b 81       	ldd	r18, Y+3	; 0x03
    63a6:	3c 81       	ldd	r19, Y+4	; 0x04
    63a8:	b9 01       	movw	r22, r18
    63aa:	0e 94 21 11 	call	0x2242	; 0x2242 <DIO_enuReadPin>
    63ae:	89 83       	std	Y+1, r24	; 0x01

			switch(Button_astrButtonPinMapping[u8ButtonNumCpy].u8ButtonModeConc)
    63b0:	8a 81       	ldd	r24, Y+2	; 0x02
    63b2:	28 2f       	mov	r18, r24
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	c9 01       	movw	r24, r18
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	82 0f       	add	r24, r18
    63be:	93 1f       	adc	r25, r19
    63c0:	fc 01       	movw	r30, r24
    63c2:	e3 52       	subi	r30, 0x23	; 35
    63c4:	fe 4f       	sbci	r31, 0xFE	; 254
    63c6:	80 81       	ld	r24, Z
    63c8:	28 2f       	mov	r18, r24
    63ca:	30 e0       	ldi	r19, 0x00	; 0
    63cc:	3f 83       	std	Y+7, r19	; 0x07
    63ce:	2e 83       	std	Y+6, r18	; 0x06
    63d0:	8e 81       	ldd	r24, Y+6	; 0x06
    63d2:	9f 81       	ldd	r25, Y+7	; 0x07
    63d4:	85 35       	cpi	r24, 0x55	; 85
    63d6:	91 05       	cpc	r25, r1
    63d8:	d1 f0       	breq	.+52     	; 0x640e <Button_enuPressedValue+0xc4>
    63da:	2e 81       	ldd	r18, Y+6	; 0x06
    63dc:	3f 81       	ldd	r19, Y+7	; 0x07
    63de:	2a 3a       	cpi	r18, 0xAA	; 170
    63e0:	31 05       	cpc	r19, r1
    63e2:	69 f4       	brne	.+26     	; 0x63fe <Button_enuPressedValue+0xb4>
			{

			case BUTTON_u8PullUp:
				*u8ButtonValueCpy = !(*u8ButtonValueCpy);
    63e4:	eb 81       	ldd	r30, Y+3	; 0x03
    63e6:	fc 81       	ldd	r31, Y+4	; 0x04
    63e8:	80 81       	ld	r24, Z
    63ea:	1d 82       	std	Y+5, r1	; 0x05
    63ec:	88 23       	and	r24, r24
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <Button_enuPressedValue+0xaa>
    63f0:	31 e0       	ldi	r19, 0x01	; 1
    63f2:	3d 83       	std	Y+5, r19	; 0x05
    63f4:	eb 81       	ldd	r30, Y+3	; 0x03
    63f6:	fc 81       	ldd	r31, Y+4	; 0x04
    63f8:	8d 81       	ldd	r24, Y+5	; 0x05
    63fa:	80 83       	st	Z, r24
    63fc:	08 c0       	rjmp	.+16     	; 0x640e <Button_enuPressedValue+0xc4>
			case BUTTON_u8PullDown:
				//keep the same value
			break;

			default:
				BTN_ErrorState = E_NOK_CONFIG_PARM_ERROR;
    63fe:	84 e0       	ldi	r24, 0x04	; 4
    6400:	89 83       	std	Y+1, r24	; 0x01
    6402:	05 c0       	rjmp	.+10     	; 0x640e <Button_enuPressedValue+0xc4>
			}

		}
		else
		{
			BTN_ErrorState = E_NOK_PARAM_OUT_OF_RANGE;
    6404:	82 e0       	ldi	r24, 0x02	; 2
    6406:	89 83       	std	Y+1, r24	; 0x01
    6408:	02 c0       	rjmp	.+4      	; 0x640e <Button_enuPressedValue+0xc4>
		}

	}
	else
	{
		BTN_ErrorState = E_NOK_PARAM_NULL_POINTER;
    640a:	83 e0       	ldi	r24, 0x03	; 3
    640c:	89 83       	std	Y+1, r24	; 0x01
	}


	return BTN_ErrorState;
    640e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6410:	27 96       	adiw	r28, 0x07	; 7
    6412:	0f b6       	in	r0, 0x3f	; 63
    6414:	f8 94       	cli
    6416:	de bf       	out	0x3e, r29	; 62
    6418:	0f be       	out	0x3f, r0	; 63
    641a:	cd bf       	out	0x3d, r28	; 61
    641c:	cf 91       	pop	r28
    641e:	df 91       	pop	r29
    6420:	08 95       	ret

00006422 <BuzzerON>:


uint8 Temp_u8Channel;

void BuzzerON(void)
{
    6422:	df 93       	push	r29
    6424:	cf 93       	push	r28
    6426:	cd b7       	in	r28, 0x3d	; 61
    6428:	de b7       	in	r29, 0x3e	; 62
	LED_enuToggle(LED_u8NUM_0);
    642a:	80 e0       	ldi	r24, 0x00	; 0
    642c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <LED_enuToggle>
	TIM0_voidDelayMs(500);
    6430:	84 ef       	ldi	r24, 0xF4	; 244
    6432:	91 e0       	ldi	r25, 0x01	; 1
    6434:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TIM0_voidDelayMs>

}
    6438:	cf 91       	pop	r28
    643a:	df 91       	pop	r29
    643c:	08 95       	ret

0000643e <BuzzerOFF>:
void BuzzerOFF(void)
{
    643e:	df 93       	push	r29
    6440:	cf 93       	push	r28
    6442:	cd b7       	in	r28, 0x3d	; 61
    6444:	de b7       	in	r29, 0x3e	; 62
	LED_enuWriteValue(Temp_astrChannelMapping[Temp_u8Channel].u8BuzzstrChannel , LED_u8OFF);
    6446:	80 91 31 02 	lds	r24, 0x0231
    644a:	28 2f       	mov	r18, r24
    644c:	30 e0       	ldi	r19, 0x00	; 0
    644e:	c9 01       	movw	r24, r18
    6450:	82 95       	swap	r24
    6452:	92 95       	swap	r25
    6454:	90 7f       	andi	r25, 0xF0	; 240
    6456:	98 27       	eor	r25, r24
    6458:	80 7f       	andi	r24, 0xF0	; 240
    645a:	98 27       	eor	r25, r24
    645c:	82 0f       	add	r24, r18
    645e:	93 1f       	adc	r25, r19
    6460:	fc 01       	movw	r30, r24
    6462:	e2 51       	subi	r30, 0x12	; 18
    6464:	fe 4f       	sbci	r31, 0xFE	; 254
    6466:	80 81       	ld	r24, Z
    6468:	60 e0       	ldi	r22, 0x00	; 0
    646a:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <LED_enuWriteValue>

}
    646e:	cf 91       	pop	r28
    6470:	df 91       	pop	r29
    6472:	08 95       	ret

00006474 <Temp_vidInit>:

void Temp_vidInit(uint8 TempChannel)
{
    6474:	df 93       	push	r29
    6476:	cf 93       	push	r28
    6478:	0f 92       	push	r0
    647a:	cd b7       	in	r28, 0x3d	; 61
    647c:	de b7       	in	r29, 0x3e	; 62
    647e:	89 83       	std	Y+1, r24	; 0x01
	TIM0_voidFPWMInit();
    6480:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <TIM0_voidFPWMInit>

	LM35_vidInit(TempChannel);
    6484:	89 81       	ldd	r24, Y+1	; 0x01
    6486:	0e 94 ce 1a 	call	0x359c	; 0x359c <LM35_vidInit>
	Temp_u8Channel = TempChannel;
    648a:	89 81       	ldd	r24, Y+1	; 0x01
    648c:	80 93 31 02 	sts	0x0231, r24

}
    6490:	0f 90       	pop	r0
    6492:	cf 91       	pop	r28
    6494:	df 91       	pop	r29
    6496:	08 95       	ret

00006498 <Temp_vidReadTemp>:

void Temp_vidReadTemp(void)
{
    6498:	0f 93       	push	r16
    649a:	1f 93       	push	r17
    649c:	df 93       	push	r29
    649e:	cf 93       	push	r28
    64a0:	cd b7       	in	r28, 0x3d	; 61
    64a2:	de b7       	in	r29, 0x3e	; 62
	Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent =
    64a4:	80 91 31 02 	lds	r24, 0x0231
    64a8:	08 2f       	mov	r16, r24
    64aa:	10 e0       	ldi	r17, 0x00	; 0
    64ac:	80 91 31 02 	lds	r24, 0x0231
    64b0:	28 2f       	mov	r18, r24
    64b2:	30 e0       	ldi	r19, 0x00	; 0
    64b4:	c9 01       	movw	r24, r18
    64b6:	82 95       	swap	r24
    64b8:	92 95       	swap	r25
    64ba:	90 7f       	andi	r25, 0xF0	; 240
    64bc:	98 27       	eor	r25, r24
    64be:	80 7f       	andi	r24, 0xF0	; 240
    64c0:	98 27       	eor	r25, r24
    64c2:	82 0f       	add	r24, r18
    64c4:	93 1f       	adc	r25, r19
    64c6:	fc 01       	movw	r30, r24
    64c8:	e3 51       	subi	r30, 0x13	; 19
    64ca:	fe 4f       	sbci	r31, 0xFE	; 254
    64cc:	80 81       	ld	r24, Z
    64ce:	0e 94 14 1b 	call	0x3628	; 0x3628 <LM35_u16ReadTemp>
    64d2:	9b 01       	movw	r18, r22
    64d4:	ac 01       	movw	r20, r24
    64d6:	c8 01       	movw	r24, r16
    64d8:	82 95       	swap	r24
    64da:	92 95       	swap	r25
    64dc:	90 7f       	andi	r25, 0xF0	; 240
    64de:	98 27       	eor	r25, r24
    64e0:	80 7f       	andi	r24, 0xF0	; 240
    64e2:	98 27       	eor	r25, r24
    64e4:	80 0f       	add	r24, r16
    64e6:	91 1f       	adc	r25, r17
    64e8:	fc 01       	movw	r30, r24
    64ea:	e9 50       	subi	r30, 0x09	; 9
    64ec:	fe 4f       	sbci	r31, 0xFE	; 254
    64ee:	20 83       	st	Z, r18
    64f0:	31 83       	std	Z+1, r19	; 0x01
    64f2:	42 83       	std	Z+2, r20	; 0x02
    64f4:	53 83       	std	Z+3, r21	; 0x03
			LM35_u16ReadTemp(Temp_astrChannelMapping[Temp_u8Channel].u8LM35strChannel);

	LCD_enuWriteCmd(LCD_u8NUM_1 , LCD_u8CLEAR);
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	61 e0       	ldi	r22, 0x01	; 1
    64fa:	0e 94 56 28 	call	0x50ac	; 0x50ac <LCD_enuWriteCmd>
	LCD_enuWriteChar(LCD_u8NUM_1 , ' ');
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	60 e2       	ldi	r22, 0x20	; 32
    6502:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
	LCD_enuWritenumber(LCD_u8NUM_1,Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent );
    6506:	80 91 31 02 	lds	r24, 0x0231
    650a:	28 2f       	mov	r18, r24
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	c9 01       	movw	r24, r18
    6510:	82 95       	swap	r24
    6512:	92 95       	swap	r25
    6514:	90 7f       	andi	r25, 0xF0	; 240
    6516:	98 27       	eor	r25, r24
    6518:	80 7f       	andi	r24, 0xF0	; 240
    651a:	98 27       	eor	r25, r24
    651c:	82 0f       	add	r24, r18
    651e:	93 1f       	adc	r25, r19
    6520:	fc 01       	movw	r30, r24
    6522:	e9 50       	subi	r30, 0x09	; 9
    6524:	fe 4f       	sbci	r31, 0xFE	; 254
    6526:	20 81       	ld	r18, Z
    6528:	31 81       	ldd	r19, Z+1	; 0x01
    652a:	42 81       	ldd	r20, Z+2	; 0x02
    652c:	53 81       	ldd	r21, Z+3	; 0x03
    652e:	81 e0       	ldi	r24, 0x01	; 1
    6530:	ba 01       	movw	r22, r20
    6532:	a9 01       	movw	r20, r18
    6534:	0e 94 ba 29 	call	0x5374	; 0x5374 <LCD_enuWritenumber>
}
    6538:	cf 91       	pop	r28
    653a:	df 91       	pop	r29
    653c:	1f 91       	pop	r17
    653e:	0f 91       	pop	r16
    6540:	08 95       	ret

00006542 <Temp_vidTempSystemTask>:


void Temp_vidTempSystemTask(void)
{
    6542:	af 92       	push	r10
    6544:	bf 92       	push	r11
    6546:	cf 92       	push	r12
    6548:	df 92       	push	r13
    654a:	ef 92       	push	r14
    654c:	ff 92       	push	r15
    654e:	0f 93       	push	r16
    6550:	1f 93       	push	r17
    6552:	df 93       	push	r29
    6554:	cf 93       	push	r28
    6556:	00 d0       	rcall	.+0      	; 0x6558 <Temp_vidTempSystemTask+0x16>
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62

	Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent =
    655c:	80 91 31 02 	lds	r24, 0x0231
    6560:	08 2f       	mov	r16, r24
    6562:	10 e0       	ldi	r17, 0x00	; 0
    6564:	80 91 31 02 	lds	r24, 0x0231
    6568:	28 2f       	mov	r18, r24
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	c9 01       	movw	r24, r18
    656e:	82 95       	swap	r24
    6570:	92 95       	swap	r25
    6572:	90 7f       	andi	r25, 0xF0	; 240
    6574:	98 27       	eor	r25, r24
    6576:	80 7f       	andi	r24, 0xF0	; 240
    6578:	98 27       	eor	r25, r24
    657a:	82 0f       	add	r24, r18
    657c:	93 1f       	adc	r25, r19
    657e:	fc 01       	movw	r30, r24
    6580:	e3 51       	subi	r30, 0x13	; 19
    6582:	fe 4f       	sbci	r31, 0xFE	; 254
    6584:	80 81       	ld	r24, Z
    6586:	0e 94 14 1b 	call	0x3628	; 0x3628 <LM35_u16ReadTemp>
    658a:	9b 01       	movw	r18, r22
    658c:	ac 01       	movw	r20, r24
    658e:	c8 01       	movw	r24, r16
    6590:	82 95       	swap	r24
    6592:	92 95       	swap	r25
    6594:	90 7f       	andi	r25, 0xF0	; 240
    6596:	98 27       	eor	r25, r24
    6598:	80 7f       	andi	r24, 0xF0	; 240
    659a:	98 27       	eor	r25, r24
    659c:	80 0f       	add	r24, r16
    659e:	91 1f       	adc	r25, r17
    65a0:	fc 01       	movw	r30, r24
    65a2:	e9 50       	subi	r30, 0x09	; 9
    65a4:	fe 4f       	sbci	r31, 0xFE	; 254
    65a6:	20 83       	st	Z, r18
    65a8:	31 83       	std	Z+1, r19	; 0x01
    65aa:	42 83       	std	Z+2, r20	; 0x02
    65ac:	53 83       	std	Z+3, r21	; 0x03
			LM35_u16ReadTemp(Temp_astrChannelMapping[Temp_u8Channel].u8LM35strChannel);
	if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent > TempFire)
    65ae:	80 91 31 02 	lds	r24, 0x0231
    65b2:	28 2f       	mov	r18, r24
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	c9 01       	movw	r24, r18
    65b8:	82 95       	swap	r24
    65ba:	92 95       	swap	r25
    65bc:	90 7f       	andi	r25, 0xF0	; 240
    65be:	98 27       	eor	r25, r24
    65c0:	80 7f       	andi	r24, 0xF0	; 240
    65c2:	98 27       	eor	r25, r24
    65c4:	82 0f       	add	r24, r18
    65c6:	93 1f       	adc	r25, r19
    65c8:	fc 01       	movw	r30, r24
    65ca:	e9 50       	subi	r30, 0x09	; 9
    65cc:	fe 4f       	sbci	r31, 0xFE	; 254
    65ce:	80 81       	ld	r24, Z
    65d0:	91 81       	ldd	r25, Z+1	; 0x01
    65d2:	a2 81       	ldd	r26, Z+2	; 0x02
    65d4:	b3 81       	ldd	r27, Z+3	; 0x03
    65d6:	bc 01       	movw	r22, r24
    65d8:	cd 01       	movw	r24, r26
    65da:	20 e0       	ldi	r18, 0x00	; 0
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	4c e8       	ldi	r20, 0x8C	; 140
    65e0:	52 e4       	ldi	r21, 0x42	; 66
    65e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65e6:	18 16       	cp	r1, r24
    65e8:	1c f4       	brge	.+6      	; 0x65f0 <Temp_vidTempSystemTask+0xae>
	{
		BuzzerON();
    65ea:	0e 94 11 32 	call	0x6422	; 0x6422 <BuzzerON>
    65ee:	20 c0       	rjmp	.+64     	; 0x6630 <Temp_vidTempSystemTask+0xee>
	}
	else if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent < TempSafety)
    65f0:	80 91 31 02 	lds	r24, 0x0231
    65f4:	28 2f       	mov	r18, r24
    65f6:	30 e0       	ldi	r19, 0x00	; 0
    65f8:	c9 01       	movw	r24, r18
    65fa:	82 95       	swap	r24
    65fc:	92 95       	swap	r25
    65fe:	90 7f       	andi	r25, 0xF0	; 240
    6600:	98 27       	eor	r25, r24
    6602:	80 7f       	andi	r24, 0xF0	; 240
    6604:	98 27       	eor	r25, r24
    6606:	82 0f       	add	r24, r18
    6608:	93 1f       	adc	r25, r19
    660a:	fc 01       	movw	r30, r24
    660c:	e9 50       	subi	r30, 0x09	; 9
    660e:	fe 4f       	sbci	r31, 0xFE	; 254
    6610:	80 81       	ld	r24, Z
    6612:	91 81       	ldd	r25, Z+1	; 0x01
    6614:	a2 81       	ldd	r26, Z+2	; 0x02
    6616:	b3 81       	ldd	r27, Z+3	; 0x03
    6618:	bc 01       	movw	r22, r24
    661a:	cd 01       	movw	r24, r26
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	48 e4       	ldi	r20, 0x48	; 72
    6622:	52 e4       	ldi	r21, 0x42	; 66
    6624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6628:	88 23       	and	r24, r24
    662a:	14 f4       	brge	.+4      	; 0x6630 <Temp_vidTempSystemTask+0xee>
	{
		BuzzerOFF();
    662c:	0e 94 1f 32 	call	0x643e	; 0x643e <BuzzerOFF>
	}

	switch(Temp_astrChannelMapping[Temp_u8Channel].u8TempState)
    6630:	80 91 31 02 	lds	r24, 0x0231
    6634:	28 2f       	mov	r18, r24
    6636:	30 e0       	ldi	r19, 0x00	; 0
    6638:	c9 01       	movw	r24, r18
    663a:	82 95       	swap	r24
    663c:	92 95       	swap	r25
    663e:	90 7f       	andi	r25, 0xF0	; 240
    6640:	98 27       	eor	r25, r24
    6642:	80 7f       	andi	r24, 0xF0	; 240
    6644:	98 27       	eor	r25, r24
    6646:	82 0f       	add	r24, r18
    6648:	93 1f       	adc	r25, r19
    664a:	fc 01       	movw	r30, r24
    664c:	e5 51       	subi	r30, 0x15	; 21
    664e:	fe 4f       	sbci	r31, 0xFE	; 254
    6650:	80 81       	ld	r24, Z
    6652:	28 2f       	mov	r18, r24
    6654:	30 e0       	ldi	r19, 0x00	; 0
    6656:	3a 83       	std	Y+2, r19	; 0x02
    6658:	29 83       	std	Y+1, r18	; 0x01
    665a:	89 81       	ldd	r24, Y+1	; 0x01
    665c:	9a 81       	ldd	r25, Y+2	; 0x02
    665e:	84 34       	cpi	r24, 0x44	; 68
    6660:	91 05       	cpc	r25, r1
    6662:	09 f4       	brne	.+2      	; 0x6666 <Temp_vidTempSystemTask+0x124>
    6664:	78 c0       	rjmp	.+240    	; 0x6756 <Temp_vidTempSystemTask+0x214>
    6666:	29 81       	ldd	r18, Y+1	; 0x01
    6668:	3a 81       	ldd	r19, Y+2	; 0x02
    666a:	2e 3e       	cpi	r18, 0xEE	; 238
    666c:	31 05       	cpc	r19, r1
    666e:	09 f0       	breq	.+2      	; 0x6672 <Temp_vidTempSystemTask+0x130>
    6670:	e2 c0       	rjmp	.+452    	; 0x6836 <Temp_vidTempSystemTask+0x2f4>
	{
	case TEMP_StateOFF:
	{
		if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent <
    6672:	80 91 31 02 	lds	r24, 0x0231
    6676:	28 2f       	mov	r18, r24
    6678:	30 e0       	ldi	r19, 0x00	; 0
    667a:	c9 01       	movw	r24, r18
    667c:	82 95       	swap	r24
    667e:	92 95       	swap	r25
    6680:	90 7f       	andi	r25, 0xF0	; 240
    6682:	98 27       	eor	r25, r24
    6684:	80 7f       	andi	r24, 0xF0	; 240
    6686:	98 27       	eor	r25, r24
    6688:	82 0f       	add	r24, r18
    668a:	93 1f       	adc	r25, r19
    668c:	fc 01       	movw	r30, r24
    668e:	e9 50       	subi	r30, 0x09	; 9
    6690:	fe 4f       	sbci	r31, 0xFE	; 254
    6692:	a0 80       	ld	r10, Z
    6694:	b1 80       	ldd	r11, Z+1	; 0x01
    6696:	c2 80       	ldd	r12, Z+2	; 0x02
    6698:	d3 80       	ldd	r13, Z+3	; 0x03
    669a:	80 91 31 02 	lds	r24, 0x0231
    669e:	28 2f       	mov	r18, r24
    66a0:	30 e0       	ldi	r19, 0x00	; 0
    66a2:	c9 01       	movw	r24, r18
    66a4:	82 95       	swap	r24
    66a6:	92 95       	swap	r25
    66a8:	90 7f       	andi	r25, 0xF0	; 240
    66aa:	98 27       	eor	r25, r24
    66ac:	80 7f       	andi	r24, 0xF0	; 240
    66ae:	98 27       	eor	r25, r24
    66b0:	82 0f       	add	r24, r18
    66b2:	93 1f       	adc	r25, r19
    66b4:	fc 01       	movw	r30, r24
    66b6:	e1 51       	subi	r30, 0x11	; 17
    66b8:	fe 4f       	sbci	r31, 0xFE	; 254
    66ba:	e0 80       	ld	r14, Z
    66bc:	f1 80       	ldd	r15, Z+1	; 0x01
    66be:	02 81       	ldd	r16, Z+2	; 0x02
    66c0:	13 81       	ldd	r17, Z+3	; 0x03
    66c2:	80 91 31 02 	lds	r24, 0x0231
    66c6:	28 2f       	mov	r18, r24
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	c9 01       	movw	r24, r18
    66cc:	82 95       	swap	r24
    66ce:	92 95       	swap	r25
    66d0:	90 7f       	andi	r25, 0xF0	; 240
    66d2:	98 27       	eor	r25, r24
    66d4:	80 7f       	andi	r24, 0xF0	; 240
    66d6:	98 27       	eor	r25, r24
    66d8:	82 0f       	add	r24, r18
    66da:	93 1f       	adc	r25, r19
    66dc:	fc 01       	movw	r30, r24
    66de:	ed 50       	subi	r30, 0x0D	; 13
    66e0:	fe 4f       	sbci	r31, 0xFE	; 254
    66e2:	20 81       	ld	r18, Z
    66e4:	31 81       	ldd	r19, Z+1	; 0x01
    66e6:	42 81       	ldd	r20, Z+2	; 0x02
    66e8:	53 81       	ldd	r21, Z+3	; 0x03
    66ea:	c8 01       	movw	r24, r16
    66ec:	b7 01       	movw	r22, r14
    66ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    66f2:	dc 01       	movw	r26, r24
    66f4:	cb 01       	movw	r24, r22
    66f6:	9c 01       	movw	r18, r24
    66f8:	ad 01       	movw	r20, r26
    66fa:	c6 01       	movw	r24, r12
    66fc:	b5 01       	movw	r22, r10
    66fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6702:	88 23       	and	r24, r24
    6704:	0c f0       	brlt	.+2      	; 0x6708 <Temp_vidTempSystemTask+0x1c6>
    6706:	97 c0       	rjmp	.+302    	; 0x6836 <Temp_vidTempSystemTask+0x2f4>
		(Temp_astrChannelMapping[Temp_u8Channel].u8TempNormal - Temp_astrChannelMapping[Temp_u8Channel].u8TempThreshold ))
		{
			Temp_astrChannelMapping[Temp_u8Channel].u8TempState = TEMP_StateON;
    6708:	80 91 31 02 	lds	r24, 0x0231
    670c:	28 2f       	mov	r18, r24
    670e:	30 e0       	ldi	r19, 0x00	; 0
    6710:	c9 01       	movw	r24, r18
    6712:	82 95       	swap	r24
    6714:	92 95       	swap	r25
    6716:	90 7f       	andi	r25, 0xF0	; 240
    6718:	98 27       	eor	r25, r24
    671a:	80 7f       	andi	r24, 0xF0	; 240
    671c:	98 27       	eor	r25, r24
    671e:	82 0f       	add	r24, r18
    6720:	93 1f       	adc	r25, r19
    6722:	fc 01       	movw	r30, r24
    6724:	e5 51       	subi	r30, 0x15	; 21
    6726:	fe 4f       	sbci	r31, 0xFE	; 254
    6728:	84 e4       	ldi	r24, 0x44	; 68
    672a:	80 83       	st	Z, r24
			Relay_enuState(Temp_astrChannelMapping[Temp_u8Channel].u8RELAYstrChannel , RELAY_ON);
    672c:	80 91 31 02 	lds	r24, 0x0231
    6730:	28 2f       	mov	r18, r24
    6732:	30 e0       	ldi	r19, 0x00	; 0
    6734:	c9 01       	movw	r24, r18
    6736:	82 95       	swap	r24
    6738:	92 95       	swap	r25
    673a:	90 7f       	andi	r25, 0xF0	; 240
    673c:	98 27       	eor	r25, r24
    673e:	80 7f       	andi	r24, 0xF0	; 240
    6740:	98 27       	eor	r25, r24
    6742:	82 0f       	add	r24, r18
    6744:	93 1f       	adc	r25, r19
    6746:	fc 01       	movw	r30, r24
    6748:	e4 51       	subi	r30, 0x14	; 20
    674a:	fe 4f       	sbci	r31, 0xFE	; 254
    674c:	80 81       	ld	r24, Z
    674e:	65 e5       	ldi	r22, 0x55	; 85
    6750:	0e 94 0b 19 	call	0x3216	; 0x3216 <Relay_enuState>
    6754:	70 c0       	rjmp	.+224    	; 0x6836 <Temp_vidTempSystemTask+0x2f4>

	}
	break;
	case TEMP_StateON:
	{
		if(Temp_astrChannelMapping[Temp_u8Channel].u8TempCurrent >
    6756:	80 91 31 02 	lds	r24, 0x0231
    675a:	28 2f       	mov	r18, r24
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	c9 01       	movw	r24, r18
    6760:	82 95       	swap	r24
    6762:	92 95       	swap	r25
    6764:	90 7f       	andi	r25, 0xF0	; 240
    6766:	98 27       	eor	r25, r24
    6768:	80 7f       	andi	r24, 0xF0	; 240
    676a:	98 27       	eor	r25, r24
    676c:	82 0f       	add	r24, r18
    676e:	93 1f       	adc	r25, r19
    6770:	fc 01       	movw	r30, r24
    6772:	e9 50       	subi	r30, 0x09	; 9
    6774:	fe 4f       	sbci	r31, 0xFE	; 254
    6776:	a0 80       	ld	r10, Z
    6778:	b1 80       	ldd	r11, Z+1	; 0x01
    677a:	c2 80       	ldd	r12, Z+2	; 0x02
    677c:	d3 80       	ldd	r13, Z+3	; 0x03
    677e:	80 91 31 02 	lds	r24, 0x0231
    6782:	28 2f       	mov	r18, r24
    6784:	30 e0       	ldi	r19, 0x00	; 0
    6786:	c9 01       	movw	r24, r18
    6788:	82 95       	swap	r24
    678a:	92 95       	swap	r25
    678c:	90 7f       	andi	r25, 0xF0	; 240
    678e:	98 27       	eor	r25, r24
    6790:	80 7f       	andi	r24, 0xF0	; 240
    6792:	98 27       	eor	r25, r24
    6794:	82 0f       	add	r24, r18
    6796:	93 1f       	adc	r25, r19
    6798:	fc 01       	movw	r30, r24
    679a:	e1 51       	subi	r30, 0x11	; 17
    679c:	fe 4f       	sbci	r31, 0xFE	; 254
    679e:	e0 80       	ld	r14, Z
    67a0:	f1 80       	ldd	r15, Z+1	; 0x01
    67a2:	02 81       	ldd	r16, Z+2	; 0x02
    67a4:	13 81       	ldd	r17, Z+3	; 0x03
    67a6:	80 91 31 02 	lds	r24, 0x0231
    67aa:	28 2f       	mov	r18, r24
    67ac:	30 e0       	ldi	r19, 0x00	; 0
    67ae:	c9 01       	movw	r24, r18
    67b0:	82 95       	swap	r24
    67b2:	92 95       	swap	r25
    67b4:	90 7f       	andi	r25, 0xF0	; 240
    67b6:	98 27       	eor	r25, r24
    67b8:	80 7f       	andi	r24, 0xF0	; 240
    67ba:	98 27       	eor	r25, r24
    67bc:	82 0f       	add	r24, r18
    67be:	93 1f       	adc	r25, r19
    67c0:	fc 01       	movw	r30, r24
    67c2:	ed 50       	subi	r30, 0x0D	; 13
    67c4:	fe 4f       	sbci	r31, 0xFE	; 254
    67c6:	20 81       	ld	r18, Z
    67c8:	31 81       	ldd	r19, Z+1	; 0x01
    67ca:	42 81       	ldd	r20, Z+2	; 0x02
    67cc:	53 81       	ldd	r21, Z+3	; 0x03
    67ce:	c8 01       	movw	r24, r16
    67d0:	b7 01       	movw	r22, r14
    67d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    67d6:	dc 01       	movw	r26, r24
    67d8:	cb 01       	movw	r24, r22
    67da:	9c 01       	movw	r18, r24
    67dc:	ad 01       	movw	r20, r26
    67de:	c6 01       	movw	r24, r12
    67e0:	b5 01       	movw	r22, r10
    67e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67e6:	18 16       	cp	r1, r24
    67e8:	34 f5       	brge	.+76     	; 0x6836 <Temp_vidTempSystemTask+0x2f4>
		(Temp_astrChannelMapping[Temp_u8Channel].u8TempNormal + Temp_astrChannelMapping[Temp_u8Channel].u8TempThreshold ))
		{
			Temp_astrChannelMapping[Temp_u8Channel].u8TempState = TEMP_StateOFF;
    67ea:	80 91 31 02 	lds	r24, 0x0231
    67ee:	28 2f       	mov	r18, r24
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	c9 01       	movw	r24, r18
    67f4:	82 95       	swap	r24
    67f6:	92 95       	swap	r25
    67f8:	90 7f       	andi	r25, 0xF0	; 240
    67fa:	98 27       	eor	r25, r24
    67fc:	80 7f       	andi	r24, 0xF0	; 240
    67fe:	98 27       	eor	r25, r24
    6800:	82 0f       	add	r24, r18
    6802:	93 1f       	adc	r25, r19
    6804:	fc 01       	movw	r30, r24
    6806:	e5 51       	subi	r30, 0x15	; 21
    6808:	fe 4f       	sbci	r31, 0xFE	; 254
    680a:	8e ee       	ldi	r24, 0xEE	; 238
    680c:	80 83       	st	Z, r24
			Relay_enuState(Temp_astrChannelMapping[Temp_u8Channel].u8RELAYstrChannel , RELAY_OFF);
    680e:	80 91 31 02 	lds	r24, 0x0231
    6812:	28 2f       	mov	r18, r24
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	c9 01       	movw	r24, r18
    6818:	82 95       	swap	r24
    681a:	92 95       	swap	r25
    681c:	90 7f       	andi	r25, 0xF0	; 240
    681e:	98 27       	eor	r25, r24
    6820:	80 7f       	andi	r24, 0xF0	; 240
    6822:	98 27       	eor	r25, r24
    6824:	82 0f       	add	r24, r18
    6826:	93 1f       	adc	r25, r19
    6828:	fc 01       	movw	r30, r24
    682a:	e4 51       	subi	r30, 0x14	; 20
    682c:	fe 4f       	sbci	r31, 0xFE	; 254
    682e:	80 81       	ld	r24, Z
    6830:	66 e6       	ldi	r22, 0x66	; 102
    6832:	0e 94 0b 19 	call	0x3216	; 0x3216 <Relay_enuState>
	break;

	}


}
    6836:	0f 90       	pop	r0
    6838:	0f 90       	pop	r0
    683a:	cf 91       	pop	r28
    683c:	df 91       	pop	r29
    683e:	1f 91       	pop	r17
    6840:	0f 91       	pop	r16
    6842:	ff 90       	pop	r15
    6844:	ef 90       	pop	r14
    6846:	df 90       	pop	r13
    6848:	cf 90       	pop	r12
    684a:	bf 90       	pop	r11
    684c:	af 90       	pop	r10
    684e:	08 95       	ret

00006850 <calc>:
#include "../HAL/LCD/LCD.h"
#include "../HAL/KEYPAD/KEYPAD_int.h"


float32 calc(uint8 f32Op1 , uint8 f32Op2 , uint8 u8OpType)
{
    6850:	ef 92       	push	r14
    6852:	ff 92       	push	r15
    6854:	0f 93       	push	r16
    6856:	1f 93       	push	r17
    6858:	df 93       	push	r29
    685a:	cf 93       	push	r28
    685c:	cd b7       	in	r28, 0x3d	; 61
    685e:	de b7       	in	r29, 0x3e	; 62
    6860:	29 97       	sbiw	r28, 0x09	; 9
    6862:	0f b6       	in	r0, 0x3f	; 63
    6864:	f8 94       	cli
    6866:	de bf       	out	0x3e, r29	; 62
    6868:	0f be       	out	0x3f, r0	; 63
    686a:	cd bf       	out	0x3d, r28	; 61
    686c:	8d 83       	std	Y+5, r24	; 0x05
    686e:	6e 83       	std	Y+6, r22	; 0x06
    6870:	4f 83       	std	Y+7, r20	; 0x07
	float32 result;
	switch(u8OpType)
    6872:	8f 81       	ldd	r24, Y+7	; 0x07
    6874:	28 2f       	mov	r18, r24
    6876:	30 e0       	ldi	r19, 0x00	; 0
    6878:	39 87       	std	Y+9, r19	; 0x09
    687a:	28 87       	std	Y+8, r18	; 0x08
    687c:	48 85       	ldd	r20, Y+8	; 0x08
    687e:	59 85       	ldd	r21, Y+9	; 0x09
    6880:	4b 32       	cpi	r20, 0x2B	; 43
    6882:	51 05       	cpc	r21, r1
    6884:	b9 f0       	breq	.+46     	; 0x68b4 <calc+0x64>
    6886:	88 85       	ldd	r24, Y+8	; 0x08
    6888:	99 85       	ldd	r25, Y+9	; 0x09
    688a:	8c 32       	cpi	r24, 0x2C	; 44
    688c:	91 05       	cpc	r25, r1
    688e:	34 f4       	brge	.+12     	; 0x689c <calc+0x4c>
    6890:	28 85       	ldd	r18, Y+8	; 0x08
    6892:	39 85       	ldd	r19, Y+9	; 0x09
    6894:	2a 32       	cpi	r18, 0x2A	; 42
    6896:	31 05       	cpc	r19, r1
    6898:	e9 f1       	breq	.+122    	; 0x6914 <calc+0xc4>
    689a:	7b c0       	rjmp	.+246    	; 0x6992 <calc+0x142>
    689c:	48 85       	ldd	r20, Y+8	; 0x08
    689e:	59 85       	ldd	r21, Y+9	; 0x09
    68a0:	4d 32       	cpi	r20, 0x2D	; 45
    68a2:	51 05       	cpc	r21, r1
    68a4:	f1 f0       	breq	.+60     	; 0x68e2 <calc+0x92>
    68a6:	88 85       	ldd	r24, Y+8	; 0x08
    68a8:	99 85       	ldd	r25, Y+9	; 0x09
    68aa:	8f 32       	cpi	r24, 0x2F	; 47
    68ac:	91 05       	cpc	r25, r1
    68ae:	09 f4       	brne	.+2      	; 0x68b2 <calc+0x62>
    68b0:	4e c0       	rjmp	.+156    	; 0x694e <calc+0xfe>
    68b2:	6f c0       	rjmp	.+222    	; 0x6992 <calc+0x142>
	{
	case '+':
		result = f32Op1 + f32Op2;
    68b4:	8d 81       	ldd	r24, Y+5	; 0x05
    68b6:	28 2f       	mov	r18, r24
    68b8:	30 e0       	ldi	r19, 0x00	; 0
    68ba:	8e 81       	ldd	r24, Y+6	; 0x06
    68bc:	88 2f       	mov	r24, r24
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	82 0f       	add	r24, r18
    68c2:	93 1f       	adc	r25, r19
    68c4:	aa 27       	eor	r26, r26
    68c6:	97 fd       	sbrc	r25, 7
    68c8:	a0 95       	com	r26
    68ca:	ba 2f       	mov	r27, r26
    68cc:	bc 01       	movw	r22, r24
    68ce:	cd 01       	movw	r24, r26
    68d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    68d4:	dc 01       	movw	r26, r24
    68d6:	cb 01       	movw	r24, r22
    68d8:	89 83       	std	Y+1, r24	; 0x01
    68da:	9a 83       	std	Y+2, r25	; 0x02
    68dc:	ab 83       	std	Y+3, r26	; 0x03
    68de:	bc 83       	std	Y+4, r27	; 0x04
    68e0:	58 c0       	rjmp	.+176    	; 0x6992 <calc+0x142>
	break;

	case '-':
		result = f32Op1 - f32Op2;
    68e2:	8d 81       	ldd	r24, Y+5	; 0x05
    68e4:	28 2f       	mov	r18, r24
    68e6:	30 e0       	ldi	r19, 0x00	; 0
    68e8:	8e 81       	ldd	r24, Y+6	; 0x06
    68ea:	88 2f       	mov	r24, r24
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	a9 01       	movw	r20, r18
    68f0:	48 1b       	sub	r20, r24
    68f2:	59 0b       	sbc	r21, r25
    68f4:	ca 01       	movw	r24, r20
    68f6:	aa 27       	eor	r26, r26
    68f8:	97 fd       	sbrc	r25, 7
    68fa:	a0 95       	com	r26
    68fc:	ba 2f       	mov	r27, r26
    68fe:	bc 01       	movw	r22, r24
    6900:	cd 01       	movw	r24, r26
    6902:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6906:	dc 01       	movw	r26, r24
    6908:	cb 01       	movw	r24, r22
    690a:	89 83       	std	Y+1, r24	; 0x01
    690c:	9a 83       	std	Y+2, r25	; 0x02
    690e:	ab 83       	std	Y+3, r26	; 0x03
    6910:	bc 83       	std	Y+4, r27	; 0x04
    6912:	3f c0       	rjmp	.+126    	; 0x6992 <calc+0x142>
	break;

	case '*':
		result = f32Op1 * f32Op2;
    6914:	8d 81       	ldd	r24, Y+5	; 0x05
    6916:	28 2f       	mov	r18, r24
    6918:	30 e0       	ldi	r19, 0x00	; 0
    691a:	8e 81       	ldd	r24, Y+6	; 0x06
    691c:	88 2f       	mov	r24, r24
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	ac 01       	movw	r20, r24
    6922:	24 9f       	mul	r18, r20
    6924:	c0 01       	movw	r24, r0
    6926:	25 9f       	mul	r18, r21
    6928:	90 0d       	add	r25, r0
    692a:	34 9f       	mul	r19, r20
    692c:	90 0d       	add	r25, r0
    692e:	11 24       	eor	r1, r1
    6930:	aa 27       	eor	r26, r26
    6932:	97 fd       	sbrc	r25, 7
    6934:	a0 95       	com	r26
    6936:	ba 2f       	mov	r27, r26
    6938:	bc 01       	movw	r22, r24
    693a:	cd 01       	movw	r24, r26
    693c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6940:	dc 01       	movw	r26, r24
    6942:	cb 01       	movw	r24, r22
    6944:	89 83       	std	Y+1, r24	; 0x01
    6946:	9a 83       	std	Y+2, r25	; 0x02
    6948:	ab 83       	std	Y+3, r26	; 0x03
    694a:	bc 83       	std	Y+4, r27	; 0x04
    694c:	22 c0       	rjmp	.+68     	; 0x6992 <calc+0x142>

	break;

	case '/':
		result = (float32)f32Op1 / f32Op2;
    694e:	8d 81       	ldd	r24, Y+5	; 0x05
    6950:	88 2f       	mov	r24, r24
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	a0 e0       	ldi	r26, 0x00	; 0
    6956:	b0 e0       	ldi	r27, 0x00	; 0
    6958:	bc 01       	movw	r22, r24
    695a:	cd 01       	movw	r24, r26
    695c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    6960:	7b 01       	movw	r14, r22
    6962:	8c 01       	movw	r16, r24
    6964:	8e 81       	ldd	r24, Y+6	; 0x06
    6966:	88 2f       	mov	r24, r24
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	aa 27       	eor	r26, r26
    696c:	97 fd       	sbrc	r25, 7
    696e:	a0 95       	com	r26
    6970:	ba 2f       	mov	r27, r26
    6972:	bc 01       	movw	r22, r24
    6974:	cd 01       	movw	r24, r26
    6976:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    697a:	9b 01       	movw	r18, r22
    697c:	ac 01       	movw	r20, r24
    697e:	c8 01       	movw	r24, r16
    6980:	b7 01       	movw	r22, r14
    6982:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6986:	dc 01       	movw	r26, r24
    6988:	cb 01       	movw	r24, r22
    698a:	89 83       	std	Y+1, r24	; 0x01
    698c:	9a 83       	std	Y+2, r25	; 0x02
    698e:	ab 83       	std	Y+3, r26	; 0x03
    6990:	bc 83       	std	Y+4, r27	; 0x04
	break;
	}

	return result;
    6992:	89 81       	ldd	r24, Y+1	; 0x01
    6994:	9a 81       	ldd	r25, Y+2	; 0x02
    6996:	ab 81       	ldd	r26, Y+3	; 0x03
    6998:	bc 81       	ldd	r27, Y+4	; 0x04
}
    699a:	bc 01       	movw	r22, r24
    699c:	cd 01       	movw	r24, r26
    699e:	29 96       	adiw	r28, 0x09	; 9
    69a0:	0f b6       	in	r0, 0x3f	; 63
    69a2:	f8 94       	cli
    69a4:	de bf       	out	0x3e, r29	; 62
    69a6:	0f be       	out	0x3f, r0	; 63
    69a8:	cd bf       	out	0x3d, r28	; 61
    69aa:	cf 91       	pop	r28
    69ac:	df 91       	pop	r29
    69ae:	1f 91       	pop	r17
    69b0:	0f 91       	pop	r16
    69b2:	ff 90       	pop	r15
    69b4:	ef 90       	pop	r14
    69b6:	08 95       	ret

000069b8 <puin8_calculation>:



void puin8_calculation(float32 *ptrResult)
{
    69b8:	ef 92       	push	r14
    69ba:	ff 92       	push	r15
    69bc:	0f 93       	push	r16
    69be:	1f 93       	push	r17
    69c0:	df 93       	push	r29
    69c2:	cf 93       	push	r28
    69c4:	cd b7       	in	r28, 0x3d	; 61
    69c6:	de b7       	in	r29, 0x3e	; 62
    69c8:	a5 97       	sbiw	r28, 0x25	; 37
    69ca:	0f b6       	in	r0, 0x3f	; 63
    69cc:	f8 94       	cli
    69ce:	de bf       	out	0x3e, r29	; 62
    69d0:	0f be       	out	0x3f, r0	; 63
    69d2:	cd bf       	out	0x3d, r28	; 61
    69d4:	9b a3       	std	Y+35, r25	; 0x23
    69d6:	8a a3       	std	Y+34, r24	; 0x22
	float32 pas8KeyPadChar[2] = {0.0} ;
    69d8:	88 e0       	ldi	r24, 0x08	; 8
    69da:	fe 01       	movw	r30, r28
    69dc:	7a 96       	adiw	r30, 0x1a	; 26
    69de:	df 01       	movw	r26, r30
    69e0:	28 2f       	mov	r18, r24
    69e2:	1d 92       	st	X+, r1
    69e4:	2a 95       	dec	r18
    69e6:	e9 f7       	brne	.-6      	; 0x69e2 <puin8_calculation+0x2a>
	uint8 u8SizeCpy = 0;
    69e8:	19 8e       	std	Y+25, r1	; 0x19
	uint8 u8CntrLoc = 0;
    69ea:	18 8e       	std	Y+24, r1	; 0x18
	uint8 u8FlagOp = 0;
    69ec:	1f 8a       	std	Y+23, r1	; 0x17
	uint8 u8FlagFloat = 0;
    69ee:	1e 8a       	std	Y+22, r1	; 0x16
	uint8 u8CntrFloat = 0;
    69f0:	1d 8a       	std	Y+21, r1	; 0x15
	uint8 u8OpType = 0;
    69f2:	1c 8a       	std	Y+20, r1	; 0x14
	uint8 u8KeyPadChar = 0;
    69f4:	1b 8a       	std	Y+19, r1	; 0x13
	float32 s8Number = 0.0;
    69f6:	80 e0       	ldi	r24, 0x00	; 0
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	a0 e0       	ldi	r26, 0x00	; 0
    69fc:	b0 e0       	ldi	r27, 0x00	; 0
    69fe:	8f 87       	std	Y+15, r24	; 0x0f
    6a00:	98 8b       	std	Y+16, r25	; 0x10
    6a02:	a9 8b       	std	Y+17, r26	; 0x11
    6a04:	ba 8b       	std	Y+18, r27	; 0x12
	*ptrResult = 7;
    6a06:	ea a1       	ldd	r30, Y+34	; 0x22
    6a08:	fb a1       	ldd	r31, Y+35	; 0x23
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 ee       	ldi	r26, 0xE0	; 224
    6a10:	b0 e4       	ldi	r27, 0x40	; 64
    6a12:	80 83       	st	Z, r24
    6a14:	91 83       	std	Z+1, r25	; 0x01
    6a16:	a2 83       	std	Z+2, r26	; 0x02
    6a18:	b3 83       	std	Z+3, r27	; 0x03
    6a1a:	5c c1       	rjmp	.+696    	; 0x6cd4 <puin8_calculation+0x31c>

	while(u8KeyPadChar != '=')
	{
		u8CntrLoc++;
    6a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    6a1e:	8f 5f       	subi	r24, 0xFF	; 255
    6a20:	88 8f       	std	Y+24, r24	; 0x18

		u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
    6a22:	0e 94 9e 2b 	call	0x573c	; 0x573c <KEYPAD_uint8GetPressedKey>
    6a26:	8b 8b       	std	Y+19, r24	; 0x13
    6a28:	03 c0       	rjmp	.+6      	; 0x6a30 <puin8_calculation+0x78>

		while(u8KeyPadChar == 0xff){
			u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
    6a2a:	0e 94 9e 2b 	call	0x573c	; 0x573c <KEYPAD_uint8GetPressedKey>
    6a2e:	8b 8b       	std	Y+19, r24	; 0x13
	{
		u8CntrLoc++;

		u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();

		while(u8KeyPadChar == 0xff){
    6a30:	8b 89       	ldd	r24, Y+19	; 0x13
    6a32:	8f 3f       	cpi	r24, 0xFF	; 255
    6a34:	d1 f3       	breq	.-12     	; 0x6a2a <puin8_calculation+0x72>
			u8KeyPadChar = 	KEYPAD_uint8GetPressedKey();
		}

		switch(u8KeyPadChar)
    6a36:	8b 89       	ldd	r24, Y+19	; 0x13
    6a38:	a8 2f       	mov	r26, r24
    6a3a:	b0 e0       	ldi	r27, 0x00	; 0
    6a3c:	bd a3       	std	Y+37, r27	; 0x25
    6a3e:	ac a3       	std	Y+36, r26	; 0x24
    6a40:	2c a1       	ldd	r18, Y+36	; 0x24
    6a42:	3d a1       	ldd	r19, Y+37	; 0x25
    6a44:	2d 32       	cpi	r18, 0x2D	; 45
    6a46:	31 05       	cpc	r19, r1
    6a48:	91 f1       	breq	.+100    	; 0x6aae <puin8_calculation+0xf6>
    6a4a:	8c a1       	ldd	r24, Y+36	; 0x24
    6a4c:	9d a1       	ldd	r25, Y+37	; 0x25
    6a4e:	8e 32       	cpi	r24, 0x2E	; 46
    6a50:	91 05       	cpc	r25, r1
    6a52:	64 f4       	brge	.+24     	; 0x6a6c <puin8_calculation+0xb4>
    6a54:	ac a1       	ldd	r26, Y+36	; 0x24
    6a56:	bd a1       	ldd	r27, Y+37	; 0x25
    6a58:	aa 32       	cpi	r26, 0x2A	; 42
    6a5a:	b1 05       	cpc	r27, r1
    6a5c:	09 f4       	brne	.+2      	; 0x6a60 <puin8_calculation+0xa8>
    6a5e:	45 c0       	rjmp	.+138    	; 0x6aea <puin8_calculation+0x132>
    6a60:	2c a1       	ldd	r18, Y+36	; 0x24
    6a62:	3d a1       	ldd	r19, Y+37	; 0x25
    6a64:	2b 32       	cpi	r18, 0x2B	; 43
    6a66:	31 05       	cpc	r19, r1
    6a68:	99 f0       	breq	.+38     	; 0x6a90 <puin8_calculation+0xd8>
    6a6a:	80 c0       	rjmp	.+256    	; 0x6b6c <puin8_calculation+0x1b4>
    6a6c:	8c a1       	ldd	r24, Y+36	; 0x24
    6a6e:	9d a1       	ldd	r25, Y+37	; 0x25
    6a70:	8f 32       	cpi	r24, 0x2F	; 47
    6a72:	91 05       	cpc	r25, r1
    6a74:	59 f1       	breq	.+86     	; 0x6acc <puin8_calculation+0x114>
    6a76:	ac a1       	ldd	r26, Y+36	; 0x24
    6a78:	bd a1       	ldd	r27, Y+37	; 0x25
    6a7a:	af 32       	cpi	r26, 0x2F	; 47
    6a7c:	b1 05       	cpc	r27, r1
    6a7e:	0c f4       	brge	.+2      	; 0x6a82 <puin8_calculation+0xca>
    6a80:	43 c0       	rjmp	.+134    	; 0x6b08 <puin8_calculation+0x150>
    6a82:	2c a1       	ldd	r18, Y+36	; 0x24
    6a84:	3d a1       	ldd	r19, Y+37	; 0x25
    6a86:	2d 33       	cpi	r18, 0x3D	; 61
    6a88:	31 05       	cpc	r19, r1
    6a8a:	09 f4       	brne	.+2      	; 0x6a8e <puin8_calculation+0xd6>
    6a8c:	40 c0       	rjmp	.+128    	; 0x6b0e <puin8_calculation+0x156>
    6a8e:	6e c0       	rjmp	.+220    	; 0x6b6c <puin8_calculation+0x1b4>
		{
		case '+' :
			 pas8KeyPadChar[0] = s8Number ;
    6a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a92:	98 89       	ldd	r25, Y+16	; 0x10
    6a94:	a9 89       	ldd	r26, Y+17	; 0x11
    6a96:	ba 89       	ldd	r27, Y+18	; 0x12
    6a98:	8a 8f       	std	Y+26, r24	; 0x1a
    6a9a:	9b 8f       	std	Y+27, r25	; 0x1b
    6a9c:	ac 8f       	std	Y+28, r26	; 0x1c
    6a9e:	bd 8f       	std	Y+29, r27	; 0x1d
			u8SizeCpy++;
    6aa0:	89 8d       	ldd	r24, Y+25	; 0x19
    6aa2:	8f 5f       	subi	r24, 0xFF	; 255
    6aa4:	89 8f       	std	Y+25, r24	; 0x19
			u8OpType = '+';
    6aa6:	8b e2       	ldi	r24, 0x2B	; 43
    6aa8:	8c 8b       	std	Y+20, r24	; 0x14
			u8FlagOp = 0;
    6aaa:	1f 8a       	std	Y+23, r1	; 0x17
    6aac:	9d c0       	rjmp	.+314    	; 0x6be8 <puin8_calculation+0x230>

		break;

		case '-' :
			 pas8KeyPadChar[0] = s8Number ;
    6aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ab0:	98 89       	ldd	r25, Y+16	; 0x10
    6ab2:	a9 89       	ldd	r26, Y+17	; 0x11
    6ab4:	ba 89       	ldd	r27, Y+18	; 0x12
    6ab6:	8a 8f       	std	Y+26, r24	; 0x1a
    6ab8:	9b 8f       	std	Y+27, r25	; 0x1b
    6aba:	ac 8f       	std	Y+28, r26	; 0x1c
    6abc:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '-';
    6abe:	8d e2       	ldi	r24, 0x2D	; 45
    6ac0:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6ac2:	89 8d       	ldd	r24, Y+25	; 0x19
    6ac4:	8f 5f       	subi	r24, 0xFF	; 255
    6ac6:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6ac8:	1f 8a       	std	Y+23, r1	; 0x17
    6aca:	8e c0       	rjmp	.+284    	; 0x6be8 <puin8_calculation+0x230>


		break;

		case '/' :
			 pas8KeyPadChar[0] = s8Number ;
    6acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ace:	98 89       	ldd	r25, Y+16	; 0x10
    6ad0:	a9 89       	ldd	r26, Y+17	; 0x11
    6ad2:	ba 89       	ldd	r27, Y+18	; 0x12
    6ad4:	8a 8f       	std	Y+26, r24	; 0x1a
    6ad6:	9b 8f       	std	Y+27, r25	; 0x1b
    6ad8:	ac 8f       	std	Y+28, r26	; 0x1c
    6ada:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '/';
    6adc:	8f e2       	ldi	r24, 0x2F	; 47
    6ade:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6ae0:	89 8d       	ldd	r24, Y+25	; 0x19
    6ae2:	8f 5f       	subi	r24, 0xFF	; 255
    6ae4:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6ae6:	1f 8a       	std	Y+23, r1	; 0x17
    6ae8:	7f c0       	rjmp	.+254    	; 0x6be8 <puin8_calculation+0x230>


		break;

		case '*' :
			pas8KeyPadChar[0] = s8Number ;
    6aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    6aec:	98 89       	ldd	r25, Y+16	; 0x10
    6aee:	a9 89       	ldd	r26, Y+17	; 0x11
    6af0:	ba 89       	ldd	r27, Y+18	; 0x12
    6af2:	8a 8f       	std	Y+26, r24	; 0x1a
    6af4:	9b 8f       	std	Y+27, r25	; 0x1b
    6af6:	ac 8f       	std	Y+28, r26	; 0x1c
    6af8:	bd 8f       	std	Y+29, r27	; 0x1d
			u8OpType = '*';
    6afa:	8a e2       	ldi	r24, 0x2A	; 42
    6afc:	8c 8b       	std	Y+20, r24	; 0x14
			u8SizeCpy++;
    6afe:	89 8d       	ldd	r24, Y+25	; 0x19
    6b00:	8f 5f       	subi	r24, 0xFF	; 255
    6b02:	89 8f       	std	Y+25, r24	; 0x19
			u8FlagOp = 0;
    6b04:	1f 8a       	std	Y+23, r1	; 0x17
    6b06:	70 c0       	rjmp	.+224    	; 0x6be8 <puin8_calculation+0x230>


		break;

		case '.' :
			u8FlagFloat = 1;
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	8e 8b       	std	Y+22, r24	; 0x16
    6b0c:	6d c0       	rjmp	.+218    	; 0x6be8 <puin8_calculation+0x230>
		break;

		case '=' :
			 pas8KeyPadChar[1] = s8Number ;
    6b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b10:	98 89       	ldd	r25, Y+16	; 0x10
    6b12:	a9 89       	ldd	r26, Y+17	; 0x11
    6b14:	ba 89       	ldd	r27, Y+18	; 0x12
    6b16:	8e 8f       	std	Y+30, r24	; 0x1e
    6b18:	9f 8f       	std	Y+31, r25	; 0x1f
    6b1a:	a8 a3       	std	Y+32, r26	; 0x20
    6b1c:	b9 a3       	std	Y+33, r27	; 0x21
			u8SizeCpy++;
    6b1e:	89 8d       	ldd	r24, Y+25	; 0x19
    6b20:	8f 5f       	subi	r24, 0xFF	; 255
    6b22:	89 8f       	std	Y+25, r24	; 0x19
			*ptrResult = calc(pas8KeyPadChar[0] , pas8KeyPadChar[1],u8OpType );
    6b24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6b26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6b28:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6b2a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6b2c:	bc 01       	movw	r22, r24
    6b2e:	cd 01       	movw	r24, r26
    6b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b34:	dc 01       	movw	r26, r24
    6b36:	cb 01       	movw	r24, r22
    6b38:	18 2f       	mov	r17, r24
    6b3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6b3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6b3e:	a8 a1       	ldd	r26, Y+32	; 0x20
    6b40:	b9 a1       	ldd	r27, Y+33	; 0x21
    6b42:	bc 01       	movw	r22, r24
    6b44:	cd 01       	movw	r24, r26
    6b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b4a:	dc 01       	movw	r26, r24
    6b4c:	cb 01       	movw	r24, r22
    6b4e:	98 2f       	mov	r25, r24
    6b50:	81 2f       	mov	r24, r17
    6b52:	69 2f       	mov	r22, r25
    6b54:	4c 89       	ldd	r20, Y+20	; 0x14
    6b56:	0e 94 28 34 	call	0x6850	; 0x6850 <calc>
    6b5a:	dc 01       	movw	r26, r24
    6b5c:	cb 01       	movw	r24, r22
    6b5e:	ea a1       	ldd	r30, Y+34	; 0x22
    6b60:	fb a1       	ldd	r31, Y+35	; 0x23
    6b62:	80 83       	st	Z, r24
    6b64:	91 83       	std	Z+1, r25	; 0x01
    6b66:	a2 83       	std	Z+2, r26	; 0x02
    6b68:	b3 83       	std	Z+3, r27	; 0x03
    6b6a:	3e c0       	rjmp	.+124    	; 0x6be8 <puin8_calculation+0x230>

		break;

		default:

			if(u8FlagOp == 1)
    6b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    6b6e:	81 30       	cpi	r24, 0x01	; 1
    6b70:	39 f5       	brne	.+78     	; 0x6bc0 <puin8_calculation+0x208>
			{

				s8Number = s8Number*10 + (u8KeyPadChar - '0');
    6b72:	6f 85       	ldd	r22, Y+15	; 0x0f
    6b74:	78 89       	ldd	r23, Y+16	; 0x10
    6b76:	89 89       	ldd	r24, Y+17	; 0x11
    6b78:	9a 89       	ldd	r25, Y+18	; 0x12
    6b7a:	20 e0       	ldi	r18, 0x00	; 0
    6b7c:	30 e0       	ldi	r19, 0x00	; 0
    6b7e:	40 e2       	ldi	r20, 0x20	; 32
    6b80:	51 e4       	ldi	r21, 0x41	; 65
    6b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b86:	dc 01       	movw	r26, r24
    6b88:	cb 01       	movw	r24, r22
    6b8a:	7c 01       	movw	r14, r24
    6b8c:	8d 01       	movw	r16, r26
    6b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b90:	88 2f       	mov	r24, r24
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	c0 97       	sbiw	r24, 0x30	; 48
    6b96:	aa 27       	eor	r26, r26
    6b98:	97 fd       	sbrc	r25, 7
    6b9a:	a0 95       	com	r26
    6b9c:	ba 2f       	mov	r27, r26
    6b9e:	bc 01       	movw	r22, r24
    6ba0:	cd 01       	movw	r24, r26
    6ba2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6ba6:	9b 01       	movw	r18, r22
    6ba8:	ac 01       	movw	r20, r24
    6baa:	c8 01       	movw	r24, r16
    6bac:	b7 01       	movw	r22, r14
    6bae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    6bb2:	dc 01       	movw	r26, r24
    6bb4:	cb 01       	movw	r24, r22
    6bb6:	8f 87       	std	Y+15, r24	; 0x0f
    6bb8:	98 8b       	std	Y+16, r25	; 0x10
    6bba:	a9 8b       	std	Y+17, r26	; 0x11
    6bbc:	ba 8b       	std	Y+18, r27	; 0x12
    6bbe:	14 c0       	rjmp	.+40     	; 0x6be8 <puin8_calculation+0x230>
			}
			else{
				s8Number = (u8KeyPadChar - '0');
    6bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    6bc2:	88 2f       	mov	r24, r24
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	c0 97       	sbiw	r24, 0x30	; 48
    6bc8:	aa 27       	eor	r26, r26
    6bca:	97 fd       	sbrc	r25, 7
    6bcc:	a0 95       	com	r26
    6bce:	ba 2f       	mov	r27, r26
    6bd0:	bc 01       	movw	r22, r24
    6bd2:	cd 01       	movw	r24, r26
    6bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    6bd8:	dc 01       	movw	r26, r24
    6bda:	cb 01       	movw	r24, r22
    6bdc:	8f 87       	std	Y+15, r24	; 0x0f
    6bde:	98 8b       	std	Y+16, r25	; 0x10
    6be0:	a9 8b       	std	Y+17, r26	; 0x11
    6be2:	ba 8b       	std	Y+18, r27	; 0x12
				u8FlagOp = 1;
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	8f 8b       	std	Y+23, r24	; 0x17

		break;
		}


		LCD_enuWriteChar(LCD_u8NUM_0,u8KeyPadChar);
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	6b 89       	ldd	r22, Y+19	; 0x13
    6bec:	0e 94 84 28 	call	0x5108	; 0x5108 <LCD_enuWriteChar>
    6bf0:	80 e0       	ldi	r24, 0x00	; 0
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	a8 e4       	ldi	r26, 0x48	; 72
    6bf6:	b3 e4       	ldi	r27, 0x43	; 67
    6bf8:	8b 87       	std	Y+11, r24	; 0x0b
    6bfa:	9c 87       	std	Y+12, r25	; 0x0c
    6bfc:	ad 87       	std	Y+13, r26	; 0x0d
    6bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c08:	20 e0       	ldi	r18, 0x00	; 0
    6c0a:	30 e0       	ldi	r19, 0x00	; 0
    6c0c:	4a ef       	ldi	r20, 0xFA	; 250
    6c0e:	54 e4       	ldi	r21, 0x44	; 68
    6c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c14:	dc 01       	movw	r26, r24
    6c16:	cb 01       	movw	r24, r22
    6c18:	8f 83       	std	Y+7, r24	; 0x07
    6c1a:	98 87       	std	Y+8, r25	; 0x08
    6c1c:	a9 87       	std	Y+9, r26	; 0x09
    6c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c20:	6f 81       	ldd	r22, Y+7	; 0x07
    6c22:	78 85       	ldd	r23, Y+8	; 0x08
    6c24:	89 85       	ldd	r24, Y+9	; 0x09
    6c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c28:	20 e0       	ldi	r18, 0x00	; 0
    6c2a:	30 e0       	ldi	r19, 0x00	; 0
    6c2c:	40 e8       	ldi	r20, 0x80	; 128
    6c2e:	5f e3       	ldi	r21, 0x3F	; 63
    6c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c34:	88 23       	and	r24, r24
    6c36:	2c f4       	brge	.+10     	; 0x6c42 <puin8_calculation+0x28a>
		__ticks = 1;
    6c38:	81 e0       	ldi	r24, 0x01	; 1
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	9e 83       	std	Y+6, r25	; 0x06
    6c3e:	8d 83       	std	Y+5, r24	; 0x05
    6c40:	3f c0       	rjmp	.+126    	; 0x6cc0 <puin8_calculation+0x308>
	else if (__tmp > 65535)
    6c42:	6f 81       	ldd	r22, Y+7	; 0x07
    6c44:	78 85       	ldd	r23, Y+8	; 0x08
    6c46:	89 85       	ldd	r24, Y+9	; 0x09
    6c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c4a:	20 e0       	ldi	r18, 0x00	; 0
    6c4c:	3f ef       	ldi	r19, 0xFF	; 255
    6c4e:	4f e7       	ldi	r20, 0x7F	; 127
    6c50:	57 e4       	ldi	r21, 0x47	; 71
    6c52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c56:	18 16       	cp	r1, r24
    6c58:	4c f5       	brge	.+82     	; 0x6cac <puin8_calculation+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c62:	20 e0       	ldi	r18, 0x00	; 0
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	40 e2       	ldi	r20, 0x20	; 32
    6c68:	51 e4       	ldi	r21, 0x41	; 65
    6c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c6e:	dc 01       	movw	r26, r24
    6c70:	cb 01       	movw	r24, r22
    6c72:	bc 01       	movw	r22, r24
    6c74:	cd 01       	movw	r24, r26
    6c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c7a:	dc 01       	movw	r26, r24
    6c7c:	cb 01       	movw	r24, r22
    6c7e:	9e 83       	std	Y+6, r25	; 0x06
    6c80:	8d 83       	std	Y+5, r24	; 0x05
    6c82:	0f c0       	rjmp	.+30     	; 0x6ca2 <puin8_calculation+0x2ea>
    6c84:	88 ec       	ldi	r24, 0xC8	; 200
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	9c 83       	std	Y+4, r25	; 0x04
    6c8a:	8b 83       	std	Y+3, r24	; 0x03
    6c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    6c90:	01 97       	sbiw	r24, 0x01	; 1
    6c92:	f1 f7       	brne	.-4      	; 0x6c90 <puin8_calculation+0x2d8>
    6c94:	9c 83       	std	Y+4, r25	; 0x04
    6c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c98:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c9c:	01 97       	sbiw	r24, 0x01	; 1
    6c9e:	9e 83       	std	Y+6, r25	; 0x06
    6ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca6:	00 97       	sbiw	r24, 0x00	; 0
    6ca8:	69 f7       	brne	.-38     	; 0x6c84 <puin8_calculation+0x2cc>
    6caa:	14 c0       	rjmp	.+40     	; 0x6cd4 <puin8_calculation+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cac:	6f 81       	ldd	r22, Y+7	; 0x07
    6cae:	78 85       	ldd	r23, Y+8	; 0x08
    6cb0:	89 85       	ldd	r24, Y+9	; 0x09
    6cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb8:	dc 01       	movw	r26, r24
    6cba:	cb 01       	movw	r24, r22
    6cbc:	9e 83       	std	Y+6, r25	; 0x06
    6cbe:	8d 83       	std	Y+5, r24	; 0x05
    6cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    6cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    6cc4:	9a 83       	std	Y+2, r25	; 0x02
    6cc6:	89 83       	std	Y+1, r24	; 0x01
    6cc8:	89 81       	ldd	r24, Y+1	; 0x01
    6cca:	9a 81       	ldd	r25, Y+2	; 0x02
    6ccc:	01 97       	sbiw	r24, 0x01	; 1
    6cce:	f1 f7       	brne	.-4      	; 0x6ccc <puin8_calculation+0x314>
    6cd0:	9a 83       	std	Y+2, r25	; 0x02
    6cd2:	89 83       	std	Y+1, r24	; 0x01
	uint8 u8OpType = 0;
	uint8 u8KeyPadChar = 0;
	float32 s8Number = 0.0;
	*ptrResult = 7;

	while(u8KeyPadChar != '=')
    6cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    6cd6:	8d 33       	cpi	r24, 0x3D	; 61
    6cd8:	09 f0       	breq	.+2      	; 0x6cdc <puin8_calculation+0x324>
    6cda:	a0 ce       	rjmp	.-704    	; 0x6a1c <puin8_calculation+0x64>

		LCD_enuWriteChar(LCD_u8NUM_0,u8KeyPadChar);
		_delay_ms(200);
	}

}
    6cdc:	a5 96       	adiw	r28, 0x25	; 37
    6cde:	0f b6       	in	r0, 0x3f	; 63
    6ce0:	f8 94       	cli
    6ce2:	de bf       	out	0x3e, r29	; 62
    6ce4:	0f be       	out	0x3f, r0	; 63
    6ce6:	cd bf       	out	0x3d, r28	; 61
    6ce8:	cf 91       	pop	r28
    6cea:	df 91       	pop	r29
    6cec:	1f 91       	pop	r17
    6cee:	0f 91       	pop	r16
    6cf0:	ff 90       	pop	r15
    6cf2:	ef 90       	pop	r14
    6cf4:	08 95       	ret

00006cf6 <main>:
#include "Temp/Temp.h"

#include <util/delay.h>

int main()
{
    6cf6:	df 93       	push	r29
    6cf8:	cf 93       	push	r28
    6cfa:	cd b7       	in	r28, 0x3d	; 61
    6cfc:	de b7       	in	r29, 0x3e	; 62
    6cfe:	2e 97       	sbiw	r28, 0x0e	; 14
    6d00:	0f b6       	in	r0, 0x3f	; 63
    6d02:	f8 94       	cli
    6d04:	de bf       	out	0x3e, r29	; 62
    6d06:	0f be       	out	0x3f, r0	; 63
    6d08:	cd bf       	out	0x3d, r28	; 61
//	ADC_voidEnable();
//	ADC_voidInit();
//	ADC_voidEnable();
//	LCD_voidInit();
//	DIO_enuPullWrite(DIO_u8PIN_0,DIO_u8HIGH);
	Temp_vidInit(0);
    6d0a:	80 e0       	ldi	r24, 0x00	; 0
    6d0c:	0e 94 3a 32 	call	0x6474	; 0x6474 <Temp_vidInit>

	while(1)
	{
		Temp_vidReadTemp();
    6d10:	0e 94 4c 32 	call	0x6498	; 0x6498 <Temp_vidReadTemp>
//		Relay_enuState(0 , RELAY_ON);
		Temp_vidTempSystemTask();
    6d14:	0e 94 a1 32 	call	0x6542	; 0x6542 <Temp_vidTempSystemTask>
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	aa ef       	ldi	r26, 0xFA	; 250
    6d1e:	b3 e4       	ldi	r27, 0x43	; 67
    6d20:	8b 87       	std	Y+11, r24	; 0x0b
    6d22:	9c 87       	std	Y+12, r25	; 0x0c
    6d24:	ad 87       	std	Y+13, r26	; 0x0d
    6d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d30:	20 e0       	ldi	r18, 0x00	; 0
    6d32:	30 e0       	ldi	r19, 0x00	; 0
    6d34:	4a ef       	ldi	r20, 0xFA	; 250
    6d36:	54 e4       	ldi	r21, 0x44	; 68
    6d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d3c:	dc 01       	movw	r26, r24
    6d3e:	cb 01       	movw	r24, r22
    6d40:	8f 83       	std	Y+7, r24	; 0x07
    6d42:	98 87       	std	Y+8, r25	; 0x08
    6d44:	a9 87       	std	Y+9, r26	; 0x09
    6d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d48:	6f 81       	ldd	r22, Y+7	; 0x07
    6d4a:	78 85       	ldd	r23, Y+8	; 0x08
    6d4c:	89 85       	ldd	r24, Y+9	; 0x09
    6d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d50:	20 e0       	ldi	r18, 0x00	; 0
    6d52:	30 e0       	ldi	r19, 0x00	; 0
    6d54:	40 e8       	ldi	r20, 0x80	; 128
    6d56:	5f e3       	ldi	r21, 0x3F	; 63
    6d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d5c:	88 23       	and	r24, r24
    6d5e:	2c f4       	brge	.+10     	; 0x6d6a <main+0x74>
		__ticks = 1;
    6d60:	81 e0       	ldi	r24, 0x01	; 1
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	9e 83       	std	Y+6, r25	; 0x06
    6d66:	8d 83       	std	Y+5, r24	; 0x05
    6d68:	3f c0       	rjmp	.+126    	; 0x6de8 <main+0xf2>
	else if (__tmp > 65535)
    6d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6d6c:	78 85       	ldd	r23, Y+8	; 0x08
    6d6e:	89 85       	ldd	r24, Y+9	; 0x09
    6d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	3f ef       	ldi	r19, 0xFF	; 255
    6d76:	4f e7       	ldi	r20, 0x7F	; 127
    6d78:	57 e4       	ldi	r21, 0x47	; 71
    6d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d7e:	18 16       	cp	r1, r24
    6d80:	4c f5       	brge	.+82     	; 0x6dd4 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d8a:	20 e0       	ldi	r18, 0x00	; 0
    6d8c:	30 e0       	ldi	r19, 0x00	; 0
    6d8e:	40 e2       	ldi	r20, 0x20	; 32
    6d90:	51 e4       	ldi	r21, 0x41	; 65
    6d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d96:	dc 01       	movw	r26, r24
    6d98:	cb 01       	movw	r24, r22
    6d9a:	bc 01       	movw	r22, r24
    6d9c:	cd 01       	movw	r24, r26
    6d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6da2:	dc 01       	movw	r26, r24
    6da4:	cb 01       	movw	r24, r22
    6da6:	9e 83       	std	Y+6, r25	; 0x06
    6da8:	8d 83       	std	Y+5, r24	; 0x05
    6daa:	0f c0       	rjmp	.+30     	; 0x6dca <main+0xd4>
    6dac:	88 ec       	ldi	r24, 0xC8	; 200
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	9c 83       	std	Y+4, r25	; 0x04
    6db2:	8b 83       	std	Y+3, r24	; 0x03
    6db4:	8b 81       	ldd	r24, Y+3	; 0x03
    6db6:	9c 81       	ldd	r25, Y+4	; 0x04
    6db8:	01 97       	sbiw	r24, 0x01	; 1
    6dba:	f1 f7       	brne	.-4      	; 0x6db8 <main+0xc2>
    6dbc:	9c 83       	std	Y+4, r25	; 0x04
    6dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    6dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    6dc4:	01 97       	sbiw	r24, 0x01	; 1
    6dc6:	9e 83       	std	Y+6, r25	; 0x06
    6dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dca:	8d 81       	ldd	r24, Y+5	; 0x05
    6dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    6dce:	00 97       	sbiw	r24, 0x00	; 0
    6dd0:	69 f7       	brne	.-38     	; 0x6dac <main+0xb6>
    6dd2:	9e cf       	rjmp	.-196    	; 0x6d10 <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    6dd6:	78 85       	ldd	r23, Y+8	; 0x08
    6dd8:	89 85       	ldd	r24, Y+9	; 0x09
    6dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6de0:	dc 01       	movw	r26, r24
    6de2:	cb 01       	movw	r24, r22
    6de4:	9e 83       	std	Y+6, r25	; 0x06
    6de6:	8d 83       	std	Y+5, r24	; 0x05
    6de8:	8d 81       	ldd	r24, Y+5	; 0x05
    6dea:	9e 81       	ldd	r25, Y+6	; 0x06
    6dec:	9a 83       	std	Y+2, r25	; 0x02
    6dee:	89 83       	std	Y+1, r24	; 0x01
    6df0:	89 81       	ldd	r24, Y+1	; 0x01
    6df2:	9a 81       	ldd	r25, Y+2	; 0x02
    6df4:	01 97       	sbiw	r24, 0x01	; 1
    6df6:	f1 f7       	brne	.-4      	; 0x6df4 <main+0xfe>
    6df8:	9a 83       	std	Y+2, r25	; 0x02
    6dfa:	89 83       	std	Y+1, r24	; 0x01
    6dfc:	89 cf       	rjmp	.-238    	; 0x6d10 <main+0x1a>

00006dfe <__udivmodqi4>:
    6dfe:	99 1b       	sub	r25, r25
    6e00:	79 e0       	ldi	r23, 0x09	; 9
    6e02:	04 c0       	rjmp	.+8      	; 0x6e0c <__udivmodqi4_ep>

00006e04 <__udivmodqi4_loop>:
    6e04:	99 1f       	adc	r25, r25
    6e06:	96 17       	cp	r25, r22
    6e08:	08 f0       	brcs	.+2      	; 0x6e0c <__udivmodqi4_ep>
    6e0a:	96 1b       	sub	r25, r22

00006e0c <__udivmodqi4_ep>:
    6e0c:	88 1f       	adc	r24, r24
    6e0e:	7a 95       	dec	r23
    6e10:	c9 f7       	brne	.-14     	; 0x6e04 <__udivmodqi4_loop>
    6e12:	80 95       	com	r24
    6e14:	08 95       	ret

00006e16 <__divmodhi4>:
    6e16:	97 fb       	bst	r25, 7
    6e18:	09 2e       	mov	r0, r25
    6e1a:	07 26       	eor	r0, r23
    6e1c:	0a d0       	rcall	.+20     	; 0x6e32 <__divmodhi4_neg1>
    6e1e:	77 fd       	sbrc	r23, 7
    6e20:	04 d0       	rcall	.+8      	; 0x6e2a <__divmodhi4_neg2>
    6e22:	0c d0       	rcall	.+24     	; 0x6e3c <__udivmodhi4>
    6e24:	06 d0       	rcall	.+12     	; 0x6e32 <__divmodhi4_neg1>
    6e26:	00 20       	and	r0, r0
    6e28:	1a f4       	brpl	.+6      	; 0x6e30 <__divmodhi4_exit>

00006e2a <__divmodhi4_neg2>:
    6e2a:	70 95       	com	r23
    6e2c:	61 95       	neg	r22
    6e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00006e30 <__divmodhi4_exit>:
    6e30:	08 95       	ret

00006e32 <__divmodhi4_neg1>:
    6e32:	f6 f7       	brtc	.-4      	; 0x6e30 <__divmodhi4_exit>
    6e34:	90 95       	com	r25
    6e36:	81 95       	neg	r24
    6e38:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3a:	08 95       	ret

00006e3c <__udivmodhi4>:
    6e3c:	aa 1b       	sub	r26, r26
    6e3e:	bb 1b       	sub	r27, r27
    6e40:	51 e1       	ldi	r21, 0x11	; 17
    6e42:	07 c0       	rjmp	.+14     	; 0x6e52 <__udivmodhi4_ep>

00006e44 <__udivmodhi4_loop>:
    6e44:	aa 1f       	adc	r26, r26
    6e46:	bb 1f       	adc	r27, r27
    6e48:	a6 17       	cp	r26, r22
    6e4a:	b7 07       	cpc	r27, r23
    6e4c:	10 f0       	brcs	.+4      	; 0x6e52 <__udivmodhi4_ep>
    6e4e:	a6 1b       	sub	r26, r22
    6e50:	b7 0b       	sbc	r27, r23

00006e52 <__udivmodhi4_ep>:
    6e52:	88 1f       	adc	r24, r24
    6e54:	99 1f       	adc	r25, r25
    6e56:	5a 95       	dec	r21
    6e58:	a9 f7       	brne	.-22     	; 0x6e44 <__udivmodhi4_loop>
    6e5a:	80 95       	com	r24
    6e5c:	90 95       	com	r25
    6e5e:	bc 01       	movw	r22, r24
    6e60:	cd 01       	movw	r24, r26
    6e62:	08 95       	ret

00006e64 <__prologue_saves__>:
    6e64:	2f 92       	push	r2
    6e66:	3f 92       	push	r3
    6e68:	4f 92       	push	r4
    6e6a:	5f 92       	push	r5
    6e6c:	6f 92       	push	r6
    6e6e:	7f 92       	push	r7
    6e70:	8f 92       	push	r8
    6e72:	9f 92       	push	r9
    6e74:	af 92       	push	r10
    6e76:	bf 92       	push	r11
    6e78:	cf 92       	push	r12
    6e7a:	df 92       	push	r13
    6e7c:	ef 92       	push	r14
    6e7e:	ff 92       	push	r15
    6e80:	0f 93       	push	r16
    6e82:	1f 93       	push	r17
    6e84:	cf 93       	push	r28
    6e86:	df 93       	push	r29
    6e88:	cd b7       	in	r28, 0x3d	; 61
    6e8a:	de b7       	in	r29, 0x3e	; 62
    6e8c:	ca 1b       	sub	r28, r26
    6e8e:	db 0b       	sbc	r29, r27
    6e90:	0f b6       	in	r0, 0x3f	; 63
    6e92:	f8 94       	cli
    6e94:	de bf       	out	0x3e, r29	; 62
    6e96:	0f be       	out	0x3f, r0	; 63
    6e98:	cd bf       	out	0x3d, r28	; 61
    6e9a:	09 94       	ijmp

00006e9c <__epilogue_restores__>:
    6e9c:	2a 88       	ldd	r2, Y+18	; 0x12
    6e9e:	39 88       	ldd	r3, Y+17	; 0x11
    6ea0:	48 88       	ldd	r4, Y+16	; 0x10
    6ea2:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ea4:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ea6:	7d 84       	ldd	r7, Y+13	; 0x0d
    6ea8:	8c 84       	ldd	r8, Y+12	; 0x0c
    6eaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    6eac:	aa 84       	ldd	r10, Y+10	; 0x0a
    6eae:	b9 84       	ldd	r11, Y+9	; 0x09
    6eb0:	c8 84       	ldd	r12, Y+8	; 0x08
    6eb2:	df 80       	ldd	r13, Y+7	; 0x07
    6eb4:	ee 80       	ldd	r14, Y+6	; 0x06
    6eb6:	fd 80       	ldd	r15, Y+5	; 0x05
    6eb8:	0c 81       	ldd	r16, Y+4	; 0x04
    6eba:	1b 81       	ldd	r17, Y+3	; 0x03
    6ebc:	aa 81       	ldd	r26, Y+2	; 0x02
    6ebe:	b9 81       	ldd	r27, Y+1	; 0x01
    6ec0:	ce 0f       	add	r28, r30
    6ec2:	d1 1d       	adc	r29, r1
    6ec4:	0f b6       	in	r0, 0x3f	; 63
    6ec6:	f8 94       	cli
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	cd bf       	out	0x3d, r28	; 61
    6ece:	ed 01       	movw	r28, r26
    6ed0:	08 95       	ret

00006ed2 <_exit>:
    6ed2:	f8 94       	cli

00006ed4 <__stop_program>:
    6ed4:	ff cf       	rjmp	.-2      	; 0x6ed4 <__stop_program>
