
Ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003394  00003428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800076  00800076  0000343e  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  00003440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fde  00000000  00000000  00005aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000897b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009866  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <main>
      8a:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include  "DIO_priv.h"



void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = CONC(DIO_u8DIR_PIN_7,DIO_u8DIR_PIN_6,DIO_u8DIR_PIN_5,DIO_u8DIR_PIN_4,DIO_u8DIR_PIN_3,DIO_u8DIR_PIN_2,DIO_u8DIR_PIN_1,DIO_u8DIR_PIN_0);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e ef       	ldi	r24, 0xFE	; 254
     b54:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8DIR_PIN_15,DIO_u8DIR_PIN_14,DIO_u8DIR_PIN_13,DIO_u8DIR_PIN_12,DIO_u8DIR_PIN_11,DIO_u8DIR_PIN_10,DIO_u8DIR_PIN_9,DIO_u8DIR_PIN_8);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8DIR_PIN_23,DIO_u8DIR_PIN_22,DIO_u8DIR_PIN_21,DIO_u8DIR_PIN_20,DIO_u8DIR_PIN_19,DIO_u8DIR_PIN_18,DIO_u8DIR_PIN_17,DIO_u8DIR_PIN_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8DIR_PIN_31,DIO_u8DIR_PIN_30,DIO_u8DIR_PIN_29,DIO_u8DIR_PIN_28,DIO_u8DIR_PIN_27,DIO_u8DIR_PIN_26,DIO_u8DIR_PIN_25,DIO_u8DIR_PIN_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24
	
	
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enuWritePin>:

/* Description : function write DIO_u8HIGH or DIO_u8LOW on Pin start 0 to 31 */
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <DIO_enuWritePin+0x6>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <DIO_enuWritePin+0x8>
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	8a 83       	std	Y+2, r24	; 0x02
     b84:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
     b86:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinValueCpy)
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3d 83       	std	Y+5, r19	; 0x05
     b90:	2c 83       	std	Y+4, r18	; 0x04
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	09 f4       	brne	.+2      	; 0xb9c <DIO_enuWritePin+0x28>
     b9a:	77 c0       	rjmp	.+238    	; 0xc8a <DIO_enuWritePin+0x116>
     b9c:	2c 81       	ldd	r18, Y+4	; 0x04
     b9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ba0:	21 30       	cpi	r18, 0x01	; 1
     ba2:	31 05       	cpc	r19, r1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <DIO_enuWritePin+0x34>
     ba6:	e6 c0       	rjmp	.+460    	; 0xd74 <DIO_enuWritePin+0x200>
		{
			case DIO_u8HIGH :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	88 30       	cpi	r24, 0x08	; 8
     bac:	a0 f4       	brcc	.+40     	; 0xbd6 <DIO_enuWritePin+0x62>
				{
					SET_BIT(ODRA , u8PinNumCpy ) ;	
     bae:	ab e3       	ldi	r26, 0x3B	; 59
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	eb e3       	ldi	r30, 0x3B	; 59
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	48 2f       	mov	r20, r24
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 2e       	mov	r0, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_enuWritePin+0x58>
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	0a 94       	dec	r0
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_enuWritePin+0x54>
     bd0:	84 2b       	or	r24, r20
     bd2:	8c 93       	st	X, r24
     bd4:	d1 c0       	rjmp	.+418    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	d0 f0       	brcs	.+52     	; 0xc10 <DIO_enuWritePin+0x9c>
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	80 31       	cpi	r24, 0x10	; 16
     be0:	b8 f4       	brcc	.+46     	; 0xc10 <DIO_enuWritePin+0x9c>
				{
					SET_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
     be2:	a8 e3       	ldi	r26, 0x38	; 56
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e8 e3       	ldi	r30, 0x38	; 56
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9c 01       	movw	r18, r24
     bf6:	27 70       	andi	r18, 0x07	; 7
     bf8:	30 70       	andi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_enuWritePin+0x92>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_enuWritePin+0x8e>
     c0a:	84 2b       	or	r24, r20
     c0c:	8c 93       	st	X, r24
     c0e:	b4 c0       	rjmp	.+360    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	80 31       	cpi	r24, 0x10	; 16
     c14:	d0 f0       	brcs	.+52     	; 0xc4a <DIO_enuWritePin+0xd6>
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	b8 f4       	brcc	.+46     	; 0xc4a <DIO_enuWritePin+0xd6>
				{
					SET_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     c1c:	a5 e3       	ldi	r26, 0x35	; 53
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e5 e3       	ldi	r30, 0x35	; 53
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 01       	movw	r18, r24
     c30:	27 70       	andi	r18, 0x07	; 7
     c32:	30 70       	andi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_enuWritePin+0xcc>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_enuWritePin+0xc8>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	97 c0       	rjmp	.+302    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	88 31       	cpi	r24, 0x18	; 24
     c4e:	d0 f0       	brcs	.+52     	; 0xc84 <DIO_enuWritePin+0x110>
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	80 32       	cpi	r24, 0x20	; 32
     c54:	b8 f4       	brcc	.+46     	; 0xc84 <DIO_enuWritePin+0x110>
				{
					SET_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     c56:	a2 e3       	ldi	r26, 0x32	; 50
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e2 e3       	ldi	r30, 0x32	; 50
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9c 01       	movw	r18, r24
     c6a:	27 70       	andi	r18, 0x07	; 7
     c6c:	30 70       	andi	r19, 0x00	; 0
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_enuWritePin+0x106>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_enuWritePin+0x102>
     c7e:	84 2b       	or	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	7a c0       	rjmp	.+244    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	77 c0       	rjmp	.+238    	; 0xd78 <DIO_enuWritePin+0x204>
				}
			break ;
			case DIO_u8LOW :
				if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	a8 f4       	brcc	.+42     	; 0xcba <DIO_enuWritePin+0x146>
				{		
					CLR_BIT(ODRA , u8PinNumCpy ) ;
     c90:	ab e3       	ldi	r26, 0x3B	; 59
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e3       	ldi	r30, 0x3B	; 59
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_enuWritePin+0x13a>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_enuWritePin+0x136>
     cb2:	80 95       	com	r24
     cb4:	84 23       	and	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	5f c0       	rjmp	.+190    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	d8 f0       	brcs	.+54     	; 0xcf6 <DIO_enuWritePin+0x182>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	80 31       	cpi	r24, 0x10	; 16
     cc4:	c0 f4       	brcc	.+48     	; 0xcf6 <DIO_enuWritePin+0x182>
				{
					CLR_BIT(ODRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     cc6:	a8 e3       	ldi	r26, 0x38	; 56
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e3       	ldi	r30, 0x38	; 56
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9c 01       	movw	r18, r24
     cda:	27 70       	andi	r18, 0x07	; 7
     cdc:	30 70       	andi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_enuWritePin+0x176>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_enuWritePin+0x172>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	41 c0       	rjmp	.+130    	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	80 31       	cpi	r24, 0x10	; 16
     cfa:	d8 f0       	brcs	.+54     	; 0xd32 <DIO_enuWritePin+0x1be>
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	88 31       	cpi	r24, 0x18	; 24
     d00:	c0 f4       	brcc	.+48     	; 0xd32 <DIO_enuWritePin+0x1be>
				{
					CLR_BIT(ODRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     d02:	a5 e3       	ldi	r26, 0x35	; 53
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e5 e3       	ldi	r30, 0x35	; 53
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 01       	movw	r18, r24
     d16:	27 70       	andi	r18, 0x07	; 7
     d18:	30 70       	andi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_enuWritePin+0x1b2>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_enuWritePin+0x1ae>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	23 c0       	rjmp	.+70     	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	88 31       	cpi	r24, 0x18	; 24
     d36:	d8 f0       	brcs	.+54     	; 0xd6e <DIO_enuWritePin+0x1fa>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	80 32       	cpi	r24, 0x20	; 32
     d3c:	c0 f4       	brcc	.+48     	; 0xd6e <DIO_enuWritePin+0x1fa>
				{
					CLR_BIT(ODRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     d3e:	a2 e3       	ldi	r26, 0x32	; 50
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e2 e3       	ldi	r30, 0x32	; 50
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c 01       	movw	r18, r24
     d52:	27 70       	andi	r18, 0x07	; 7
     d54:	30 70       	andi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_enuWritePin+0x1ee>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_enuWritePin+0x1ea>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <DIO_enuWritePin+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_enuWritePin+0x204>
				}
			
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValueCpy)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <DIO_enuReadPin+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <DIO_enuReadPin+0x8>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	7c 83       	std	Y+4, r23	; 0x04
     d9a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
     d9c:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	09 f4       	brne	.+2      	; 0xda8 <DIO_enuReadPin+0x1e>
     da6:	6e c0       	rjmp	.+220    	; 0xe84 <DIO_enuReadPin+0xfa>
	{
		     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 30       	cpi	r24, 0x08	; 8
     dac:	a0 f4       	brcc	.+40     	; 0xdd6 <DIO_enuReadPin+0x4c>
				{
					*pu8PinValueCpy = GET_BIT(IDRA , u8PinNumCpy ) ;	
     dae:	e9 e3       	ldi	r30, 0x39	; 57
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a9 01       	movw	r20, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_enuReadPin+0x3c>
     dc2:	55 95       	asr	r21
     dc4:	47 95       	ror	r20
     dc6:	8a 95       	dec	r24
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_enuReadPin+0x38>
     dca:	ca 01       	movw	r24, r20
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	eb 81       	ldd	r30, Y+3	; 0x03
     dd0:	fc 81       	ldd	r31, Y+4	; 0x04
     dd2:	80 83       	st	Z, r24
     dd4:	59 c0       	rjmp	.+178    	; 0xe88 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	c8 f0       	brcs	.+50     	; 0xe0e <DIO_enuReadPin+0x84>
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	80 31       	cpi	r24, 0x10	; 16
     de0:	b0 f4       	brcc	.+44     	; 0xe0e <DIO_enuReadPin+0x84>
				{
					*pu8PinValueCpy = GET_BIT(IDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
     de2:	e6 e3       	ldi	r30, 0x36	; 54
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	87 70       	andi	r24, 0x07	; 7
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	a9 01       	movw	r20, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_enuReadPin+0x74>
     dfa:	55 95       	asr	r21
     dfc:	47 95       	ror	r20
     dfe:	8a 95       	dec	r24
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_enuReadPin+0x70>
     e02:	ca 01       	movw	r24, r20
     e04:	81 70       	andi	r24, 0x01	; 1
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
     e0c:	3d c0       	rjmp	.+122    	; 0xe88 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 31       	cpi	r24, 0x10	; 16
     e12:	c8 f0       	brcs	.+50     	; 0xe46 <DIO_enuReadPin+0xbc>
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	88 31       	cpi	r24, 0x18	; 24
     e18:	b0 f4       	brcc	.+44     	; 0xe46 <DIO_enuReadPin+0xbc>
				{
					*pu8PinValueCpy = GET_BIT(IDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     e1a:	e3 e3       	ldi	r30, 0x33	; 51
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	87 70       	andi	r24, 0x07	; 7
     e2c:	90 70       	andi	r25, 0x00	; 0
     e2e:	a9 01       	movw	r20, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_enuReadPin+0xac>
     e32:	55 95       	asr	r21
     e34:	47 95       	ror	r20
     e36:	8a 95       	dec	r24
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_enuReadPin+0xa8>
     e3a:	ca 01       	movw	r24, r20
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	eb 81       	ldd	r30, Y+3	; 0x03
     e40:	fc 81       	ldd	r31, Y+4	; 0x04
     e42:	80 83       	st	Z, r24
     e44:	21 c0       	rjmp	.+66     	; 0xe88 <DIO_enuReadPin+0xfe>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	88 31       	cpi	r24, 0x18	; 24
     e4a:	c8 f0       	brcs	.+50     	; 0xe7e <DIO_enuReadPin+0xf4>
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	80 32       	cpi	r24, 0x20	; 32
     e50:	b0 f4       	brcc	.+44     	; 0xe7e <DIO_enuReadPin+0xf4>
				{
					*pu8PinValueCpy = GET_BIT(IDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
     e52:	e0 e3       	ldi	r30, 0x30	; 48
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	87 70       	andi	r24, 0x07	; 7
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	a9 01       	movw	r20, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enuReadPin+0xe4>
     e6a:	55 95       	asr	r21
     e6c:	47 95       	ror	r20
     e6e:	8a 95       	dec	r24
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enuReadPin+0xe0>
     e72:	ca 01       	movw	r24, r20
     e74:	81 70       	andi	r24, 0x01	; 1
     e76:	eb 81       	ldd	r30, Y+3	; 0x03
     e78:	fc 81       	ldd	r31, Y+4	; 0x04
     e7a:	80 83       	st	Z, r24
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <DIO_enuReadPin+0xfe>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_enuReadPin+0xfe>
				}
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStatusLoc ;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <DIO_enuPullWrite>:

tenuErrorStatus DIO_enuPullWrite(uint8 u8PinNumCpy , uint8 u8PinStateCpy)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_enuPullWrite+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy , u8PinStateCpy );
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	6a 81       	ldd	r22, Y+2	; 0x02
     eaa:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <DIO_enuWriteBus>:

tenuErrorStatus DIO_enuWriteBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_enuWriteBus+0xa>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <DIO_enuWriteBus+0xc>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
     ed0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_enuWriteBus+0x24>
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <DIO_enuWriteBus+0xa2>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	81 32       	cpi	r24, 0x21	; 33
     ee0:	c8 f5       	brcc	.+114    	; 0xf54 <DIO_enuWriteBus+0x9c>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
     ee2:	19 82       	std	Y+1, r1	; 0x01
     ee4:	32 c0       	rjmp	.+100    	; 0xf4a <DIO_enuWriteBus+0x92>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	c9 01       	movw	r24, r18
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	28 0f       	add	r18, r24
     ef4:	39 1f       	adc	r19, r25
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	8c 01       	movw	r16, r24
     efc:	02 0f       	add	r16, r18
     efe:	13 1f       	adc	r17, r19
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	c9 01       	movw	r24, r18
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	28 0f       	add	r18, r24
     f0e:	39 1f       	adc	r19, r25
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	40 81       	ld	r20, Z
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	28 0f       	add	r18, r24
     f2a:	39 1f       	adc	r19, r25
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	fc 01       	movw	r30, r24
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	84 2f       	mov	r24, r20
     f3a:	69 2f       	mov	r22, r25
     f3c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
     f40:	f8 01       	movw	r30, r16
     f42:	82 83       	std	Z+2, r24	; 0x02
	uint8 u8CntrLoc ;
	if(pastrPinMappingCpy !=NULL_PTR)
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS )
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	99 81       	ldd	r25, Y+1	; 0x01
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	98 17       	cp	r25, r24
     f50:	50 f2       	brcs	.-108    	; 0xee6 <DIO_enuWriteBus+0x2e>
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <DIO_enuWriteBus+0xa6>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuWritePin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , pastrPinMappingCpy[u8CntrLoc].u8PinValue );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuWriteBus+0xa6>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <DIO_enuReadBus>:

tenuErrorStatus DIO_enuReadBus(tstrPinMapping * pastrPinMappingCpy , uint8 u8SizeCpy )
{
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <DIO_enuReadBus+0xa>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <DIO_enuReadBus+0xc>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
     f8a:	6d 83       	std	Y+5, r22	; 0x05
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
     f8c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	
	if(pastrPinMappingCpy != NULL_PTR )
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_enuReadBus+0x24>
     f96:	40 c0       	rjmp	.+128    	; 0x1018 <DIO_enuReadBus+0xa4>
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	81 32       	cpi	r24, 0x21	; 33
     f9c:	d0 f5       	brcc	.+116    	; 0x1012 <DIO_enuReadBus+0x9e>
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	33 c0       	rjmp	.+102    	; 0x1008 <DIO_enuReadBus+0x94>
			{
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	c9 01       	movw	r24, r18
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	8c 01       	movw	r16, r24
     fb8:	02 0f       	add	r16, r18
     fba:	13 1f       	adc	r17, r19
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	c9 01       	movw	r24, r18
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	28 0f       	add	r18, r24
     fca:	39 1f       	adc	r19, r25
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	fc 01       	movw	r30, r24
     fd2:	e2 0f       	add	r30, r18
     fd4:	f3 1f       	adc	r31, r19
     fd6:	40 81       	ld	r20, Z
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	c9 01       	movw	r24, r18
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	28 0f       	add	r18, r24
     fe6:	39 1f       	adc	r19, r25
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	9c 01       	movw	r18, r24
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	84 2f       	mov	r24, r20
     ff8:	b9 01       	movw	r22, r18
     ffa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DIO_enuReadPin>
     ffe:	f8 01       	movw	r30, r16
    1000:	82 83       	std	Z+2, r24	; 0x02
	
	if(pastrPinMappingCpy != NULL_PTR )
	{
		if (u8SizeCpy <= DIO_u8MAX_NUMBER_OF_PINS)
		{
			for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	98 17       	cp	r25, r24
    100e:	48 f2       	brcs	.-110    	; 0xfa2 <DIO_enuReadBus+0x2e>
    1010:	05 c0       	rjmp	.+10     	; 0x101c <DIO_enuReadBus+0xa8>
				pastrPinMappingCpy[u8CntrLoc]. enuStatus  = DIO_enuReadPin(pastrPinMappingCpy[u8CntrLoc].u8PinNum , &(pastrPinMappingCpy[u8CntrLoc].u8PinValue) );
			}
		}
		else
		{
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enuReadBus+0xa8>
		}
		
	}
	else
	{
		enuReturnStatusLoc = E_NOK_PARAM_NULL_POINTER ;
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enuReturnStatusLoc ;
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <DIO_enuWritePinDir>:

tenuErrorStatus DIO_enuWritePinDir(uint8 u8PinNumCpy , uint8 u8PinDirCpy)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_enuWritePinDir+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <DIO_enuWritePinDir+0x8>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStatusLoc = E_OK ;
    1044:	19 82       	std	Y+1, r1	; 0x01
	
	switch (u8PinDirCpy)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3d 83       	std	Y+5, r19	; 0x05
    104e:	2c 83       	std	Y+4, r18	; 0x04
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_enuWritePinDir+0x28>
    1058:	77 c0       	rjmp	.+238    	; 0x1148 <DIO_enuWritePinDir+0x116>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	21 30       	cpi	r18, 0x01	; 1
    1060:	31 05       	cpc	r19, r1
    1062:	09 f0       	breq	.+2      	; 0x1066 <DIO_enuWritePinDir+0x34>
    1064:	e6 c0       	rjmp	.+460    	; 0x1232 <DIO_enuWritePinDir+0x200>
		{
			case DIO_u8OUTPUT :
			     if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	a0 f4       	brcc	.+40     	; 0x1094 <DIO_enuWritePinDir+0x62>
				{
					SET_BIT(DDRA , u8PinNumCpy ) ;	
    106c:	aa e3       	ldi	r26, 0x3A	; 58
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ea e3       	ldi	r30, 0x3A	; 58
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_enuWritePinDir+0x58>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_enuWritePinDir+0x54>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	d1 c0       	rjmp	.+418    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	d0 f0       	brcs	.+52     	; 0x10ce <DIO_enuWritePinDir+0x9c>
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 31       	cpi	r24, 0x10	; 16
    109e:	b8 f4       	brcc	.+46     	; 0x10ce <DIO_enuWritePinDir+0x9c>
				{
					SET_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE  ) ;
    10a0:	a7 e3       	ldi	r26, 0x37	; 55
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e7 e3       	ldi	r30, 0x37	; 55
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9c 01       	movw	r18, r24
    10b4:	27 70       	andi	r18, 0x07	; 7
    10b6:	30 70       	andi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_enuWritePinDir+0x92>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_enuWritePinDir+0x8e>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	b4 c0       	rjmp	.+360    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	80 31       	cpi	r24, 0x10	; 16
    10d2:	d0 f0       	brcs	.+52     	; 0x1108 <DIO_enuWritePinDir+0xd6>
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 31       	cpi	r24, 0x18	; 24
    10d8:	b8 f4       	brcc	.+46     	; 0x1108 <DIO_enuWritePinDir+0xd6>
				{
					SET_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    10da:	a4 e3       	ldi	r26, 0x34	; 52
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e4 e3       	ldi	r30, 0x34	; 52
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 01       	movw	r18, r24
    10ee:	27 70       	andi	r18, 0x07	; 7
    10f0:	30 70       	andi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_enuWritePinDir+0xcc>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_enuWritePinDir+0xc8>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	97 c0       	rjmp	.+302    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 31       	cpi	r24, 0x18	; 24
    110c:	d0 f0       	brcs	.+52     	; 0x1142 <DIO_enuWritePinDir+0x110>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 32       	cpi	r24, 0x20	; 32
    1112:	b8 f4       	brcc	.+46     	; 0x1142 <DIO_enuWritePinDir+0x110>
				{
					SET_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1114:	a1 e3       	ldi	r26, 0x31	; 49
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 01       	movw	r18, r24
    1128:	27 70       	andi	r18, 0x07	; 7
    112a:	30 70       	andi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_enuWritePinDir+0x106>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_enuWritePinDir+0x102>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	7a c0       	rjmp	.+244    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	77 c0       	rjmp	.+238    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
			
			break ;
			case DIO_u8INPUT :
			   if (u8PinNumCpy >= DIO_u8PIN_0  && u8PinNumCpy <= DIO_u8PIN_7 )
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 30       	cpi	r24, 0x08	; 8
    114c:	a8 f4       	brcc	.+42     	; 0x1178 <DIO_enuWritePinDir+0x146>
				{		
					CLR_BIT(DDRA , u8PinNumCpy ) ;
    114e:	aa e3       	ldi	r26, 0x3A	; 58
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_enuWritePinDir+0x13a>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_enuWritePinDir+0x136>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	5f c0       	rjmp	.+190    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_8  && u8PinNumCpy <= DIO_u8PIN_15 )
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	d8 f0       	brcs	.+54     	; 0x11b4 <DIO_enuWritePinDir+0x182>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 31       	cpi	r24, 0x10	; 16
    1182:	c0 f4       	brcc	.+48     	; 0x11b4 <DIO_enuWritePinDir+0x182>
				{
					CLR_BIT(DDRB , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    1184:	a7 e3       	ldi	r26, 0x37	; 55
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e7 e3       	ldi	r30, 0x37	; 55
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9c 01       	movw	r18, r24
    1198:	27 70       	andi	r18, 0x07	; 7
    119a:	30 70       	andi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_enuWritePinDir+0x176>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_enuWritePinDir+0x172>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	41 c0       	rjmp	.+130    	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_16  && u8PinNumCpy <= DIO_u8PIN_23 )
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 31       	cpi	r24, 0x10	; 16
    11b8:	d8 f0       	brcs	.+54     	; 0x11f0 <DIO_enuWritePinDir+0x1be>
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	88 31       	cpi	r24, 0x18	; 24
    11be:	c0 f4       	brcc	.+48     	; 0x11f0 <DIO_enuWritePinDir+0x1be>
				{
					CLR_BIT(DDRC , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11c0:	a4 e3       	ldi	r26, 0x34	; 52
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 01       	movw	r18, r24
    11d4:	27 70       	andi	r18, 0x07	; 7
    11d6:	30 70       	andi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_enuWritePinDir+0x1b2>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_enuWritePinDir+0x1ae>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	23 c0       	rjmp	.+70     	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else if (u8PinNumCpy >= DIO_u8PIN_24  && u8PinNumCpy <= DIO_u8PIN_31 )
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	88 31       	cpi	r24, 0x18	; 24
    11f4:	d8 f0       	brcs	.+54     	; 0x122c <DIO_enuWritePinDir+0x1fa>
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 32       	cpi	r24, 0x20	; 32
    11fa:	c0 f4       	brcc	.+48     	; 0x122c <DIO_enuWritePinDir+0x1fa>
				{
					CLR_BIT(DDRD , u8PinNumCpy % DIO_u8PIN_SIZE ) ;
    11fc:	a1 e3       	ldi	r26, 0x31	; 49
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e1 e3       	ldi	r30, 0x31	; 49
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9c 01       	movw	r18, r24
    1210:	27 70       	andi	r18, 0x07	; 7
    1212:	30 70       	andi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_enuWritePinDir+0x1ee>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_enuWritePinDir+0x1ea>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
				else
				{
					enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_enuWritePinDir+0x204>
				}
			break ;
			default :
			enuReturnStatusLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	89 83       	std	Y+1, r24	; 0x01
			break ;
			
		}
	
	return enuReturnStatusLoc ;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <DIO_enuTogglePin>:

tenuErrorStatus DIO_enuTogglePin(uint8 u8PinNumCpy)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_enuTogglePin+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatusLoc = E_OK ;
    1254:	19 82       	std	Y+1, r1	; 0x01


	
	return enuReturnStatusLoc ;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <ICU_u16PulseWidth>:


uint16 u16High, u16Start, u16End;

uint16 ICU_u16PulseWidth(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    126a:	ef e4       	ldi	r30, 0x4F	; 79
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
    SET_BIT(TIFR,5);  	/* Clear ICF (Input Capture flag)  */
    1270:	a8 e5       	ldi	r26, 0x58	; 88
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e5       	ldi	r30, 0x58	; 88
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	80 62       	ori	r24, 0x20	; 32
    127c:	8c 93       	st	X, r24

 	/* Rising edge, no prescaler , noise canceler*/
    SET_BIT(TCCR1B,0);
    127e:	ae e4       	ldi	r26, 0x4E	; 78
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ee e4       	ldi	r30, 0x4E	; 78
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	81 60       	ori	r24, 0x01	; 1
    128a:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,6);
    128c:	ae e4       	ldi	r26, 0x4E	; 78
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ee e4       	ldi	r30, 0x4E	; 78
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,7);
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 68       	ori	r24, 0x80	; 128
    12a6:	8c 93       	st	X, r24

    while (GET_BIT(TIFR,5) == 0);
    12a8:	e8 e5       	ldi	r30, 0x58	; 88
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	82 95       	swap	r24
    12b0:	86 95       	lsr	r24
    12b2:	87 70       	andi	r24, 0x07	; 7
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	90 70       	andi	r25, 0x00	; 0
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	a1 f3       	breq	.-24     	; 0x12a8 <ICU_u16PulseWidth+0x46>
    u16Start = ICR1;  		/* Take value of capture register */
    12c0:	e6 e4       	ldi	r30, 0x46	; 70
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 7b 00 	sts	0x007B, r25
    12cc:	80 93 7a 00 	sts	0x007A, r24
    SET_BIT(TIFR,5);   	/* Clear ICF flag */
    12d0:	a8 e5       	ldi	r26, 0x58	; 88
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e8 e5       	ldi	r30, 0x58	; 88
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	8c 93       	st	X, r24

 	/* Falling edge, no prescaler ,noise canceler*/
    SET_BIT(TCCR1B,0);
    12de:	ae e4       	ldi	r26, 0x4E	; 78
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ee e4       	ldi	r30, 0x4E	; 78
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	81 60       	ori	r24, 0x01	; 1
    12ea:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,6);
    12ec:	ae e4       	ldi	r26, 0x4E	; 78
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ee e4       	ldi	r30, 0x4E	; 78
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7b       	andi	r24, 0xBF	; 191
    12f8:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,7);
    12fa:	ae e4       	ldi	r26, 0x4E	; 78
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ee e4       	ldi	r30, 0x4E	; 78
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	8c 93       	st	X, r24

    while (GET_BIT(TIFR,5) == 0);
    1308:	e8 e5       	ldi	r30, 0x58	; 88
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	82 95       	swap	r24
    1310:	86 95       	lsr	r24
    1312:	87 70       	andi	r24, 0x07	; 7
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	90 70       	andi	r25, 0x00	; 0
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	a1 f3       	breq	.-24     	; 0x1308 <ICU_u16PulseWidth+0xa6>
    u16End = ICR1;  		/* Take value of capture register */
    1320:	e6 e4       	ldi	r30, 0x46	; 70
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	90 93 77 00 	sts	0x0077, r25
    132c:	80 93 76 00 	sts	0x0076, r24
    SET_BIT(TIFR,5);  	/* Clear ICF flag */
    1330:	a8 e5       	ldi	r26, 0x58	; 88
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e5       	ldi	r30, 0x58	; 88
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 62       	ori	r24, 0x20	; 32
    133c:	8c 93       	st	X, r24
	TCNT1=0;
    133e:	ec e4       	ldi	r30, 0x4C	; 76
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	11 82       	std	Z+1, r1	; 0x01
    1344:	10 82       	st	Z, r1
    TCCR1B = 0;  		/* Stop the timer */
    1346:	ee e4       	ldi	r30, 0x4E	; 78
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
	u16High=u16End-u16Start;
    134c:	20 91 76 00 	lds	r18, 0x0076
    1350:	30 91 77 00 	lds	r19, 0x0077
    1354:	80 91 7a 00 	lds	r24, 0x007A
    1358:	90 91 7b 00 	lds	r25, 0x007B
    135c:	a9 01       	movw	r20, r18
    135e:	48 1b       	sub	r20, r24
    1360:	59 0b       	sbc	r21, r25
    1362:	ca 01       	movw	r24, r20
    1364:	90 93 79 00 	sts	0x0079, r25
    1368:	80 93 78 00 	sts	0x0078, r24

	return u16High;
    136c:	80 91 78 00 	lds	r24, 0x0078
    1370:	90 91 79 00 	lds	r25, 0x0079
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	c6 5c       	subi	r28, 0xC6	; 198
    1388:	d0 40       	sbci	r29, 0x00	; 0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    1394:	fe 01       	movw	r30, r28
    1396:	ea 53       	subi	r30, 0x3A	; 58
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	10 82       	st	Z, r1
    139c:	0c 94 b7 14 	jmp	0x296e	; 0x296e <LCD_voidInit+0x15f4>
    13a0:	fe 01       	movw	r30, r28
    13a2:	ef 53       	subi	r30, 0x3F	; 63
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 ef       	ldi	r26, 0xF0	; 240
    13ac:	b1 e4       	ldi	r27, 0x41	; 65
    13ae:	80 83       	st	Z, r24
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	a2 83       	std	Z+2, r26	; 0x02
    13b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	8e 01       	movw	r16, r28
    13b8:	03 54       	subi	r16, 0x43	; 67
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	fe 01       	movw	r30, r28
    13be:	ef 53       	subi	r30, 0x3F	; 63
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	f8 01       	movw	r30, r16
    13dc:	80 83       	st	Z, r24
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	a2 83       	std	Z+2, r26	; 0x02
    13e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e4:	fe 01       	movw	r30, r28
    13e6:	e3 54       	subi	r30, 0x43	; 67
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	44 f4       	brge	.+16     	; 0x1412 <LCD_voidInit+0x98>
		__ticks = 1;
    1402:	fe 01       	movw	r30, r28
    1404:	e5 54       	subi	r30, 0x45	; 69
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	64 c0       	rjmp	.+200    	; 0x14da <LCD_voidInit+0x160>
	else if (__tmp > 65535)
    1412:	fe 01       	movw	r30, r28
    1414:	e3 54       	subi	r30, 0x43	; 67
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	0c f0       	brlt	.+2      	; 0x1432 <LCD_voidInit+0xb8>
    1430:	43 c0       	rjmp	.+134    	; 0x14b8 <LCD_voidInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	fe 01       	movw	r30, r28
    1434:	ef 53       	subi	r30, 0x3F	; 63
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	8e 01       	movw	r16, r28
    1452:	05 54       	subi	r16, 0x45	; 69
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	f8 01       	movw	r30, r16
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <LCD_voidInit+0x12e>
    146a:	fe 01       	movw	r30, r28
    146c:	e7 54       	subi	r30, 0x47	; 71
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	89 e1       	ldi	r24, 0x19	; 25
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1478:	fe 01       	movw	r30, r28
    147a:	e7 54       	subi	r30, 0x47	; 71
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_voidInit+0x108>
    1486:	fe 01       	movw	r30, r28
    1488:	e7 54       	subi	r30, 0x47	; 71
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1490:	de 01       	movw	r26, r28
    1492:	a5 54       	subi	r26, 0x45	; 69
    1494:	bf 4f       	sbci	r27, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	e5 54       	subi	r30, 0x45	; 69
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	9c 93       	st	X, r25
    14a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	fe 01       	movw	r30, r28
    14aa:	e5 54       	subi	r30, 0x45	; 69
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	d1 f6       	brne	.-76     	; 0x146a <LCD_voidInit+0xf0>
    14b6:	28 c0       	rjmp	.+80     	; 0x1508 <LCD_voidInit+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	8e 01       	movw	r16, r28
    14ba:	05 54       	subi	r16, 0x45	; 69
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e3 54       	subi	r30, 0x43	; 67
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	f8 01       	movw	r30, r16
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
    14da:	de 01       	movw	r26, r28
    14dc:	a9 54       	subi	r26, 0x49	; 73
    14de:	bf 4f       	sbci	r27, 0xFF	; 255
    14e0:	fe 01       	movw	r30, r28
    14e2:	e5 54       	subi	r30, 0x45	; 69
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	9c 93       	st	X, r25
    14ee:	8e 93       	st	-X, r24
    14f0:	fe 01       	movw	r30, r28
    14f2:	e9 54       	subi	r30, 0x49	; 73
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <LCD_voidInit+0x180>
    14fe:	fe 01       	movw	r30, r28
    1500:	e9 54       	subi	r30, 0x49	; 73
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    1508:	fe 01       	movw	r30, r28
    150a:	ea 53       	subi	r30, 0x3A	; 58
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	c9 01       	movw	r24, r18
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	fc 01       	movw	r30, r24
    1528:	e8 59       	subi	r30, 0x98	; 152
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	82 95       	swap	r24
    1530:	86 95       	lsr	r24
    1532:	87 70       	andi	r24, 0x07	; 7
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	09 f0       	breq	.+2      	; 0x153c <LCD_voidInit+0x1c2>
    153a:	bf c3       	rjmp	.+1918   	; 0x1cba <LCD_voidInit+0x940>
		{
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
    153c:	fe 01       	movw	r30, r28
    153e:	ea 53       	subi	r30, 0x3A	; 58
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	c9 01       	movw	r24, r18
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	82 0f       	add	r24, r18
    1550:	93 1f       	adc	r25, r19
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	fc 01       	movw	r30, r24
    155c:	e8 59       	subi	r30, 0x98	; 152
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	81 70       	andi	r24, 0x01	; 1
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	48 2f       	mov	r20, r24
    1576:	40 63       	ori	r20, 0x30	; 48
    1578:	fe 01       	movw	r30, r28
    157a:	ea 53       	subi	r30, 0x3A	; 58
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	c9 01       	movw	r24, r18
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	82 0f       	add	r24, r18
    158c:	93 1f       	adc	r25, r19
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	fc 01       	movw	r30, r24
    1598:	e8 59       	subi	r30, 0x98	; 152
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	86 95       	lsr	r24
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	84 2b       	or	r24, r20
    15b0:	fe 01       	movw	r30, r28
    15b2:	eb 53       	subi	r30, 0x3B	; 59
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    15b8:	fe 01       	movw	r30, r28
    15ba:	ea 53       	subi	r30, 0x3A	; 58
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	de 01       	movw	r26, r28
    15c0:	ab 53       	subi	r26, 0x3B	; 59
    15c2:	bf 4f       	sbci	r27, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	6c 91       	ld	r22, X
    15c8:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    15cc:	fe 01       	movw	r30, r28
    15ce:	ed 54       	subi	r30, 0x4D	; 77
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 e8       	ldi	r26, 0x80	; 128
    15d8:	bf e3       	ldi	r27, 0x3F	; 63
    15da:	80 83       	st	Z, r24
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	a2 83       	std	Z+2, r26	; 0x02
    15e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	8e 01       	movw	r16, r28
    15e4:	01 55       	subi	r16, 0x51	; 81
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	fe 01       	movw	r30, r28
    15ea:	ed 54       	subi	r30, 0x4D	; 77
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4a e7       	ldi	r20, 0x7A	; 122
    15fc:	53 e4       	ldi	r21, 0x43	; 67
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	f8 01       	movw	r30, r16
    1608:	80 83       	st	Z, r24
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	a2 83       	std	Z+2, r26	; 0x02
    160e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1610:	fe 01       	movw	r30, r28
    1612:	e1 55       	subi	r30, 0x51	; 81
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	44 f4       	brge	.+16     	; 0x163e <LCD_voidInit+0x2c4>
		__ticks = 1;
    162e:	fe 01       	movw	r30, r28
    1630:	e3 55       	subi	r30, 0x53	; 83
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	64 c0       	rjmp	.+200    	; 0x1706 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    163e:	fe 01       	movw	r30, r28
    1640:	e1 55       	subi	r30, 0x51	; 81
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	0c f0       	brlt	.+2      	; 0x165e <LCD_voidInit+0x2e4>
    165c:	43 c0       	rjmp	.+134    	; 0x16e4 <LCD_voidInit+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	fe 01       	movw	r30, r28
    1660:	ed 54       	subi	r30, 0x4D	; 77
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e2       	ldi	r20, 0x20	; 32
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	8e 01       	movw	r16, r28
    167e:	03 55       	subi	r16, 0x53	; 83
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	f8 01       	movw	r30, r16
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	1f c0       	rjmp	.+62     	; 0x16d4 <LCD_voidInit+0x35a>
    1696:	fe 01       	movw	r30, r28
    1698:	e5 55       	subi	r30, 0x55	; 85
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	89 e1       	ldi	r24, 0x19	; 25
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	fe 01       	movw	r30, r28
    16a6:	e5 55       	subi	r30, 0x55	; 85
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <LCD_voidInit+0x334>
    16b2:	fe 01       	movw	r30, r28
    16b4:	e5 55       	subi	r30, 0x55	; 85
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	de 01       	movw	r26, r28
    16be:	a3 55       	subi	r26, 0x53	; 83
    16c0:	bf 4f       	sbci	r27, 0xFF	; 255
    16c2:	fe 01       	movw	r30, r28
    16c4:	e3 55       	subi	r30, 0x53	; 83
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	11 96       	adiw	r26, 0x01	; 1
    16d0:	9c 93       	st	X, r25
    16d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	fe 01       	movw	r30, r28
    16d6:	e3 55       	subi	r30, 0x53	; 83
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	d1 f6       	brne	.-76     	; 0x1696 <LCD_voidInit+0x31c>
    16e2:	27 c0       	rjmp	.+78     	; 0x1732 <LCD_voidInit+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	8e 01       	movw	r16, r28
    16e6:	03 55       	subi	r16, 0x53	; 83
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	e1 55       	subi	r30, 0x51	; 81
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	f8 01       	movw	r30, r16
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    1706:	de 01       	movw	r26, r28
    1708:	a7 55       	subi	r26, 0x57	; 87
    170a:	bf 4f       	sbci	r27, 0xFF	; 255
    170c:	fe 01       	movw	r30, r28
    170e:	e3 55       	subi	r30, 0x53	; 83
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	8d 93       	st	X+, r24
    1718:	9c 93       	st	X, r25
    171a:	fe 01       	movw	r30, r28
    171c:	e7 55       	subi	r30, 0x57	; 87
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_voidInit+0x3aa>
    1728:	fe 01       	movw	r30, r28
    172a:	e7 55       	subi	r30, 0x57	; 87
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
    1732:	fe 01       	movw	r30, r28
    1734:	ea 53       	subi	r30, 0x3A	; 58
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	c9 01       	movw	r24, r18
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	fc 01       	movw	r30, r24
    1752:	e8 59       	subi	r30, 0x98	; 152
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	86 95       	lsr	r24
    175a:	86 95       	lsr	r24
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	48 2f       	mov	r20, r24
    176c:	48 60       	ori	r20, 0x08	; 8
    176e:	fe 01       	movw	r30, r28
    1770:	ea 53       	subi	r30, 0x3A	; 58
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	c9 01       	movw	r24, r18
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	fc 01       	movw	r30, r24
    178e:	e8 59       	subi	r30, 0x98	; 152
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	86 95       	lsr	r24
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	48 2b       	or	r20, r24
    17a6:	fe 01       	movw	r30, r28
    17a8:	ea 53       	subi	r30, 0x3A	; 58
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	c9 01       	movw	r24, r18
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	fc 01       	movw	r30, r24
    17c6:	e8 59       	subi	r30, 0x98	; 152
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	82 95       	swap	r24
    17ce:	8f 70       	andi	r24, 0x0F	; 15
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	84 2b       	or	r24, r20
    17d4:	fe 01       	movw	r30, r28
    17d6:	eb 53       	subi	r30, 0x3B	; 59
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 83       	st	Z, r24
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    17dc:	fe 01       	movw	r30, r28
    17de:	ea 53       	subi	r30, 0x3A	; 58
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	de 01       	movw	r26, r28
    17e4:	ab 53       	subi	r26, 0x3B	; 59
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	6c 91       	ld	r22, X
    17ec:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    17f0:	fe 01       	movw	r30, r28
    17f2:	eb 55       	subi	r30, 0x5B	; 91
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e8       	ldi	r26, 0x80	; 128
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	80 83       	st	Z, r24
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	a2 83       	std	Z+2, r26	; 0x02
    1804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	8e 01       	movw	r16, r28
    1808:	0f 55       	subi	r16, 0x5F	; 95
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	fe 01       	movw	r30, r28
    180e:	eb 55       	subi	r30, 0x5B	; 91
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e7       	ldi	r20, 0x7A	; 122
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	f8 01       	movw	r30, r16
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1834:	fe 01       	movw	r30, r28
    1836:	ef 55       	subi	r30, 0x5F	; 95
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	44 f4       	brge	.+16     	; 0x1862 <LCD_voidInit+0x4e8>
		__ticks = 1;
    1852:	fe 01       	movw	r30, r28
    1854:	e1 56       	subi	r30, 0x61	; 97
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
    1860:	64 c0       	rjmp	.+200    	; 0x192a <LCD_voidInit+0x5b0>
	else if (__tmp > 65535)
    1862:	fe 01       	movw	r30, r28
    1864:	ef 55       	subi	r30, 0x5F	; 95
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	0c f0       	brlt	.+2      	; 0x1882 <LCD_voidInit+0x508>
    1880:	43 c0       	rjmp	.+134    	; 0x1908 <LCD_voidInit+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	fe 01       	movw	r30, r28
    1884:	eb 55       	subi	r30, 0x5B	; 91
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8e 01       	movw	r16, r28
    18a2:	01 56       	subi	r16, 0x61	; 97
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	f8 01       	movw	r30, r16
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <LCD_voidInit+0x57e>
    18ba:	fe 01       	movw	r30, r28
    18bc:	e3 56       	subi	r30, 0x63	; 99
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	89 e1       	ldi	r24, 0x19	; 25
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	fe 01       	movw	r30, r28
    18ca:	e3 56       	subi	r30, 0x63	; 99
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_voidInit+0x558>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e3 56       	subi	r30, 0x63	; 99
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e0:	de 01       	movw	r26, r28
    18e2:	a1 56       	subi	r26, 0x61	; 97
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e1 56       	subi	r30, 0x61	; 97
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 56       	subi	r30, 0x61	; 97
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	d1 f6       	brne	.-76     	; 0x18ba <LCD_voidInit+0x540>
    1906:	27 c0       	rjmp	.+78     	; 0x1956 <LCD_voidInit+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	8e 01       	movw	r16, r28
    190a:	01 56       	subi	r16, 0x61	; 97
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	fe 01       	movw	r30, r28
    1910:	ef 55       	subi	r30, 0x5F	; 95
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	de 01       	movw	r26, r28
    192c:	a5 56       	subi	r26, 0x65	; 101
    192e:	bf 4f       	sbci	r27, 0xFF	; 255
    1930:	fe 01       	movw	r30, r28
    1932:	e1 56       	subi	r30, 0x61	; 97
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	8d 93       	st	X+, r24
    193c:	9c 93       	st	X, r25
    193e:	fe 01       	movw	r30, r28
    1940:	e5 56       	subi	r30, 0x65	; 101
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_voidInit+0x5ce>
    194c:	fe 01       	movw	r30, r28
    194e:	e5 56       	subi	r30, 0x65	; 101
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
		    _delay_ms(1);
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
    1956:	fe 01       	movw	r30, r28
    1958:	ea 53       	subi	r30, 0x3A	; 58
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    1964:	fe 01       	movw	r30, r28
    1966:	e9 56       	subi	r30, 0x69	; 105
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	80 83       	st	Z, r24
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	a2 83       	std	Z+2, r26	; 0x02
    1978:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	8e 01       	movw	r16, r28
    197c:	0d 56       	subi	r16, 0x6D	; 109
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	fe 01       	movw	r30, r28
    1982:	e9 56       	subi	r30, 0x69	; 105
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a e7       	ldi	r20, 0x7A	; 122
    1994:	53 e4       	ldi	r21, 0x43	; 67
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	80 83       	st	Z, r24
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	a2 83       	std	Z+2, r26	; 0x02
    19a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a8:	fe 01       	movw	r30, r28
    19aa:	ed 56       	subi	r30, 0x6D	; 109
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	44 f4       	brge	.+16     	; 0x19d6 <LCD_voidInit+0x65c>
		__ticks = 1;
    19c6:	fe 01       	movw	r30, r28
    19c8:	ef 56       	subi	r30, 0x6F	; 111
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	64 c0       	rjmp	.+200    	; 0x1a9e <LCD_voidInit+0x724>
	else if (__tmp > 65535)
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 56       	subi	r30, 0x6D	; 109
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	0c f0       	brlt	.+2      	; 0x19f6 <LCD_voidInit+0x67c>
    19f4:	43 c0       	rjmp	.+134    	; 0x1a7c <LCD_voidInit+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	fe 01       	movw	r30, r28
    19f8:	e9 56       	subi	r30, 0x69	; 105
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8e 01       	movw	r16, r28
    1a16:	0f 56       	subi	r16, 0x6F	; 111
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	f8 01       	movw	r30, r16
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	80 83       	st	Z, r24
    1a2c:	1f c0       	rjmp	.+62     	; 0x1a6c <LCD_voidInit+0x6f2>
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e1 57       	subi	r30, 0x71	; 113
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	89 e1       	ldi	r24, 0x19	; 25
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e1 57       	subi	r30, 0x71	; 113
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_voidInit+0x6cc>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e1 57       	subi	r30, 0x71	; 113
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	de 01       	movw	r26, r28
    1a56:	af 56       	subi	r26, 0x6F	; 111
    1a58:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ef 56       	subi	r30, 0x6F	; 111
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	11 96       	adiw	r26, 0x01	; 1
    1a68:	9c 93       	st	X, r25
    1a6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ef 56       	subi	r30, 0x6F	; 111
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	d1 f6       	brne	.-76     	; 0x1a2e <LCD_voidInit+0x6b4>
    1a7a:	27 c0       	rjmp	.+78     	; 0x1aca <LCD_voidInit+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	0f 56       	subi	r16, 0x6F	; 111
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 56       	subi	r30, 0x6D	; 109
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
    1a9e:	de 01       	movw	r26, r28
    1aa0:	a3 57       	subi	r26, 0x73	; 115
    1aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ef 56       	subi	r30, 0x6F	; 111
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	8d 93       	st	X+, r24
    1ab0:	9c 93       	st	X, r25
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e3 57       	subi	r30, 0x73	; 115
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_voidInit+0x742>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 57       	subi	r30, 0x73	; 115
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
		    _delay_ms(2);
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
    1aca:	fe 01       	movw	r30, r28
    1acc:	ea 53       	subi	r30, 0x3A	; 58
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 81       	ld	r24, Z
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	fc 01       	movw	r30, r24
    1aea:	e8 59       	subi	r30, 0x98	; 152
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 81       	ld	r24, Z
    1af0:	82 95       	swap	r24
    1af2:	86 95       	lsr	r24
    1af4:	86 95       	lsr	r24
    1af6:	83 70       	andi	r24, 0x03	; 3
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	48 2f       	mov	r20, r24
    1b04:	44 60       	ori	r20, 0x04	; 4
    1b06:	fe 01       	movw	r30, r28
    1b08:	ea 53       	subi	r30, 0x3A	; 58
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	c9 01       	movw	r24, r18
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	82 0f       	add	r24, r18
    1b1a:	93 1f       	adc	r25, r19
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	fc 01       	movw	r30, r24
    1b26:	e8 59       	subi	r30, 0x98	; 152
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	88 27       	eor	r24, r24
    1b30:	88 1f       	adc	r24, r24
    1b32:	84 2b       	or	r24, r20
    1b34:	fe 01       	movw	r30, r28
    1b36:	eb 53       	subi	r30, 0x3B	; 59
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 83       	st	Z, r24
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ea 53       	subi	r30, 0x3A	; 58
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	de 01       	movw	r26, r28
    1b44:	ab 53       	subi	r26, 0x3B	; 59
    1b46:	bf 4f       	sbci	r27, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	6c 91       	ld	r22, X
    1b4c:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    1b50:	fe 01       	movw	r30, r28
    1b52:	e7 57       	subi	r30, 0x77	; 119
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b0 e4       	ldi	r27, 0x40	; 64
    1b5e:	80 83       	st	Z, r24
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	a2 83       	std	Z+2, r26	; 0x02
    1b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	8e 01       	movw	r16, r28
    1b68:	0b 57       	subi	r16, 0x7B	; 123
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e7 57       	subi	r30, 0x77	; 119
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a e7       	ldi	r20, 0x7A	; 122
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 57       	subi	r30, 0x7B	; 123
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	44 f4       	brge	.+16     	; 0x1bc2 <LCD_voidInit+0x848>
		__ticks = 1;
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ed 57       	subi	r30, 0x7D	; 125
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
    1bc0:	64 c0       	rjmp	.+200    	; 0x1c8a <LCD_voidInit+0x910>
	else if (__tmp > 65535)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	eb 57       	subi	r30, 0x7B	; 123
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	0c f0       	brlt	.+2      	; 0x1be2 <LCD_voidInit+0x868>
    1be0:	43 c0       	rjmp	.+134    	; 0x1c68 <LCD_voidInit+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 57       	subi	r30, 0x77	; 119
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8e 01       	movw	r16, r28
    1c02:	0d 57       	subi	r16, 0x7D	; 125
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	f8 01       	movw	r30, r16
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	1f c0       	rjmp	.+62     	; 0x1c58 <LCD_voidInit+0x8de>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ef 57       	subi	r30, 0x7F	; 127
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	89 e1       	ldi	r24, 0x19	; 25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ef 57       	subi	r30, 0x7F	; 127
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	80 81       	ld	r24, Z
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_voidInit+0x8b8>
    1c36:	fe 01       	movw	r30, r28
    1c38:	ef 57       	subi	r30, 0x7F	; 127
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	de 01       	movw	r26, r28
    1c42:	ad 57       	subi	r26, 0x7D	; 125
    1c44:	bf 4f       	sbci	r27, 0xFF	; 255
    1c46:	fe 01       	movw	r30, r28
    1c48:	ed 57       	subi	r30, 0x7D	; 125
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	11 96       	adiw	r26, 0x01	; 1
    1c54:	9c 93       	st	X, r25
    1c56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ed 57       	subi	r30, 0x7D	; 125
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	d1 f6       	brne	.-76     	; 0x1c1a <LCD_voidInit+0x8a0>
    1c66:	7a c6       	rjmp	.+3316   	; 0x295c <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	8e 01       	movw	r16, r28
    1c6a:	0d 57       	subi	r16, 0x7D	; 125
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	fe 01       	movw	r30, r28
    1c70:	eb 57       	subi	r30, 0x7B	; 123
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	f8 01       	movw	r30, r16
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	de 01       	movw	r26, r28
    1c8c:	a1 58       	subi	r26, 0x81	; 129
    1c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 57       	subi	r30, 0x7D	; 125
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	9c 93       	st	X, r25
    1c9e:	8e 93       	st	-X, r24
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e1 58       	subi	r30, 0x81	; 129
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_voidInit+0x930>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e1 58       	subi	r30, 0x81	; 129
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	51 c6       	rjmp	.+3234   	; 0x295c <LCD_voidInit+0x15e2>
			 _delay_ms(2);
			
		}
		else 
		{
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ea 53       	subi	r30, 0x3A	; 58
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	60 e2       	ldi	r22, 0x20	; 32
    1cc4:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e5 58       	subi	r30, 0x85	; 133
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e8       	ldi	r26, 0x80	; 128
    1cd4:	bf e3       	ldi	r27, 0x3F	; 63
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	09 58       	subi	r16, 0x89	; 137
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 58       	subi	r30, 0x85	; 133
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	53 e4       	ldi	r21, 0x43	; 67
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 83       	st	Z, r24
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	a2 83       	std	Z+2, r26	; 0x02
    1d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e9 58       	subi	r30, 0x89	; 137
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	44 f4       	brge	.+16     	; 0x1d3a <LCD_voidInit+0x9c0>
		__ticks = 1;
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	eb 58       	subi	r30, 0x8B	; 139
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	64 c0       	rjmp	.+200    	; 0x1e02 <LCD_voidInit+0xa88>
	else if (__tmp > 65535)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e9 58       	subi	r30, 0x89	; 137
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <LCD_voidInit+0x9e0>
    1d58:	43 c0       	rjmp	.+134    	; 0x1de0 <LCD_voidInit+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e5 58       	subi	r30, 0x85	; 133
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8e 01       	movw	r16, r28
    1d7a:	0b 58       	subi	r16, 0x8B	; 139
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <LCD_voidInit+0xa56>
    1d92:	fe 01       	movw	r30, r28
    1d94:	ed 58       	subi	r30, 0x8D	; 141
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	89 e1       	ldi	r24, 0x19	; 25
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	fe 01       	movw	r30, r28
    1da2:	ed 58       	subi	r30, 0x8D	; 141
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_voidInit+0xa30>
    1dae:	fe 01       	movw	r30, r28
    1db0:	ed 58       	subi	r30, 0x8D	; 141
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	de 01       	movw	r26, r28
    1dba:	ab 58       	subi	r26, 0x8B	; 139
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	eb 58       	subi	r30, 0x8B	; 139
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	9c 93       	st	X, r25
    1dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	eb 58       	subi	r30, 0x8B	; 139
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	d1 f6       	brne	.-76     	; 0x1d92 <LCD_voidInit+0xa18>
    1dde:	27 c0       	rjmp	.+78     	; 0x1e2e <LCD_voidInit+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	8e 01       	movw	r16, r28
    1de2:	0b 58       	subi	r16, 0x8B	; 139
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e9 58       	subi	r30, 0x89	; 137
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	de 01       	movw	r26, r28
    1e04:	af 58       	subi	r26, 0x8F	; 143
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	eb 58       	subi	r30, 0x8B	; 139
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	8d 93       	st	X+, r24
    1e14:	9c 93       	st	X, r25
    1e16:	fe 01       	movw	r30, r28
    1e18:	ef 58       	subi	r30, 0x8F	; 143
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_voidInit+0xaa6>
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 58       	subi	r30, 0x8F	; 143
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
				 _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ea 53       	subi	r30, 0x3A	; 58
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	60 e2       	ldi	r22, 0x20	; 32
    1e38:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e3 59       	subi	r30, 0x93	; 147
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	80 83       	st	Z, r24
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	a2 83       	std	Z+2, r26	; 0x02
    1e50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	8e 01       	movw	r16, r28
    1e54:	07 59       	subi	r16, 0x97	; 151
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e3 59       	subi	r30, 0x93	; 147
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	80 83       	st	Z, r24
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	a2 83       	std	Z+2, r26	; 0x02
    1e7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e80:	fe 01       	movw	r30, r28
    1e82:	e7 59       	subi	r30, 0x97	; 151
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	44 f4       	brge	.+16     	; 0x1eae <LCD_voidInit+0xb34>
		__ticks = 1;
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 59       	subi	r30, 0x99	; 153
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	64 c0       	rjmp	.+200    	; 0x1f76 <LCD_voidInit+0xbfc>
	else if (__tmp > 65535)
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 59       	subi	r30, 0x97	; 151
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	0c f0       	brlt	.+2      	; 0x1ece <LCD_voidInit+0xb54>
    1ecc:	43 c0       	rjmp	.+134    	; 0x1f54 <LCD_voidInit+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e3 59       	subi	r30, 0x93	; 147
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8e 01       	movw	r16, r28
    1eee:	09 59       	subi	r16, 0x99	; 153
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	f8 01       	movw	r30, r16
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	1f c0       	rjmp	.+62     	; 0x1f44 <LCD_voidInit+0xbca>
    1f06:	fe 01       	movw	r30, r28
    1f08:	eb 59       	subi	r30, 0x9B	; 155
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	89 e1       	ldi	r24, 0x19	; 25
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
    1f14:	fe 01       	movw	r30, r28
    1f16:	eb 59       	subi	r30, 0x9B	; 155
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_voidInit+0xba4>
    1f22:	fe 01       	movw	r30, r28
    1f24:	eb 59       	subi	r30, 0x9B	; 155
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	de 01       	movw	r26, r28
    1f2e:	a9 59       	subi	r26, 0x99	; 153
    1f30:	bf 4f       	sbci	r27, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	e9 59       	subi	r30, 0x99	; 153
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	11 96       	adiw	r26, 0x01	; 1
    1f40:	9c 93       	st	X, r25
    1f42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e9 59       	subi	r30, 0x99	; 153
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	d1 f6       	brne	.-76     	; 0x1f06 <LCD_voidInit+0xb8c>
    1f52:	27 c0       	rjmp	.+78     	; 0x1fa2 <LCD_voidInit+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	8e 01       	movw	r16, r28
    1f56:	09 59       	subi	r16, 0x99	; 153
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e7 59       	subi	r30, 0x97	; 151
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	de 01       	movw	r26, r28
    1f78:	ad 59       	subi	r26, 0x9D	; 157
    1f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e9 59       	subi	r30, 0x99	; 153
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	8d 93       	st	X+, r24
    1f88:	9c 93       	st	X, r25
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ed 59       	subi	r30, 0x9D	; 157
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_voidInit+0xc1a>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ed 59       	subi	r30, 0x9D	; 157
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
				 _delay_ms(1);
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ea 53       	subi	r30, 0x3A	; 58
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	c9 01       	movw	r24, r18
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e8 59       	subi	r30, 0x98	; 152
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	81 70       	andi	r24, 0x01	; 1
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	96 95       	lsr	r25
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	88 27       	eor	r24, r24
    1fd4:	97 95       	ror	r25
    1fd6:	87 95       	ror	r24
    1fd8:	48 2f       	mov	r20, r24
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ea 53       	subi	r30, 0x3A	; 58
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	c9 01       	movw	r24, r18
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e8 59       	subi	r30, 0x98	; 152
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	86 95       	lsr	r24
    2002:	81 70       	andi	r24, 0x01	; 1
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	00 24       	eor	r0, r0
    200a:	96 95       	lsr	r25
    200c:	87 95       	ror	r24
    200e:	07 94       	ror	r0
    2010:	96 95       	lsr	r25
    2012:	87 95       	ror	r24
    2014:	07 94       	ror	r0
    2016:	98 2f       	mov	r25, r24
    2018:	80 2d       	mov	r24, r0
    201a:	84 2b       	or	r24, r20
    201c:	fe 01       	movw	r30, r28
    201e:	eb 53       	subi	r30, 0x3B	; 59
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2024:	fe 01       	movw	r30, r28
    2026:	ea 53       	subi	r30, 0x3A	; 58
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	de 01       	movw	r26, r28
    202c:	ab 53       	subi	r26, 0x3B	; 59
    202e:	bf 4f       	sbci	r27, 0xFF	; 255
    2030:	80 81       	ld	r24, Z
    2032:	6c 91       	ld	r22, X
    2034:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    2038:	fe 01       	movw	r30, r28
    203a:	e1 5a       	subi	r30, 0xA1	; 161
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e8       	ldi	r26, 0x80	; 128
    2044:	bf e3       	ldi	r27, 0x3F	; 63
    2046:	80 83       	st	Z, r24
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	a2 83       	std	Z+2, r26	; 0x02
    204c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	8e 01       	movw	r16, r28
    2050:	05 5a       	subi	r16, 0xA5	; 165
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	e1 5a       	subi	r30, 0xA1	; 161
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a e7       	ldi	r20, 0x7A	; 122
    2068:	53 e4       	ldi	r21, 0x43	; 67
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	a2 83       	std	Z+2, r26	; 0x02
    207a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207c:	fe 01       	movw	r30, r28
    207e:	e5 5a       	subi	r30, 0xA5	; 165
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	44 f4       	brge	.+16     	; 0x20aa <LCD_voidInit+0xd30>
		__ticks = 1;
    209a:	fe 01       	movw	r30, r28
    209c:	e7 5a       	subi	r30, 0xA7	; 167
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	80 83       	st	Z, r24
    20a8:	64 c0       	rjmp	.+200    	; 0x2172 <LCD_voidInit+0xdf8>
	else if (__tmp > 65535)
    20aa:	fe 01       	movw	r30, r28
    20ac:	e5 5a       	subi	r30, 0xA5	; 165
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <LCD_voidInit+0xd50>
    20c8:	43 c0       	rjmp	.+134    	; 0x2150 <LCD_voidInit+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	fe 01       	movw	r30, r28
    20cc:	e1 5a       	subi	r30, 0xA1	; 161
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8e 01       	movw	r16, r28
    20ea:	07 5a       	subi	r16, 0xA7	; 167
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	1f c0       	rjmp	.+62     	; 0x2140 <LCD_voidInit+0xdc6>
    2102:	fe 01       	movw	r30, r28
    2104:	e9 5a       	subi	r30, 0xA9	; 169
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	89 e1       	ldi	r24, 0x19	; 25
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	fe 01       	movw	r30, r28
    2112:	e9 5a       	subi	r30, 0xA9	; 169
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 81       	ld	r24, Z
    2118:	91 81       	ldd	r25, Z+1	; 0x01
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_voidInit+0xda0>
    211e:	fe 01       	movw	r30, r28
    2120:	e9 5a       	subi	r30, 0xA9	; 169
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	de 01       	movw	r26, r28
    212a:	a7 5a       	subi	r26, 0xA7	; 167
    212c:	bf 4f       	sbci	r27, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	e7 5a       	subi	r30, 0xA7	; 167
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	9c 93       	st	X, r25
    213e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	fe 01       	movw	r30, r28
    2142:	e7 5a       	subi	r30, 0xA7	; 167
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	d1 f6       	brne	.-76     	; 0x2102 <LCD_voidInit+0xd88>
    214e:	27 c0       	rjmp	.+78     	; 0x219e <LCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	8e 01       	movw	r16, r28
    2152:	07 5a       	subi	r16, 0xA7	; 167
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	fe 01       	movw	r30, r28
    2158:	e5 5a       	subi	r30, 0xA5	; 165
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	f8 01       	movw	r30, r16
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
    2172:	de 01       	movw	r26, r28
    2174:	ab 5a       	subi	r26, 0xAB	; 171
    2176:	bf 4f       	sbci	r27, 0xFF	; 255
    2178:	fe 01       	movw	r30, r28
    217a:	e7 5a       	subi	r30, 0xA7	; 167
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	8d 93       	st	X+, r24
    2184:	9c 93       	st	X, r25
    2186:	fe 01       	movw	r30, r28
    2188:	eb 5a       	subi	r30, 0xAB	; 171
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_voidInit+0xe16>
    2194:	fe 01       	movw	r30, r28
    2196:	eb 5a       	subi	r30, 0xAB	; 171
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    219e:	fe 01       	movw	r30, r28
    21a0:	ea 53       	subi	r30, 0x3A	; 58
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 5a       	subi	r30, 0xAF	; 175
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	80 83       	st	Z, r24
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	a2 83       	std	Z+2, r26	; 0x02
    21c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	8e 01       	movw	r16, r28
    21c4:	03 5b       	subi	r16, 0xB3	; 179
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 5a       	subi	r30, 0xAF	; 175
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a e7       	ldi	r20, 0x7A	; 122
    21dc:	53 e4       	ldi	r21, 0x43	; 67
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 83       	st	Z, r24
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	a2 83       	std	Z+2, r26	; 0x02
    21ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f0:	fe 01       	movw	r30, r28
    21f2:	e3 5b       	subi	r30, 0xB3	; 179
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	44 f4       	brge	.+16     	; 0x221e <LCD_voidInit+0xea4>
		__ticks = 1;
    220e:	fe 01       	movw	r30, r28
    2210:	e5 5b       	subi	r30, 0xB5	; 181
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	64 c0       	rjmp	.+200    	; 0x22e6 <LCD_voidInit+0xf6c>
	else if (__tmp > 65535)
    221e:	fe 01       	movw	r30, r28
    2220:	e3 5b       	subi	r30, 0xB3	; 179
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	0c f0       	brlt	.+2      	; 0x223e <LCD_voidInit+0xec4>
    223c:	43 c0       	rjmp	.+134    	; 0x22c4 <LCD_voidInit+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	fe 01       	movw	r30, r28
    2240:	ef 5a       	subi	r30, 0xAF	; 175
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8e 01       	movw	r16, r28
    225e:	05 5b       	subi	r16, 0xB5	; 181
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	f8 01       	movw	r30, r16
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    2274:	1f c0       	rjmp	.+62     	; 0x22b4 <LCD_voidInit+0xf3a>
    2276:	fe 01       	movw	r30, r28
    2278:	e7 5b       	subi	r30, 0xB7	; 183
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	89 e1       	ldi	r24, 0x19	; 25
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	fe 01       	movw	r30, r28
    2286:	e7 5b       	subi	r30, 0xB7	; 183
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_voidInit+0xf14>
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5b       	subi	r30, 0xB7	; 183
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	de 01       	movw	r26, r28
    229e:	a5 5b       	subi	r26, 0xB5	; 181
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	e5 5b       	subi	r30, 0xB5	; 181
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	9c 93       	st	X, r25
    22b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 5b       	subi	r30, 0xB5	; 181
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	d1 f6       	brne	.-76     	; 0x2276 <LCD_voidInit+0xefc>
    22c2:	27 c0       	rjmp	.+78     	; 0x2312 <LCD_voidInit+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	8e 01       	movw	r16, r28
    22c6:	05 5b       	subi	r16, 0xB5	; 181
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	fe 01       	movw	r30, r28
    22cc:	e3 5b       	subi	r30, 0xB3	; 179
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	f8 01       	movw	r30, r16
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	de 01       	movw	r26, r28
    22e8:	a9 5b       	subi	r26, 0xB9	; 185
    22ea:	bf 4f       	sbci	r27, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 5b       	subi	r30, 0xB5	; 181
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	8d 93       	st	X+, r24
    22f8:	9c 93       	st	X, r25
    22fa:	fe 01       	movw	r30, r28
    22fc:	e9 5b       	subi	r30, 0xB9	; 185
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_voidInit+0xf8a>
    2308:	fe 01       	movw	r30, r28
    230a:	e9 5b       	subi	r30, 0xB9	; 185
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
				 _delay_ms(1);
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
    2312:	fe 01       	movw	r30, r28
    2314:	ea 53       	subi	r30, 0x3A	; 58
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	c9 01       	movw	r24, r18
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	82 0f       	add	r24, r18
    2326:	93 1f       	adc	r25, r19
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	fc 01       	movw	r30, r24
    2332:	e8 59       	subi	r30, 0x98	; 152
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	86 95       	lsr	r24
    233a:	86 95       	lsr	r24
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	00 24       	eor	r0, r0
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	07 94       	ror	r0
    234a:	96 95       	lsr	r25
    234c:	87 95       	ror	r24
    234e:	07 94       	ror	r0
    2350:	98 2f       	mov	r25, r24
    2352:	80 2d       	mov	r24, r0
    2354:	48 2f       	mov	r20, r24
    2356:	40 68       	ori	r20, 0x80	; 128
    2358:	fe 01       	movw	r30, r28
    235a:	ea 53       	subi	r30, 0x3A	; 58
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	c9 01       	movw	r24, r18
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	82 0f       	add	r24, r18
    236c:	93 1f       	adc	r25, r19
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	fc 01       	movw	r30, r24
    2378:	e8 59       	subi	r30, 0x98	; 152
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	86 95       	lsr	r24
    2380:	86 95       	lsr	r24
    2382:	86 95       	lsr	r24
    2384:	81 70       	andi	r24, 0x01	; 1
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	82 95       	swap	r24
    2390:	92 95       	swap	r25
    2392:	90 7f       	andi	r25, 0xF0	; 240
    2394:	98 27       	eor	r25, r24
    2396:	80 7f       	andi	r24, 0xF0	; 240
    2398:	98 27       	eor	r25, r24
    239a:	48 2b       	or	r20, r24
    239c:	fe 01       	movw	r30, r28
    239e:	ea 53       	subi	r30, 0x3A	; 58
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 81       	ld	r24, Z
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	c9 01       	movw	r24, r18
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	fc 01       	movw	r30, r24
    23bc:	e8 59       	subi	r30, 0x98	; 152
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	82 95       	swap	r24
    23c4:	8f 70       	andi	r24, 0x0F	; 15
    23c6:	81 70       	andi	r24, 0x01	; 1
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	82 95       	swap	r24
    23ce:	92 95       	swap	r25
    23d0:	90 7f       	andi	r25, 0xF0	; 240
    23d2:	98 27       	eor	r25, r24
    23d4:	80 7f       	andi	r24, 0xF0	; 240
    23d6:	98 27       	eor	r25, r24
    23d8:	84 2b       	or	r24, r20
    23da:	fe 01       	movw	r30, r28
    23dc:	eb 53       	subi	r30, 0x3B	; 59
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    23e2:	fe 01       	movw	r30, r28
    23e4:	ea 53       	subi	r30, 0x3A	; 58
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	de 01       	movw	r26, r28
    23ea:	ab 53       	subi	r26, 0x3B	; 59
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	6c 91       	ld	r22, X
    23f2:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 5b       	subi	r30, 0xBD	; 189
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	80 83       	st	Z, r24
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	a2 83       	std	Z+2, r26	; 0x02
    240a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	8e 01       	movw	r16, r28
    240e:	01 5c       	subi	r16, 0xC1	; 193
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	ed 5b       	subi	r30, 0xBD	; 189
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a e7       	ldi	r20, 0x7A	; 122
    2426:	53 e4       	ldi	r21, 0x43	; 67
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	a2 83       	std	Z+2, r26	; 0x02
    2438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243a:	fe 01       	movw	r30, r28
    243c:	ff 96       	adiw	r30, 0x3f	; 63
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <LCD_voidInit+0x10e6>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9e af       	std	Y+62, r25	; 0x3e
    245c:	8d af       	std	Y+61, r24	; 0x3d
    245e:	46 c0       	rjmp	.+140    	; 0x24ec <LCD_voidInit+0x1172>
	else if (__tmp > 65535)
    2460:	fe 01       	movw	r30, r28
    2462:	ff 96       	adiw	r30, 0x3f	; 63
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	64 f5       	brge	.+88     	; 0x24d4 <LCD_voidInit+0x115a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	fe 01       	movw	r30, r28
    247e:	ed 5b       	subi	r30, 0xBD	; 189
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9e af       	std	Y+62, r25	; 0x3e
    24a8:	8d af       	std	Y+61, r24	; 0x3d
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_voidInit+0x1150>
    24ac:	89 e1       	ldi	r24, 0x19	; 25
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c af       	std	Y+60, r25	; 0x3c
    24b2:	8b af       	std	Y+59, r24	; 0x3b
    24b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    24b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_voidInit+0x113e>
    24bc:	9c af       	std	Y+60, r25	; 0x3c
    24be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    24c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9e af       	std	Y+62, r25	; 0x3e
    24c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    24cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_voidInit+0x1132>
    24d2:	16 c0       	rjmp	.+44     	; 0x2500 <LCD_voidInit+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	fe 01       	movw	r30, r28
    24d6:	ff 96       	adiw	r30, 0x3f	; 63
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e af       	std	Y+62, r25	; 0x3e
    24ea:	8d af       	std	Y+61, r24	; 0x3d
    24ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    24f0:	9a af       	std	Y+58, r25	; 0x3a
    24f2:	89 af       	std	Y+57, r24	; 0x39
    24f4:	89 ad       	ldd	r24, Y+57	; 0x39
    24f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_voidInit+0x117e>
    24fc:	9a af       	std	Y+58, r25	; 0x3a
    24fe:	89 af       	std	Y+57, r24	; 0x39
				 _delay_ms(1);
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    2500:	fe 01       	movw	r30, r28
    2502:	ea 53       	subi	r30, 0x3A	; 58
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e8       	ldi	r26, 0x80	; 128
    2514:	bf e3       	ldi	r27, 0x3F	; 63
    2516:	8d ab       	std	Y+53, r24	; 0x35
    2518:	9e ab       	std	Y+54, r25	; 0x36
    251a:	af ab       	std	Y+55, r26	; 0x37
    251c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6d a9       	ldd	r22, Y+53	; 0x35
    2520:	7e a9       	ldd	r23, Y+54	; 0x36
    2522:	8f a9       	ldd	r24, Y+55	; 0x37
    2524:	98 ad       	ldd	r25, Y+56	; 0x38
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	53 e4       	ldi	r21, 0x43	; 67
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	89 ab       	std	Y+49, r24	; 0x31
    2538:	9a ab       	std	Y+50, r25	; 0x32
    253a:	ab ab       	std	Y+51, r26	; 0x33
    253c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    253e:	69 a9       	ldd	r22, Y+49	; 0x31
    2540:	7a a9       	ldd	r23, Y+50	; 0x32
    2542:	8b a9       	ldd	r24, Y+51	; 0x33
    2544:	9c a9       	ldd	r25, Y+52	; 0x34
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <LCD_voidInit+0x11e6>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	98 ab       	std	Y+48, r25	; 0x30
    255c:	8f a7       	std	Y+47, r24	; 0x2f
    255e:	3f c0       	rjmp	.+126    	; 0x25de <LCD_voidInit+0x1264>
	else if (__tmp > 65535)
    2560:	69 a9       	ldd	r22, Y+49	; 0x31
    2562:	7a a9       	ldd	r23, Y+50	; 0x32
    2564:	8b a9       	ldd	r24, Y+51	; 0x33
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <LCD_voidInit+0x1250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6d a9       	ldd	r22, Y+53	; 0x35
    257a:	7e a9       	ldd	r23, Y+54	; 0x36
    257c:	8f a9       	ldd	r24, Y+55	; 0x37
    257e:	98 ad       	ldd	r25, Y+56	; 0x38
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	98 ab       	std	Y+48, r25	; 0x30
    259e:	8f a7       	std	Y+47, r24	; 0x2f
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <LCD_voidInit+0x1246>
    25a2:	89 e1       	ldi	r24, 0x19	; 25
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9e a7       	std	Y+46, r25	; 0x2e
    25a8:	8d a7       	std	Y+45, r24	; 0x2d
    25aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_voidInit+0x1234>
    25b2:	9e a7       	std	Y+46, r25	; 0x2e
    25b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	98 ab       	std	Y+48, r25	; 0x30
    25be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c2:	98 a9       	ldd	r25, Y+48	; 0x30
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <LCD_voidInit+0x1228>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <LCD_voidInit+0x1278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	98 ab       	std	Y+48, r25	; 0x30
    25dc:	8f a7       	std	Y+47, r24	; 0x2f
    25de:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e0:	98 a9       	ldd	r25, Y+48	; 0x30
    25e2:	9c a7       	std	Y+44, r25	; 0x2c
    25e4:	8b a7       	std	Y+43, r24	; 0x2b
    25e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_voidInit+0x1270>
    25ee:	9c a7       	std	Y+44, r25	; 0x2c
    25f0:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(1);
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
    25f2:	fe 01       	movw	r30, r28
    25f4:	ea 53       	subi	r30, 0x3A	; 58
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	60 e1       	ldi	r22, 0x10	; 16
    25fc:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	8f a3       	std	Y+39, r24	; 0x27
    260a:	98 a7       	std	Y+40, r25	; 0x28
    260c:	a9 a7       	std	Y+41, r26	; 0x29
    260e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	6f a1       	ldd	r22, Y+39	; 0x27
    2612:	78 a5       	ldd	r23, Y+40	; 0x28
    2614:	89 a5       	ldd	r24, Y+41	; 0x29
    2616:	9a a5       	ldd	r25, Y+42	; 0x2a
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	53 e4       	ldi	r21, 0x43	; 67
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8b a3       	std	Y+35, r24	; 0x23
    262a:	9c a3       	std	Y+36, r25	; 0x24
    262c:	ad a3       	std	Y+37, r26	; 0x25
    262e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2630:	6b a1       	ldd	r22, Y+35	; 0x23
    2632:	7c a1       	ldd	r23, Y+36	; 0x24
    2634:	8d a1       	ldd	r24, Y+37	; 0x25
    2636:	9e a1       	ldd	r25, Y+38	; 0x26
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_voidInit+0x12d8>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	89 a3       	std	Y+33, r24	; 0x21
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_voidInit+0x1356>
	else if (__tmp > 65535)
    2652:	6b a1       	ldd	r22, Y+35	; 0x23
    2654:	7c a1       	ldd	r23, Y+36	; 0x24
    2656:	8d a1       	ldd	r24, Y+37	; 0x25
    2658:	9e a1       	ldd	r25, Y+38	; 0x26
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_voidInit+0x1342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	6f a1       	ldd	r22, Y+39	; 0x27
    266c:	78 a5       	ldd	r23, Y+40	; 0x28
    266e:	89 a5       	ldd	r24, Y+41	; 0x29
    2670:	9a a5       	ldd	r25, Y+42	; 0x2a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9a a3       	std	Y+34, r25	; 0x22
    2690:	89 a3       	std	Y+33, r24	; 0x21
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_voidInit+0x1338>
    2694:	89 e1       	ldi	r24, 0x19	; 25
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	98 a3       	std	Y+32, r25	; 0x20
    269a:	8f 8f       	std	Y+31, r24	; 0x1f
    269c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    269e:	98 a1       	ldd	r25, Y+32	; 0x20
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_voidInit+0x1326>
    26a4:	98 a3       	std	Y+32, r25	; 0x20
    26a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	89 a1       	ldd	r24, Y+33	; 0x21
    26aa:	9a a1       	ldd	r25, Y+34	; 0x22
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	89 a1       	ldd	r24, Y+33	; 0x21
    26b4:	9a a1       	ldd	r25, Y+34	; 0x22
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_voidInit+0x131a>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_voidInit+0x136a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6b a1       	ldd	r22, Y+35	; 0x23
    26be:	7c a1       	ldd	r23, Y+36	; 0x24
    26c0:	8d a1       	ldd	r24, Y+37	; 0x25
    26c2:	9e a1       	ldd	r25, Y+38	; 0x26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
    26d0:	89 a1       	ldd	r24, Y+33	; 0x21
    26d2:	9a a1       	ldd	r25, Y+34	; 0x22
    26d4:	9e 8f       	std	Y+30, r25	; 0x1e
    26d6:	8d 8f       	std	Y+29, r24	; 0x1d
    26d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_voidInit+0x1362>
    26e0:	9e 8f       	std	Y+30, r25	; 0x1e
    26e2:	8d 8f       	std	Y+29, r24	; 0x1d
				 _delay_ms(1);

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
    26e4:	fe 01       	movw	r30, r28
    26e6:	ea 53       	subi	r30, 0x3A	; 58
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e8       	ldi	r26, 0x80	; 128
    26f8:	bf e3       	ldi	r27, 0x3F	; 63
    26fa:	89 8f       	std	Y+25, r24	; 0x19
    26fc:	9a 8f       	std	Y+26, r25	; 0x1a
    26fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2700:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	69 8d       	ldd	r22, Y+25	; 0x19
    2704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a e7       	ldi	r20, 0x7A	; 122
    2710:	53 e4       	ldi	r21, 0x43	; 67
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8d 8b       	std	Y+21, r24	; 0x15
    271c:	9e 8b       	std	Y+22, r25	; 0x16
    271e:	af 8b       	std	Y+23, r26	; 0x17
    2720:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2722:	6d 89       	ldd	r22, Y+21	; 0x15
    2724:	7e 89       	ldd	r23, Y+22	; 0x16
    2726:	8f 89       	ldd	r24, Y+23	; 0x17
    2728:	98 8d       	ldd	r25, Y+24	; 0x18
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <LCD_voidInit+0x13ca>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9c 8b       	std	Y+20, r25	; 0x14
    2740:	8b 8b       	std	Y+19, r24	; 0x13
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <LCD_voidInit+0x1448>
	else if (__tmp > 65535)
    2744:	6d 89       	ldd	r22, Y+21	; 0x15
    2746:	7e 89       	ldd	r23, Y+22	; 0x16
    2748:	8f 89       	ldd	r24, Y+23	; 0x17
    274a:	98 8d       	ldd	r25, Y+24	; 0x18
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <LCD_voidInit+0x1434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	69 8d       	ldd	r22, Y+25	; 0x19
    275e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <LCD_voidInit+0x142a>
    2786:	89 e1       	ldi	r24, 0x19	; 25
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9a 8b       	std	Y+18, r25	; 0x12
    278c:	89 8b       	std	Y+17, r24	; 0x11
    278e:	89 89       	ldd	r24, Y+17	; 0x11
    2790:	9a 89       	ldd	r25, Y+18	; 0x12
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_voidInit+0x1418>
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	8b 89       	ldd	r24, Y+19	; 0x13
    279c:	9c 89       	ldd	r25, Y+20	; 0x14
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9c 8b       	std	Y+20, r25	; 0x14
    27a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	8b 89       	ldd	r24, Y+19	; 0x13
    27a6:	9c 89       	ldd	r25, Y+20	; 0x14
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <LCD_voidInit+0x140c>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <LCD_voidInit+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9c 8b       	std	Y+20, r25	; 0x14
    27c0:	8b 8b       	std	Y+19, r24	; 0x13
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	98 8b       	std	Y+16, r25	; 0x10
    27c8:	8f 87       	std	Y+15, r24	; 0x0f
    27ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    27cc:	98 89       	ldd	r25, Y+16	; 0x10
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_voidInit+0x1454>
    27d2:	98 8b       	std	Y+16, r25	; 0x10
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
			    _delay_ms(1);
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
    27d6:	fe 01       	movw	r30, r28
    27d8:	ea 53       	subi	r30, 0x3A	; 58
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	c9 01       	movw	r24, r18
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	82 0f       	add	r24, r18
    27ea:	93 1f       	adc	r25, r19
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	fc 01       	movw	r30, r24
    27f6:	e8 59       	subi	r30, 0x98	; 152
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	82 95       	swap	r24
    27fe:	86 95       	lsr	r24
    2800:	86 95       	lsr	r24
    2802:	83 70       	andi	r24, 0x03	; 3
    2804:	81 70       	andi	r24, 0x01	; 1
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	82 95       	swap	r24
    2810:	92 95       	swap	r25
    2812:	90 7f       	andi	r25, 0xF0	; 240
    2814:	98 27       	eor	r25, r24
    2816:	80 7f       	andi	r24, 0xF0	; 240
    2818:	98 27       	eor	r25, r24
    281a:	48 2f       	mov	r20, r24
    281c:	40 64       	ori	r20, 0x40	; 64
    281e:	fe 01       	movw	r30, r28
    2820:	ea 53       	subi	r30, 0x3A	; 58
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	c9 01       	movw	r24, r18
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	82 0f       	add	r24, r18
    2832:	93 1f       	adc	r25, r19
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	fc 01       	movw	r30, r24
    283e:	e8 59       	subi	r30, 0x98	; 152
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	88 1f       	adc	r24, r24
    2846:	88 27       	eor	r24, r24
    2848:	88 1f       	adc	r24, r24
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	82 95       	swap	r24
    2850:	92 95       	swap	r25
    2852:	90 7f       	andi	r25, 0xF0	; 240
    2854:	98 27       	eor	r25, r24
    2856:	80 7f       	andi	r24, 0xF0	; 240
    2858:	98 27       	eor	r25, r24
    285a:	84 2b       	or	r24, r20
    285c:	fe 01       	movw	r30, r28
    285e:	eb 53       	subi	r30, 0x3B	; 59
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	80 83       	st	Z, r24
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
    2864:	fe 01       	movw	r30, r28
    2866:	ea 53       	subi	r30, 0x3A	; 58
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	de 01       	movw	r26, r28
    286c:	ab 53       	subi	r26, 0x3B	; 59
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	6c 91       	ld	r22, X
    2874:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	53 e4       	ldi	r21, 0x43	; 67
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_voidInit+0x1550>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_voidInit+0x15ce>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_voidInit+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_voidInit+0x15b0>
    290c:	89 e1       	ldi	r24, 0x19	; 25
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_voidInit+0x159e>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_voidInit+0x1592>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_voidInit+0x15e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_voidInit+0x15da>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void) 
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
    295c:	de 01       	movw	r26, r28
    295e:	aa 53       	subi	r26, 0x3A	; 58
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	ea 53       	subi	r30, 0x3A	; 58
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	8c 93       	st	X, r24
    296e:	fe 01       	movw	r30, r28
    2970:	ea 53       	subi	r30, 0x3A	; 58
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	88 23       	and	r24, r24
    2978:	11 f4       	brne	.+4      	; 0x297e <LCD_voidInit+0x1604>
    297a:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <LCD_voidInit+0x26>
		
		
		
		
	}
}
    297e:	ca 53       	subi	r28, 0x3A	; 58
    2980:	df 4f       	sbci	r29, 0xFF	; 255
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <LCD_enuWriteCmd+0x6>
    299c:	0f 92       	push	r0
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	8a 83       	std	Y+2, r24	; 0x02
    29a4:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    29a6:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	88 23       	and	r24, r24
    29ac:	c9 f4       	brne	.+50     	; 0x29e0 <LCD_enuWriteCmd+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8LOW);
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	c9 01       	movw	r24, r18
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	fc 01       	movw	r30, r24
    29c8:	e7 59       	subi	r30, 0x97	; 151
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	6b 81       	ldd	r22, Y+3	; 0x03
    29d8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_enuHelp>
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <LCD_enuWriteCmd+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <LCD_enuWriteChar>:

tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <LCD_enuWriteChar+0x6>
    29f8:	0f 92       	push	r0
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2a02:	19 82       	std	Y+1, r1	; 0x01
	if (u8LcdNumCpy < LCD_MAX_NUM )
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	88 23       	and	r24, r24
    2a08:	c9 f4       	brne	.+50     	; 0x2a3c <LCD_enuWriteChar+0x4a>
	{
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect,DIO_u8HIGH);
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	c9 01       	movw	r24, r18
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	fc 01       	movw	r30, r24
    2a24:	e7 59       	subi	r30, 0x97	; 151
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8DataCpy );
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	6b 81       	ldd	r22, Y+3	; 0x03
    2a34:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_enuHelp>
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <LCD_enuWriteChar+0x4e>
	}
	else 
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ; 
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	
	return enuErrorStateLoc ;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <LCD_enuHelp>:

static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <LCD_enuHelp+0x6>
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <LCD_enuHelp+0x8>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
    2a5c:	6c 83       	std	Y+4, r22	; 0x04
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2a5e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	c9 01       	movw	r24, r18
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	82 0f       	add	r24, r18
    2a6e:	93 1f       	adc	r25, r19
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e5 59       	subi	r30, 0x95	; 149
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	61 e0       	ldi	r22, 0x01	; 1
    2a82:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	c9 01       	movw	r24, r18
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	82 0f       	add	r24, r18
    2a94:	93 1f       	adc	r25, r19
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	e8 59       	subi	r30, 0x98	; 152
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	82 0f       	add	r24, r18
    2abc:	93 1f       	adc	r25, r19
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e8 59       	subi	r30, 0x98	; 152
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	82 95       	swap	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	87 70       	andi	r24, 0x07	; 7
    2ad4:	81 70       	andi	r24, 0x01	; 1
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	89 f5       	brne	.+98     	; 0x2b3c <LCD_enuHelp+0xee>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2ada:	19 82       	std	Y+1, r1	; 0x01
    2adc:	2b c0       	rjmp	.+86     	; 0x2b34 <LCD_enuHelp+0xe6>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	c9 01       	movw	r24, r18
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	82 0f       	add	r24, r18
    2af2:	93 1f       	adc	r25, r19
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	84 0f       	add	r24, r20
    2afe:	95 1f       	adc	r25, r21
    2b00:	fc 01       	movw	r30, r24
    2b02:	e4 59       	subi	r30, 0x94	; 148
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	40 81       	ld	r20, Z
    2b08:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	b9 01       	movw	r22, r18
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <LCD_enuHelp+0xce>
    2b18:	75 95       	asr	r23
    2b1a:	67 95       	ror	r22
    2b1c:	8a 95       	dec	r24
    2b1e:	e2 f7       	brpl	.-8      	; 0x2b18 <LCD_enuHelp+0xca>
    2b20:	cb 01       	movw	r24, r22
    2b22:	98 2f       	mov	r25, r24
    2b24:	91 70       	andi	r25, 0x01	; 1
    2b26:	84 2f       	mov	r24, r20
    2b28:	69 2f       	mov	r22, r25
    2b2a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch   ,DIO_u8HIGH);
	(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite     ,DIO_u8LOW);
		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	8f 5f       	subi	r24, 0xFF	; 255
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	88 30       	cpi	r24, 0x08	; 8
    2b38:	90 f2       	brcs	.-92     	; 0x2ade <LCD_enuHelp+0x90>
    2b3a:	4a c0       	rjmp	.+148    	; 0x2bd0 <LCD_enuHelp+0x182>
			  {
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	c9 01       	movw	r24, r18
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	82 0f       	add	r24, r18
    2b4a:	93 1f       	adc	r25, r19
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	fc 01       	movw	r30, r24
    2b56:	e8 59       	subi	r30, 0x98	; 152
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	82 95       	swap	r24
    2b5e:	86 95       	lsr	r24
    2b60:	87 70       	andi	r24, 0x07	; 7
    2b62:	81 70       	andi	r24, 0x01	; 1
    2b64:	88 23       	and	r24, r24
    2b66:	91 f5       	brne	.+100    	; 0x2bcc <LCD_enuHelp+0x17e>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2b68:	84 e0       	ldi	r24, 0x04	; 4
    2b6a:	89 83       	std	Y+1, r24	; 0x01
    2b6c:	2b c0       	rjmp	.+86     	; 0x2bc4 <LCD_enuHelp+0x176>
			{
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	48 2f       	mov	r20, r24
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	c9 01       	movw	r24, r18
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	82 0f       	add	r24, r18
    2b82:	93 1f       	adc	r25, r19
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	84 0f       	add	r24, r20
    2b8e:	95 1f       	adc	r25, r21
    2b90:	fc 01       	movw	r30, r24
    2b92:	e4 59       	subi	r30, 0x94	; 148
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	40 81       	ld	r20, Z
    2b98:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b9 01       	movw	r22, r18
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <LCD_enuHelp+0x15e>
    2ba8:	75 95       	asr	r23
    2baa:	67 95       	ror	r22
    2bac:	8a 95       	dec	r24
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <LCD_enuHelp+0x15a>
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	91 70       	andi	r25, 0x01	; 1
    2bb6:	84 2f       	mov	r24, r20
    2bb8:	69 2f       	mov	r22, r25
    2bba:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
				(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc) );    
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	88 30       	cpi	r24, 0x08	; 8
    2bc8:	90 f2       	brcs	.-92     	; 0x2b6e <LCD_enuHelp+0x120>
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <LCD_enuHelp+0x182>
			}
			
		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
    2bcc:	84 e0       	ldi	r24, 0x04	; 4
    2bce:	8a 83       	std	Y+2, r24	; 0x02
		}
		(void)DIO_enuWritePin(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch     ,DIO_u8LOW);
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	fc 01       	movw	r30, r24
    2bea:	e5 59       	subi	r30, 0x95	; 149
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	return enuErrorStateLoc ;
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <LCD_enuWriteData>:


tenuErrorStatus LCD_enuWriteData (uint8 u8LcdNumCpy , uint8 *  pu8DataCpy , uint8 u8SizeCpy)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LCD_enuWriteData+0x6>
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <LCD_enuWriteData+0x8>
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	7b 83       	std	Y+3, r23	; 0x03
    2c18:	6a 83       	std	Y+2, r22	; 0x02
    2c1a:	4c 83       	std	Y+4, r20	; 0x04
	
}
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <LCD_enuCreateCustChar>:


tenuErrorStatus LCD_enuCreateCustChar (uint8 u8LcdNumCpy , uint8 *pu8PatternCpy , uint8 u8LocationCpy) 
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <LCD_enuCreateCustChar+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <LCD_enuCreateCustChar+0x8>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <LCD_enuCreateCustChar+0xa>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	7d 83       	std	Y+5, r23	; 0x05
    2c3e:	6c 83       	std	Y+4, r22	; 0x04
    2c40:	4e 83       	std	Y+6, r20	; 0x06
	tenuErrorStatus enuErrorStateLoc = E_OK ;
    2c42:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	88 23       	and	r24, r24
    2c48:	41 f5       	brne	.+80     	; 0x2c9a <LCD_enuCreateCustChar+0x6e>
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	89 30       	cpi	r24, 0x09	; 9
    2c4e:	28 f5       	brcc	.+74     	; 0x2c9a <LCD_enuCreateCustChar+0x6e>
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	08 96       	adiw	r24, 0x08	; 8
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	98 2f       	mov	r25, r24
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	69 2f       	mov	r22, r25
    2c6a:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    2c6e:	19 82       	std	Y+1, r1	; 0x01
    2c70:	10 c0       	rjmp	.+32     	; 0x2c92 <LCD_enuCreateCustChar+0x66>
		{
			LCD_enuWriteChar(u8LcdNumCpy ,pu8PatternCpy[u8CntrLoc] );
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e2 0f       	add	r30, r18
    2c80:	f3 1f       	adc	r31, r19
    2c82:	90 81       	ld	r25, Z
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	69 2f       	mov	r22, r25
    2c88:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
	uint8 u8CntrLoc;
	if(u8LcdNumCpy < LCD_MAX_NUM && u8LocationCpy < 9)
	{
		LCD_enuWriteCmd(u8LcdNumCpy , 0x40+(u8LocationCpy * 8 ));
		
		for (u8CntrLoc = 0 ;u8CntrLoc < 8 ; u8CntrLoc++ )
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	8f 5f       	subi	r24, 0xFF	; 255
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	88 30       	cpi	r24, 0x08	; 8
    2c96:	68 f3       	brcs	.-38     	; 0x2c72 <LCD_enuCreateCustChar+0x46>
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <LCD_enuCreateCustChar+0x72>
		}
		
	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;	
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return enuErrorStateLoc ;
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    2ca0:	26 96       	adiw	r28, 0x06	; 6
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <LED_enuWriteValue>:
#include "LED_cfg.h"
#include "LED_priv.h"


tenuErrorStatus LED_enuWriteValue (uint8 u8LedNumCpy , uint8 u8LedValueCpy  )
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <LED_enuWriteValue+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <LED_enuWriteValue+0x8>
    2cba:	0f 92       	push	r0
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    2cc4:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f0       	breq	.+2      	; 0x2cce <LED_enuWriteValue+0x1c>
    2ccc:	7c c0       	rjmp	.+248    	; 0x2dc6 <LED_enuWriteValue+0x114>
	{
		switch(u8LedValueCpy)
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	3d 83       	std	Y+5, r19	; 0x05
    2cd6:	2c 83       	std	Y+4, r18	; 0x04
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	9d 81       	ldd	r25, Y+5	; 0x05
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	d9 f1       	breq	.+118    	; 0x2d56 <LED_enuWriteValue+0xa4>
    2ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce4:	21 30       	cpi	r18, 0x01	; 1
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <LED_enuWriteValue+0x3a>
    2cea:	6a c0       	rjmp	.+212    	; 0x2dc0 <LED_enuWriteValue+0x10e>
		{
			case LED_u8ON :
				if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	eb 58       	subi	r30, 0x8B	; 139
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8a 3a       	cpi	r24, 0xAA	; 170
    2d00:	71 f4       	brne	.+28     	; 0x2d1e <LED_enuWriteValue+0x6c>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	ec 58       	subi	r30, 0x8C	; 140
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	56 c0       	rjmp	.+172    	; 0x2dca <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	fc 01       	movw	r30, r24
    2d2a:	eb 58       	subi	r30, 0x8B	; 139
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	85 35       	cpi	r24, 0x55	; 85
    2d32:	71 f4       	brne	.+28     	; 0x2d50 <LED_enuWriteValue+0x9e>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;			
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	fc 01       	movw	r30, r24
    2d40:	ec 58       	subi	r30, 0x8C	; 140
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	3d c0       	rjmp	.+122    	; 0x2dca <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    2d50:	84 e0       	ldi	r24, 0x04	; 4
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	3a c0       	rjmp	.+116    	; 0x2dca <LED_enuWriteValue+0x118>
				}
			break ;
			case LED_u8OFF:
			   if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8NORMAL)
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	fc 01       	movw	r30, r24
    2d62:	eb 58       	subi	r30, 0x8B	; 139
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 81       	ld	r24, Z
    2d68:	8a 3a       	cpi	r24, 0xAA	; 170
    2d6a:	71 f4       	brne	.+28     	; 0x2d88 <LED_enuWriteValue+0xd6>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8LOW ) ;
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	fc 01       	movw	r30, r24
    2d78:	ec 58       	subi	r30, 0x8C	; 140
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	21 c0       	rjmp	.+66     	; 0x2dca <LED_enuWriteValue+0x118>
				}
				else if (LED_astrLedPinMapping[u8LedNumCpy].u8LedModeConc == LED_u8REVERSE)
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	fc 01       	movw	r30, r24
    2d94:	eb 58       	subi	r30, 0x8B	; 139
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	85 35       	cpi	r24, 0x55	; 85
    2d9c:	71 f4       	brne	.+28     	; 0x2dba <LED_enuWriteValue+0x108>
				{
					enuReturnStatLoc = DIO_enuWritePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap , DIO_u8HIGH ) ;			
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	fc 01       	movw	r30, r24
    2daa:	ec 58       	subi	r30, 0x8C	; 140
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <LED_enuWriteValue+0x118>
				}
				else
				{
					enuReturnStatLoc = E_NOK_CONFIG_PARM_ERROR ;
    2dba:	84 e0       	ldi	r24, 0x04	; 4
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <LED_enuWriteValue+0x118>
				}					
			break ;
			default :
				enuReturnStatLoc =E_NOK_PARAM_OUT_OF_RANGE ;
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <LED_enuWriteValue+0x118>
            break ;				
		}
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LED_enuToggle>:

tenuErrorStatus LED_enuToggle (uint8 u8LedNumCpy )
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <LED_enuToggle+0x6>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnStatLoc = E_OK ; 
    2de8:	19 82       	std	Y+1, r1	; 0x01
	if (u8LedNumCpy < LED_MAX_NUM )
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	88 23       	and	r24, r24
    2dee:	69 f4       	brne	.+26     	; 0x2e0a <LED_enuToggle+0x2e>
	{
		enuReturnStatLoc = DIO_enuTogglePin(LED_astrLedPinMapping[u8LedNumCpy].u8DioPinMap);
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	ec 58       	subi	r30, 0x8C	; 140
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	0e 94 24 09 	call	0x1248	; 0x1248 <DIO_enuTogglePin>
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <LED_enuToggle+0x32>
	}
	else
	{
		enuReturnStatLoc = E_NOK_PARAM_OUT_OF_RANGE ;
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStatLoc ;
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <HCSR04_voidTrigger>:
#define  F_CPU 1000000UL

uint16 u16Distance, u16Width;

void HCSR04_voidTrigger(void)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	2e 97       	sbiw	r28, 0x0e	; 14
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
	DIO_enuWritePin(DIO_u8PIN_31 , DIO_u8HIGH);
    2e2e:	8f e1       	ldi	r24, 0x1F	; 31
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e7       	ldi	r26, 0x70	; 112
    2e3c:	b1 e4       	ldi	r27, 0x41	; 65
    2e3e:	8b 87       	std	Y+11, r24	; 0x0b
    2e40:	9c 87       	std	Y+12, r25	; 0x0c
    2e42:	ad 87       	std	Y+13, r26	; 0x0d
    2e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a e7       	ldi	r20, 0x7A	; 122
    2e54:	53 e4       	ldi	r21, 0x43	; 67
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8f 83       	std	Y+7, r24	; 0x07
    2e60:	98 87       	std	Y+8, r25	; 0x08
    2e62:	a9 87       	std	Y+9, r26	; 0x09
    2e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <HCSR04_voidTrigger+0x6e>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <HCSR04_voidTrigger+0xec>
	else if (__tmp > 65535)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <HCSR04_voidTrigger+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <HCSR04_voidTrigger+0xce>
    2eca:	89 e1       	ldi	r24, 0x19	; 25
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <HCSR04_voidTrigger+0xbc>
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <HCSR04_voidTrigger+0xb0>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <HCSR04_voidTrigger+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <HCSR04_voidTrigger+0xf8>
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
	DIO_enuWritePin(DIO_u8PIN_31 , DIO_u8LOW);
    2f1a:	8f e1       	ldi	r24, 0x1F	; 31
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
}
    2f22:	2e 96       	adiw	r28, 0x0e	; 14
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <main>:

void main()
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    2f48:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    2f4c:	0e 94 bd 09 	call	0x137a	; 0x137a <LCD_voidInit>

	while(1)
	{
		HCSR04_voidTrigger();
    2f50:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <HCSR04_voidTrigger>
		u16Width = ICU_u16PulseWidth();
    2f54:	0e 94 31 09 	call	0x1262	; 0x1262 <ICU_u16PulseWidth>
    2f58:	90 93 7d 00 	sts	0x007D, r25
    2f5c:	80 93 7c 00 	sts	0x007C, r24

		u16Distance=((u16Width*34600)/(F_CPU*2));
    2f60:	80 91 7c 00 	lds	r24, 0x007C
    2f64:	90 91 7d 00 	lds	r25, 0x007D
    2f68:	cc 01       	movw	r24, r24
    2f6a:	a0 e0       	ldi	r26, 0x00	; 0
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	28 e2       	ldi	r18, 0x28	; 40
    2f70:	37 e8       	ldi	r19, 0x87	; 135
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 3c 19 	call	0x3278	; 0x3278 <__mulsi3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	20 e8       	ldi	r18, 0x80	; 128
    2f84:	34 e8       	ldi	r19, 0x84	; 132
    2f86:	4e e1       	ldi	r20, 0x1E	; 30
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 6f 19 	call	0x32de	; 0x32de <__udivmodsi4>
    2f92:	da 01       	movw	r26, r20
    2f94:	c9 01       	movw	r24, r18
    2f96:	90 93 7f 00 	sts	0x007F, r25
    2f9a:	80 93 7e 00 	sts	0x007E, r24

		if (u16Distance>=80)
    2f9e:	80 91 7e 00 	lds	r24, 0x007E
    2fa2:	90 91 7f 00 	lds	r25, 0x007F
    2fa6:	80 35       	cpi	r24, 0x50	; 80
    2fa8:	91 05       	cpc	r25, r1
    2faa:	08 f4       	brcc	.+2      	; 0x2fae <main+0x7a>
    2fac:	9f c0       	rjmp	.+318    	; 0x30ec <main+0x1b8>
		{
			LCD_enuWriteCmd(LCD_u8NUM_0,0x01);
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	61 e0       	ldi	r22, 0x01	; 1
    2fb2:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>
			LED_enuWriteValue (LED_u8NUM_0  , LED_u8OFF);
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LED_enuWriteValue>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'n');
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	6e e6       	ldi	r22, 0x6E	; 110
    2fc2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'o');
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	6f e6       	ldi	r22, 0x6F	; 111
    2fca:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,' ');
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	60 e2       	ldi	r22, 0x20	; 32
    2fd2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'o');
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	6f e6       	ldi	r22, 0x6F	; 111
    2fda:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'b');
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	62 e6       	ldi	r22, 0x62	; 98
    2fe2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'j');
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	6a e6       	ldi	r22, 0x6A	; 106
    2fea:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'e');
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	65 e6       	ldi	r22, 0x65	; 101
    2ff2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'c');
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	63 e6       	ldi	r22, 0x63	; 99
    2ffa:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'t');
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	64 e7       	ldi	r22, 0x74	; 116
    3002:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	aa ef       	ldi	r26, 0xFA	; 250
    300c:	b3 e4       	ldi	r27, 0x43	; 67
    300e:	89 8f       	std	Y+25, r24	; 0x19
    3010:	9a 8f       	std	Y+26, r25	; 0x1a
    3012:	ab 8f       	std	Y+27, r26	; 0x1b
    3014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3016:	69 8d       	ldd	r22, Y+25	; 0x19
    3018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4a e7       	ldi	r20, 0x7A	; 122
    3024:	53 e4       	ldi	r21, 0x43	; 67
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	8d 8b       	std	Y+21, r24	; 0x15
    3030:	9e 8b       	std	Y+22, r25	; 0x16
    3032:	af 8b       	std	Y+23, r26	; 0x17
    3034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3036:	6d 89       	ldd	r22, Y+21	; 0x15
    3038:	7e 89       	ldd	r23, Y+22	; 0x16
    303a:	8f 89       	ldd	r24, Y+23	; 0x17
    303c:	98 8d       	ldd	r25, Y+24	; 0x18
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e8       	ldi	r20, 0x80	; 128
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <main+0x124>
		__ticks = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9c 8b       	std	Y+20, r25	; 0x14
    3054:	8b 8b       	std	Y+19, r24	; 0x13
    3056:	3f c0       	rjmp	.+126    	; 0x30d6 <main+0x1a2>
	else if (__tmp > 65535)
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	4c f5       	brge	.+82     	; 0x30c2 <main+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	69 8d       	ldd	r22, Y+25	; 0x19
    3072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
    3098:	0f c0       	rjmp	.+30     	; 0x30b8 <main+0x184>
    309a:	89 e1       	ldi	r24, 0x19	; 25
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9a 8b       	std	Y+18, r25	; 0x12
    30a0:	89 8b       	std	Y+17, r24	; 0x11
    30a2:	89 89       	ldd	r24, Y+17	; 0x11
    30a4:	9a 89       	ldd	r25, Y+18	; 0x12
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <main+0x172>
    30aa:	9a 8b       	std	Y+18, r25	; 0x12
    30ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ba:	9c 89       	ldd	r25, Y+20	; 0x14
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	69 f7       	brne	.-38     	; 0x309a <main+0x166>
    30c0:	47 cf       	rjmp	.-370    	; 0x2f50 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	6d 89       	ldd	r22, Y+21	; 0x15
    30c4:	7e 89       	ldd	r23, Y+22	; 0x16
    30c6:	8f 89       	ldd	r24, Y+23	; 0x17
    30c8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
    30d6:	8b 89       	ldd	r24, Y+19	; 0x13
    30d8:	9c 89       	ldd	r25, Y+20	; 0x14
    30da:	98 8b       	std	Y+16, r25	; 0x10
    30dc:	8f 87       	std	Y+15, r24	; 0x0f
    30de:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e0:	98 89       	ldd	r25, Y+16	; 0x10
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <main+0x1ae>
    30e6:	98 8b       	std	Y+16, r25	; 0x10
    30e8:	8f 87       	std	Y+15, r24	; 0x0f
    30ea:	32 cf       	rjmp	.-412    	; 0x2f50 <main+0x1c>
			_delay_ms(500);

		}
		else
		{
			LCD_enuWriteChar(LCD_u8NUM_0 ,'D');
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	64 e4       	ldi	r22, 0x44	; 68
    30f0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'I');
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	69 e4       	ldi	r22, 0x49	; 73
    30f8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'S');
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	63 e5       	ldi	r22, 0x53	; 83
    3100:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'T');
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	64 e5       	ldi	r22, 0x54	; 84
    3108:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'A');
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	61 e4       	ldi	r22, 0x41	; 65
    3110:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'N');
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	6e e4       	ldi	r22, 0x4E	; 78
    3118:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'C');
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	63 e4       	ldi	r22, 0x43	; 67
    3120:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'E');
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	65 e4       	ldi	r22, 0x45	; 69
    3128:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'=');
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	6d e3       	ldi	r22, 0x3D	; 61
    3130:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>

			LCD_enuWriteChar(LCD_u8NUM_0 ,(u16Distance/10)+48);
    3134:	80 91 7e 00 	lds	r24, 0x007E
    3138:	90 91 7f 00 	lds	r25, 0x007F
    313c:	2a e0       	ldi	r18, 0x0A	; 10
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	b9 01       	movw	r22, r18
    3142:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__udivmodhi4>
    3146:	cb 01       	movw	r24, r22
    3148:	98 2f       	mov	r25, r24
    314a:	90 5d       	subi	r25, 0xD0	; 208
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	69 2f       	mov	r22, r25
    3150:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,(u16Distance%10)+48);
    3154:	80 91 7e 00 	lds	r24, 0x007E
    3158:	90 91 7f 00 	lds	r25, 0x007F
    315c:	2a e0       	ldi	r18, 0x0A	; 10
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	b9 01       	movw	r22, r18
    3162:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__udivmodhi4>
    3166:	98 2f       	mov	r25, r24
    3168:	90 5d       	subi	r25, 0xD0	; 208
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	69 2f       	mov	r22, r25
    316e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>

			LCD_enuWriteChar(LCD_u8NUM_0 ,'c');
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	63 e6       	ldi	r22, 0x63	; 99
    3176:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
			LCD_enuWriteChar(LCD_u8NUM_0 ,'m');
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	6d e6       	ldi	r22, 0x6D	; 109
    317e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_enuWriteChar>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	aa ef       	ldi	r26, 0xFA	; 250
    3188:	b3 e4       	ldi	r27, 0x43	; 67
    318a:	8b 87       	std	Y+11, r24	; 0x0b
    318c:	9c 87       	std	Y+12, r25	; 0x0c
    318e:	ad 87       	std	Y+13, r26	; 0x0d
    3190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3192:	6b 85       	ldd	r22, Y+11	; 0x0b
    3194:	7c 85       	ldd	r23, Y+12	; 0x0c
    3196:	8d 85       	ldd	r24, Y+13	; 0x0d
    3198:	9e 85       	ldd	r25, Y+14	; 0x0e
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	4a e7       	ldi	r20, 0x7A	; 122
    31a0:	53 e4       	ldi	r21, 0x43	; 67
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	8f 83       	std	Y+7, r24	; 0x07
    31ac:	98 87       	std	Y+8, r25	; 0x08
    31ae:	a9 87       	std	Y+9, r26	; 0x09
    31b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b2:	6f 81       	ldd	r22, Y+7	; 0x07
    31b4:	78 85       	ldd	r23, Y+8	; 0x08
    31b6:	89 85       	ldd	r24, Y+9	; 0x09
    31b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	5f e3       	ldi	r21, 0x3F	; 63
    31c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c6:	88 23       	and	r24, r24
    31c8:	2c f4       	brge	.+10     	; 0x31d4 <main+0x2a0>
		__ticks = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	3f c0       	rjmp	.+126    	; 0x3252 <main+0x31e>
	else if (__tmp > 65535)
    31d4:	6f 81       	ldd	r22, Y+7	; 0x07
    31d6:	78 85       	ldd	r23, Y+8	; 0x08
    31d8:	89 85       	ldd	r24, Y+9	; 0x09
    31da:	9a 85       	ldd	r25, Y+10	; 0x0a
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	3f ef       	ldi	r19, 0xFF	; 255
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	57 e4       	ldi	r21, 0x47	; 71
    31e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e8:	18 16       	cp	r1, r24
    31ea:	4c f5       	brge	.+82     	; 0x323e <main+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <main+0x300>
    3216:	89 e1       	ldi	r24, 0x19	; 25
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <main+0x2ee>
    3226:	9c 83       	std	Y+4, r25	; 0x04
    3228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322a:	8d 81       	ldd	r24, Y+5	; 0x05
    322c:	9e 81       	ldd	r25, Y+6	; 0x06
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	9e 83       	std	Y+6, r25	; 0x06
    3232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3234:	8d 81       	ldd	r24, Y+5	; 0x05
    3236:	9e 81       	ldd	r25, Y+6	; 0x06
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	69 f7       	brne	.-38     	; 0x3216 <main+0x2e2>
    323c:	14 c0       	rjmp	.+40     	; 0x3266 <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	9e 81       	ldd	r25, Y+6	; 0x06
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <main+0x32a>
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(500);

			LCD_enuWriteCmd(LCD_u8NUM_0,0x01);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	0e 94 cb 14 	call	0x2996	; 0x2996 <LCD_enuWriteCmd>

			LED_enuWriteValue (LED_u8NUM_0 , LED_u8ON );
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LED_enuWriteValue>
    3276:	6c ce       	rjmp	.-808    	; 0x2f50 <main+0x1c>

00003278 <__mulsi3>:
    3278:	62 9f       	mul	r22, r18
    327a:	d0 01       	movw	r26, r0
    327c:	73 9f       	mul	r23, r19
    327e:	f0 01       	movw	r30, r0
    3280:	82 9f       	mul	r24, r18
    3282:	e0 0d       	add	r30, r0
    3284:	f1 1d       	adc	r31, r1
    3286:	64 9f       	mul	r22, r20
    3288:	e0 0d       	add	r30, r0
    328a:	f1 1d       	adc	r31, r1
    328c:	92 9f       	mul	r25, r18
    328e:	f0 0d       	add	r31, r0
    3290:	83 9f       	mul	r24, r19
    3292:	f0 0d       	add	r31, r0
    3294:	74 9f       	mul	r23, r20
    3296:	f0 0d       	add	r31, r0
    3298:	65 9f       	mul	r22, r21
    329a:	f0 0d       	add	r31, r0
    329c:	99 27       	eor	r25, r25
    329e:	72 9f       	mul	r23, r18
    32a0:	b0 0d       	add	r27, r0
    32a2:	e1 1d       	adc	r30, r1
    32a4:	f9 1f       	adc	r31, r25
    32a6:	63 9f       	mul	r22, r19
    32a8:	b0 0d       	add	r27, r0
    32aa:	e1 1d       	adc	r30, r1
    32ac:	f9 1f       	adc	r31, r25
    32ae:	bd 01       	movw	r22, r26
    32b0:	cf 01       	movw	r24, r30
    32b2:	11 24       	eor	r1, r1
    32b4:	08 95       	ret

000032b6 <__udivmodhi4>:
    32b6:	aa 1b       	sub	r26, r26
    32b8:	bb 1b       	sub	r27, r27
    32ba:	51 e1       	ldi	r21, 0x11	; 17
    32bc:	07 c0       	rjmp	.+14     	; 0x32cc <__udivmodhi4_ep>

000032be <__udivmodhi4_loop>:
    32be:	aa 1f       	adc	r26, r26
    32c0:	bb 1f       	adc	r27, r27
    32c2:	a6 17       	cp	r26, r22
    32c4:	b7 07       	cpc	r27, r23
    32c6:	10 f0       	brcs	.+4      	; 0x32cc <__udivmodhi4_ep>
    32c8:	a6 1b       	sub	r26, r22
    32ca:	b7 0b       	sbc	r27, r23

000032cc <__udivmodhi4_ep>:
    32cc:	88 1f       	adc	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	5a 95       	dec	r21
    32d2:	a9 f7       	brne	.-22     	; 0x32be <__udivmodhi4_loop>
    32d4:	80 95       	com	r24
    32d6:	90 95       	com	r25
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	08 95       	ret

000032de <__udivmodsi4>:
    32de:	a1 e2       	ldi	r26, 0x21	; 33
    32e0:	1a 2e       	mov	r1, r26
    32e2:	aa 1b       	sub	r26, r26
    32e4:	bb 1b       	sub	r27, r27
    32e6:	fd 01       	movw	r30, r26
    32e8:	0d c0       	rjmp	.+26     	; 0x3304 <__udivmodsi4_ep>

000032ea <__udivmodsi4_loop>:
    32ea:	aa 1f       	adc	r26, r26
    32ec:	bb 1f       	adc	r27, r27
    32ee:	ee 1f       	adc	r30, r30
    32f0:	ff 1f       	adc	r31, r31
    32f2:	a2 17       	cp	r26, r18
    32f4:	b3 07       	cpc	r27, r19
    32f6:	e4 07       	cpc	r30, r20
    32f8:	f5 07       	cpc	r31, r21
    32fa:	20 f0       	brcs	.+8      	; 0x3304 <__udivmodsi4_ep>
    32fc:	a2 1b       	sub	r26, r18
    32fe:	b3 0b       	sbc	r27, r19
    3300:	e4 0b       	sbc	r30, r20
    3302:	f5 0b       	sbc	r31, r21

00003304 <__udivmodsi4_ep>:
    3304:	66 1f       	adc	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	88 1f       	adc	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	1a 94       	dec	r1
    330e:	69 f7       	brne	.-38     	; 0x32ea <__udivmodsi4_loop>
    3310:	60 95       	com	r22
    3312:	70 95       	com	r23
    3314:	80 95       	com	r24
    3316:	90 95       	com	r25
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	bd 01       	movw	r22, r26
    331e:	cf 01       	movw	r24, r30
    3320:	08 95       	ret

00003322 <__prologue_saves__>:
    3322:	2f 92       	push	r2
    3324:	3f 92       	push	r3
    3326:	4f 92       	push	r4
    3328:	5f 92       	push	r5
    332a:	6f 92       	push	r6
    332c:	7f 92       	push	r7
    332e:	8f 92       	push	r8
    3330:	9f 92       	push	r9
    3332:	af 92       	push	r10
    3334:	bf 92       	push	r11
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	ca 1b       	sub	r28, r26
    334c:	db 0b       	sbc	r29, r27
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	09 94       	ijmp

0000335a <__epilogue_restores__>:
    335a:	2a 88       	ldd	r2, Y+18	; 0x12
    335c:	39 88       	ldd	r3, Y+17	; 0x11
    335e:	48 88       	ldd	r4, Y+16	; 0x10
    3360:	5f 84       	ldd	r5, Y+15	; 0x0f
    3362:	6e 84       	ldd	r6, Y+14	; 0x0e
    3364:	7d 84       	ldd	r7, Y+13	; 0x0d
    3366:	8c 84       	ldd	r8, Y+12	; 0x0c
    3368:	9b 84       	ldd	r9, Y+11	; 0x0b
    336a:	aa 84       	ldd	r10, Y+10	; 0x0a
    336c:	b9 84       	ldd	r11, Y+9	; 0x09
    336e:	c8 84       	ldd	r12, Y+8	; 0x08
    3370:	df 80       	ldd	r13, Y+7	; 0x07
    3372:	ee 80       	ldd	r14, Y+6	; 0x06
    3374:	fd 80       	ldd	r15, Y+5	; 0x05
    3376:	0c 81       	ldd	r16, Y+4	; 0x04
    3378:	1b 81       	ldd	r17, Y+3	; 0x03
    337a:	aa 81       	ldd	r26, Y+2	; 0x02
    337c:	b9 81       	ldd	r27, Y+1	; 0x01
    337e:	ce 0f       	add	r28, r30
    3380:	d1 1d       	adc	r29, r1
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	ed 01       	movw	r28, r26
    338e:	08 95       	ret

00003390 <_exit>:
    3390:	f8 94       	cli

00003392 <__stop_program>:
    3392:	ff cf       	rjmp	.-2      	; 0x3392 <__stop_program>
